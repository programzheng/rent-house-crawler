// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/rent591home"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbreadcrumb"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbrowse"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailinfo"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailnavdata"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionround"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpublish"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailshareinfo"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailtag"
)

// Rent591HomeDetailCreate is the builder for creating a Rent591HomeDetail entity.
type Rent591HomeDetailCreate struct {
	config
	mutation *Rent591HomeDetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (rdc *Rent591HomeDetailCreate) SetTitle(s string) *Rent591HomeDetailCreate {
	rdc.mutation.SetTitle(s)
	return rdc
}

// SetDeposit sets the "deposit" field.
func (rdc *Rent591HomeDetailCreate) SetDeposit(s string) *Rent591HomeDetailCreate {
	rdc.mutation.SetDeposit(s)
	return rdc
}

// SetKind sets the "kind" field.
func (rdc *Rent591HomeDetailCreate) SetKind(i int) *Rent591HomeDetailCreate {
	rdc.mutation.SetKind(i)
	return rdc
}

// SetRelieved sets the "relieved" field.
func (rdc *Rent591HomeDetailCreate) SetRelieved(i int) *Rent591HomeDetailCreate {
	rdc.mutation.SetRelieved(i)
	return rdc
}

// SetRegionID sets the "region_id" field.
func (rdc *Rent591HomeDetailCreate) SetRegionID(i int) *Rent591HomeDetailCreate {
	rdc.mutation.SetRegionID(i)
	return rdc
}

// SetSectionID sets the "section_id" field.
func (rdc *Rent591HomeDetailCreate) SetSectionID(i int) *Rent591HomeDetailCreate {
	rdc.mutation.SetSectionID(i)
	return rdc
}

// SetDealText sets the "deal_text" field.
func (rdc *Rent591HomeDetailCreate) SetDealText(s string) *Rent591HomeDetailCreate {
	rdc.mutation.SetDealText(s)
	return rdc
}

// SetNillableDealText sets the "deal_text" field if the given value is not nil.
func (rdc *Rent591HomeDetailCreate) SetNillableDealText(s *string) *Rent591HomeDetailCreate {
	if s != nil {
		rdc.SetDealText(*s)
	}
	return rdc
}

// SetDealTime sets the "deal_time" field.
func (rdc *Rent591HomeDetailCreate) SetDealTime(i int) *Rent591HomeDetailCreate {
	rdc.mutation.SetDealTime(i)
	return rdc
}

// SetPrice sets the "price" field.
func (rdc *Rent591HomeDetailCreate) SetPrice(i int) *Rent591HomeDetailCreate {
	rdc.mutation.SetPrice(i)
	return rdc
}

// SetPriceUnit sets the "price_unit" field.
func (rdc *Rent591HomeDetailCreate) SetPriceUnit(s string) *Rent591HomeDetailCreate {
	rdc.mutation.SetPriceUnit(s)
	return rdc
}

// SetCreatedAt sets the "created_at" field.
func (rdc *Rent591HomeDetailCreate) SetCreatedAt(t time.Time) *Rent591HomeDetailCreate {
	rdc.mutation.SetCreatedAt(t)
	return rdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rdc *Rent591HomeDetailCreate) SetNillableCreatedAt(t *time.Time) *Rent591HomeDetailCreate {
	if t != nil {
		rdc.SetCreatedAt(*t)
	}
	return rdc
}

// SetUpdatedAt sets the "updated_at" field.
func (rdc *Rent591HomeDetailCreate) SetUpdatedAt(t time.Time) *Rent591HomeDetailCreate {
	rdc.mutation.SetUpdatedAt(t)
	return rdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rdc *Rent591HomeDetailCreate) SetNillableUpdatedAt(t *time.Time) *Rent591HomeDetailCreate {
	if t != nil {
		rdc.SetUpdatedAt(*t)
	}
	return rdc
}

// SetRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID.
func (rdc *Rent591HomeDetailCreate) SetRent591homesID(id int) *Rent591HomeDetailCreate {
	rdc.mutation.SetRent591homesID(id)
	return rdc
}

// SetNillableRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID if the given value is not nil.
func (rdc *Rent591HomeDetailCreate) SetNillableRent591homesID(id *int) *Rent591HomeDetailCreate {
	if id != nil {
		rdc = rdc.SetRent591homesID(*id)
	}
	return rdc
}

// SetRent591homes sets the "rent591homes" edge to the Rent591Home entity.
func (rdc *Rent591HomeDetailCreate) SetRent591homes(r *Rent591Home) *Rent591HomeDetailCreate {
	return rdc.SetRent591homesID(r.ID)
}

// AddRent591homeDetailBreadcrumbIDs adds the "rent591home_detail_breadcrumbs" edge to the Rent591HomeDetailBreadcrumb entity by IDs.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailBreadcrumbIDs(ids ...int) *Rent591HomeDetailCreate {
	rdc.mutation.AddRent591homeDetailBreadcrumbIDs(ids...)
	return rdc
}

// AddRent591homeDetailBreadcrumbs adds the "rent591home_detail_breadcrumbs" edges to the Rent591HomeDetailBreadcrumb entity.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailBreadcrumbs(r ...*Rent591HomeDetailBreadcrumb) *Rent591HomeDetailCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdc.AddRent591homeDetailBreadcrumbIDs(ids...)
}

// AddRent591homeDetailShareinfoIDs adds the "rent591home_detail_shareinfos" edge to the Rent591HomeDetailShareInfo entity by IDs.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailShareinfoIDs(ids ...int) *Rent591HomeDetailCreate {
	rdc.mutation.AddRent591homeDetailShareinfoIDs(ids...)
	return rdc
}

// AddRent591homeDetailShareinfos adds the "rent591home_detail_shareinfos" edges to the Rent591HomeDetailShareInfo entity.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailShareinfos(r ...*Rent591HomeDetailShareInfo) *Rent591HomeDetailCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdc.AddRent591homeDetailShareinfoIDs(ids...)
}

// AddRent591homeDetailBrowseIDs adds the "rent591home_detail_browses" edge to the Rent591HomeDetailBrowse entity by IDs.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailBrowseIDs(ids ...int) *Rent591HomeDetailCreate {
	rdc.mutation.AddRent591homeDetailBrowseIDs(ids...)
	return rdc
}

// AddRent591homeDetailBrowses adds the "rent591home_detail_browses" edges to the Rent591HomeDetailBrowse entity.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailBrowses(r ...*Rent591HomeDetailBrowse) *Rent591HomeDetailCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdc.AddRent591homeDetailBrowseIDs(ids...)
}

// AddRent591homeDetailTagIDs adds the "rent591home_detail_tags" edge to the Rent591HomeDetailTag entity by IDs.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailTagIDs(ids ...int) *Rent591HomeDetailCreate {
	rdc.mutation.AddRent591homeDetailTagIDs(ids...)
	return rdc
}

// AddRent591homeDetailTags adds the "rent591home_detail_tags" edges to the Rent591HomeDetailTag entity.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailTags(r ...*Rent591HomeDetailTag) *Rent591HomeDetailCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdc.AddRent591homeDetailTagIDs(ids...)
}

// AddRent591homeDetailNavdataIDs adds the "rent591home_detail_navdatas" edge to the Rent591HomeDetailNavData entity by IDs.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailNavdataIDs(ids ...int) *Rent591HomeDetailCreate {
	rdc.mutation.AddRent591homeDetailNavdataIDs(ids...)
	return rdc
}

// AddRent591homeDetailNavdatas adds the "rent591home_detail_navdatas" edges to the Rent591HomeDetailNavData entity.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailNavdatas(r ...*Rent591HomeDetailNavData) *Rent591HomeDetailCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdc.AddRent591homeDetailNavdataIDs(ids...)
}

// AddRent591homeDetailInfoIDs adds the "rent591home_detail_infos" edge to the Rent591HomeDetailInfo entity by IDs.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailInfoIDs(ids ...int) *Rent591HomeDetailCreate {
	rdc.mutation.AddRent591homeDetailInfoIDs(ids...)
	return rdc
}

// AddRent591homeDetailInfos adds the "rent591home_detail_infos" edges to the Rent591HomeDetailInfo entity.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailInfos(r ...*Rent591HomeDetailInfo) *Rent591HomeDetailCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdc.AddRent591homeDetailInfoIDs(ids...)
}

// AddRent591homeDetailPublishIDs adds the "rent591home_detail_publishs" edge to the Rent591HomeDetailPublish entity by IDs.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailPublishIDs(ids ...int) *Rent591HomeDetailCreate {
	rdc.mutation.AddRent591homeDetailPublishIDs(ids...)
	return rdc
}

// AddRent591homeDetailPublishs adds the "rent591home_detail_publishs" edges to the Rent591HomeDetailPublish entity.
func (rdc *Rent591HomeDetailCreate) AddRent591homeDetailPublishs(r ...*Rent591HomeDetailPublish) *Rent591HomeDetailCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdc.AddRent591homeDetailPublishIDs(ids...)
}

// SetRent591homeDetailPositionRoundsID sets the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity by ID.
func (rdc *Rent591HomeDetailCreate) SetRent591homeDetailPositionRoundsID(id int) *Rent591HomeDetailCreate {
	rdc.mutation.SetRent591homeDetailPositionRoundsID(id)
	return rdc
}

// SetNillableRent591homeDetailPositionRoundsID sets the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity by ID if the given value is not nil.
func (rdc *Rent591HomeDetailCreate) SetNillableRent591homeDetailPositionRoundsID(id *int) *Rent591HomeDetailCreate {
	if id != nil {
		rdc = rdc.SetRent591homeDetailPositionRoundsID(*id)
	}
	return rdc
}

// SetRent591homeDetailPositionRounds sets the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity.
func (rdc *Rent591HomeDetailCreate) SetRent591homeDetailPositionRounds(r *Rent591HomeDetailPositionRound) *Rent591HomeDetailCreate {
	return rdc.SetRent591homeDetailPositionRoundsID(r.ID)
}

// Mutation returns the Rent591HomeDetailMutation object of the builder.
func (rdc *Rent591HomeDetailCreate) Mutation() *Rent591HomeDetailMutation {
	return rdc.mutation
}

// Save creates the Rent591HomeDetail in the database.
func (rdc *Rent591HomeDetailCreate) Save(ctx context.Context) (*Rent591HomeDetail, error) {
	rdc.defaults()
	return withHooks(ctx, rdc.sqlSave, rdc.mutation, rdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rdc *Rent591HomeDetailCreate) SaveX(ctx context.Context) *Rent591HomeDetail {
	v, err := rdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdc *Rent591HomeDetailCreate) Exec(ctx context.Context) error {
	_, err := rdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdc *Rent591HomeDetailCreate) ExecX(ctx context.Context) {
	if err := rdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdc *Rent591HomeDetailCreate) defaults() {
	if _, ok := rdc.mutation.CreatedAt(); !ok {
		v := rent591homedetail.DefaultCreatedAt()
		rdc.mutation.SetCreatedAt(v)
	}
	if _, ok := rdc.mutation.UpdatedAt(); !ok {
		v := rent591homedetail.DefaultUpdatedAt()
		rdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rdc *Rent591HomeDetailCreate) check() error {
	if _, ok := rdc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Rent591HomeDetail.title"`)}
	}
	if _, ok := rdc.mutation.Deposit(); !ok {
		return &ValidationError{Name: "deposit", err: errors.New(`ent: missing required field "Rent591HomeDetail.deposit"`)}
	}
	if _, ok := rdc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Rent591HomeDetail.kind"`)}
	}
	if _, ok := rdc.mutation.Relieved(); !ok {
		return &ValidationError{Name: "relieved", err: errors.New(`ent: missing required field "Rent591HomeDetail.relieved"`)}
	}
	if _, ok := rdc.mutation.RegionID(); !ok {
		return &ValidationError{Name: "region_id", err: errors.New(`ent: missing required field "Rent591HomeDetail.region_id"`)}
	}
	if _, ok := rdc.mutation.SectionID(); !ok {
		return &ValidationError{Name: "section_id", err: errors.New(`ent: missing required field "Rent591HomeDetail.section_id"`)}
	}
	if _, ok := rdc.mutation.DealTime(); !ok {
		return &ValidationError{Name: "deal_time", err: errors.New(`ent: missing required field "Rent591HomeDetail.deal_time"`)}
	}
	if _, ok := rdc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Rent591HomeDetail.price"`)}
	}
	if _, ok := rdc.mutation.PriceUnit(); !ok {
		return &ValidationError{Name: "price_unit", err: errors.New(`ent: missing required field "Rent591HomeDetail.price_unit"`)}
	}
	if _, ok := rdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Rent591HomeDetail.created_at"`)}
	}
	if _, ok := rdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Rent591HomeDetail.updated_at"`)}
	}
	return nil
}

func (rdc *Rent591HomeDetailCreate) sqlSave(ctx context.Context) (*Rent591HomeDetail, error) {
	if err := rdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rdc.mutation.id = &_node.ID
	rdc.mutation.done = true
	return _node, nil
}

func (rdc *Rent591HomeDetailCreate) createSpec() (*Rent591HomeDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &Rent591HomeDetail{config: rdc.config}
		_spec = sqlgraph.NewCreateSpec(rent591homedetail.Table, sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rdc.conflict
	if value, ok := rdc.mutation.Title(); ok {
		_spec.SetField(rent591homedetail.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := rdc.mutation.Deposit(); ok {
		_spec.SetField(rent591homedetail.FieldDeposit, field.TypeString, value)
		_node.Deposit = value
	}
	if value, ok := rdc.mutation.Kind(); ok {
		_spec.SetField(rent591homedetail.FieldKind, field.TypeInt, value)
		_node.Kind = value
	}
	if value, ok := rdc.mutation.Relieved(); ok {
		_spec.SetField(rent591homedetail.FieldRelieved, field.TypeInt, value)
		_node.Relieved = value
	}
	if value, ok := rdc.mutation.RegionID(); ok {
		_spec.SetField(rent591homedetail.FieldRegionID, field.TypeInt, value)
		_node.RegionID = value
	}
	if value, ok := rdc.mutation.SectionID(); ok {
		_spec.SetField(rent591homedetail.FieldSectionID, field.TypeInt, value)
		_node.SectionID = value
	}
	if value, ok := rdc.mutation.DealText(); ok {
		_spec.SetField(rent591homedetail.FieldDealText, field.TypeString, value)
		_node.DealText = value
	}
	if value, ok := rdc.mutation.DealTime(); ok {
		_spec.SetField(rent591homedetail.FieldDealTime, field.TypeInt, value)
		_node.DealTime = value
	}
	if value, ok := rdc.mutation.Price(); ok {
		_spec.SetField(rent591homedetail.FieldPrice, field.TypeInt, value)
		_node.Price = value
	}
	if value, ok := rdc.mutation.PriceUnit(); ok {
		_spec.SetField(rent591homedetail.FieldPriceUnit, field.TypeString, value)
		_node.PriceUnit = value
	}
	if value, ok := rdc.mutation.CreatedAt(); ok {
		_spec.SetField(rent591homedetail.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rdc.mutation.UpdatedAt(); ok {
		_spec.SetField(rent591homedetail.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rdc.mutation.Rent591homesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homedetail.Rent591homesTable,
			Columns: []string{rent591homedetail.Rent591homesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.rent591home_rent591home_details = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdc.mutation.Rent591homeDetailBreadcrumbsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailBreadcrumbsTable,
			Columns: rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbreadcrumb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdc.mutation.Rent591homeDetailShareinfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailShareinfosTable,
			Columns: rent591homedetail.Rent591homeDetailShareinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailshareinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdc.mutation.Rent591homeDetailBrowsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailBrowsesTable,
			Columns: rent591homedetail.Rent591homeDetailBrowsesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbrowse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdc.mutation.Rent591homeDetailTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailTagsTable,
			Columns: rent591homedetail.Rent591homeDetailTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdc.mutation.Rent591homeDetailNavdatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailNavdatasTable,
			Columns: rent591homedetail.Rent591homeDetailNavdatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailnavdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdc.mutation.Rent591homeDetailInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailInfosTable,
			Columns: rent591homedetail.Rent591homeDetailInfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdc.mutation.Rent591homeDetailPublishsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPublishsTable,
			Columns: rent591homedetail.Rent591homeDetailPublishsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpublish.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rdc.mutation.Rent591homeDetailPositionRoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPositionRoundsTable,
			Columns: []string{rent591homedetail.Rent591homeDetailPositionRoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionround.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rent591HomeDetail.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Rent591HomeDetailUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (rdc *Rent591HomeDetailCreate) OnConflict(opts ...sql.ConflictOption) *Rent591HomeDetailUpsertOne {
	rdc.conflict = opts
	return &Rent591HomeDetailUpsertOne{
		create: rdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rent591HomeDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdc *Rent591HomeDetailCreate) OnConflictColumns(columns ...string) *Rent591HomeDetailUpsertOne {
	rdc.conflict = append(rdc.conflict, sql.ConflictColumns(columns...))
	return &Rent591HomeDetailUpsertOne{
		create: rdc,
	}
}

type (
	// Rent591HomeDetailUpsertOne is the builder for "upsert"-ing
	//  one Rent591HomeDetail node.
	Rent591HomeDetailUpsertOne struct {
		create *Rent591HomeDetailCreate
	}

	// Rent591HomeDetailUpsert is the "OnConflict" setter.
	Rent591HomeDetailUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *Rent591HomeDetailUpsert) SetTitle(v string) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdateTitle() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldTitle)
	return u
}

// SetDeposit sets the "deposit" field.
func (u *Rent591HomeDetailUpsert) SetDeposit(v string) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldDeposit, v)
	return u
}

// UpdateDeposit sets the "deposit" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdateDeposit() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldDeposit)
	return u
}

// SetKind sets the "kind" field.
func (u *Rent591HomeDetailUpsert) SetKind(v int) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdateKind() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldKind)
	return u
}

// AddKind adds v to the "kind" field.
func (u *Rent591HomeDetailUpsert) AddKind(v int) *Rent591HomeDetailUpsert {
	u.Add(rent591homedetail.FieldKind, v)
	return u
}

// SetRelieved sets the "relieved" field.
func (u *Rent591HomeDetailUpsert) SetRelieved(v int) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldRelieved, v)
	return u
}

// UpdateRelieved sets the "relieved" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdateRelieved() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldRelieved)
	return u
}

// AddRelieved adds v to the "relieved" field.
func (u *Rent591HomeDetailUpsert) AddRelieved(v int) *Rent591HomeDetailUpsert {
	u.Add(rent591homedetail.FieldRelieved, v)
	return u
}

// SetRegionID sets the "region_id" field.
func (u *Rent591HomeDetailUpsert) SetRegionID(v int) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldRegionID, v)
	return u
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdateRegionID() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldRegionID)
	return u
}

// AddRegionID adds v to the "region_id" field.
func (u *Rent591HomeDetailUpsert) AddRegionID(v int) *Rent591HomeDetailUpsert {
	u.Add(rent591homedetail.FieldRegionID, v)
	return u
}

// SetSectionID sets the "section_id" field.
func (u *Rent591HomeDetailUpsert) SetSectionID(v int) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldSectionID, v)
	return u
}

// UpdateSectionID sets the "section_id" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdateSectionID() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldSectionID)
	return u
}

// AddSectionID adds v to the "section_id" field.
func (u *Rent591HomeDetailUpsert) AddSectionID(v int) *Rent591HomeDetailUpsert {
	u.Add(rent591homedetail.FieldSectionID, v)
	return u
}

// SetDealText sets the "deal_text" field.
func (u *Rent591HomeDetailUpsert) SetDealText(v string) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldDealText, v)
	return u
}

// UpdateDealText sets the "deal_text" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdateDealText() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldDealText)
	return u
}

// ClearDealText clears the value of the "deal_text" field.
func (u *Rent591HomeDetailUpsert) ClearDealText() *Rent591HomeDetailUpsert {
	u.SetNull(rent591homedetail.FieldDealText)
	return u
}

// SetDealTime sets the "deal_time" field.
func (u *Rent591HomeDetailUpsert) SetDealTime(v int) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldDealTime, v)
	return u
}

// UpdateDealTime sets the "deal_time" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdateDealTime() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldDealTime)
	return u
}

// AddDealTime adds v to the "deal_time" field.
func (u *Rent591HomeDetailUpsert) AddDealTime(v int) *Rent591HomeDetailUpsert {
	u.Add(rent591homedetail.FieldDealTime, v)
	return u
}

// SetPrice sets the "price" field.
func (u *Rent591HomeDetailUpsert) SetPrice(v int) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdatePrice() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *Rent591HomeDetailUpsert) AddPrice(v int) *Rent591HomeDetailUpsert {
	u.Add(rent591homedetail.FieldPrice, v)
	return u
}

// SetPriceUnit sets the "price_unit" field.
func (u *Rent591HomeDetailUpsert) SetPriceUnit(v string) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldPriceUnit, v)
	return u
}

// UpdatePriceUnit sets the "price_unit" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdatePriceUnit() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldPriceUnit)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *Rent591HomeDetailUpsert) SetCreatedAt(v time.Time) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdateCreatedAt() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *Rent591HomeDetailUpsert) SetUpdatedAt(v time.Time) *Rent591HomeDetailUpsert {
	u.Set(rent591homedetail.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsert) UpdateUpdatedAt() *Rent591HomeDetailUpsert {
	u.SetExcluded(rent591homedetail.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Rent591HomeDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Rent591HomeDetailUpsertOne) UpdateNewValues() *Rent591HomeDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rent591HomeDetail.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Rent591HomeDetailUpsertOne) Ignore() *Rent591HomeDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Rent591HomeDetailUpsertOne) DoNothing() *Rent591HomeDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Rent591HomeDetailCreate.OnConflict
// documentation for more info.
func (u *Rent591HomeDetailUpsertOne) Update(set func(*Rent591HomeDetailUpsert)) *Rent591HomeDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Rent591HomeDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *Rent591HomeDetailUpsertOne) SetTitle(v string) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdateTitle() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateTitle()
	})
}

// SetDeposit sets the "deposit" field.
func (u *Rent591HomeDetailUpsertOne) SetDeposit(v string) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetDeposit(v)
	})
}

// UpdateDeposit sets the "deposit" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdateDeposit() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateDeposit()
	})
}

// SetKind sets the "kind" field.
func (u *Rent591HomeDetailUpsertOne) SetKind(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetKind(v)
	})
}

// AddKind adds v to the "kind" field.
func (u *Rent591HomeDetailUpsertOne) AddKind(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdateKind() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateKind()
	})
}

// SetRelieved sets the "relieved" field.
func (u *Rent591HomeDetailUpsertOne) SetRelieved(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetRelieved(v)
	})
}

// AddRelieved adds v to the "relieved" field.
func (u *Rent591HomeDetailUpsertOne) AddRelieved(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddRelieved(v)
	})
}

// UpdateRelieved sets the "relieved" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdateRelieved() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateRelieved()
	})
}

// SetRegionID sets the "region_id" field.
func (u *Rent591HomeDetailUpsertOne) SetRegionID(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetRegionID(v)
	})
}

// AddRegionID adds v to the "region_id" field.
func (u *Rent591HomeDetailUpsertOne) AddRegionID(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddRegionID(v)
	})
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdateRegionID() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateRegionID()
	})
}

// SetSectionID sets the "section_id" field.
func (u *Rent591HomeDetailUpsertOne) SetSectionID(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetSectionID(v)
	})
}

// AddSectionID adds v to the "section_id" field.
func (u *Rent591HomeDetailUpsertOne) AddSectionID(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddSectionID(v)
	})
}

// UpdateSectionID sets the "section_id" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdateSectionID() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateSectionID()
	})
}

// SetDealText sets the "deal_text" field.
func (u *Rent591HomeDetailUpsertOne) SetDealText(v string) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetDealText(v)
	})
}

// UpdateDealText sets the "deal_text" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdateDealText() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateDealText()
	})
}

// ClearDealText clears the value of the "deal_text" field.
func (u *Rent591HomeDetailUpsertOne) ClearDealText() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.ClearDealText()
	})
}

// SetDealTime sets the "deal_time" field.
func (u *Rent591HomeDetailUpsertOne) SetDealTime(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetDealTime(v)
	})
}

// AddDealTime adds v to the "deal_time" field.
func (u *Rent591HomeDetailUpsertOne) AddDealTime(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddDealTime(v)
	})
}

// UpdateDealTime sets the "deal_time" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdateDealTime() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateDealTime()
	})
}

// SetPrice sets the "price" field.
func (u *Rent591HomeDetailUpsertOne) SetPrice(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *Rent591HomeDetailUpsertOne) AddPrice(v int) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdatePrice() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdatePrice()
	})
}

// SetPriceUnit sets the "price_unit" field.
func (u *Rent591HomeDetailUpsertOne) SetPriceUnit(v string) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetPriceUnit(v)
	})
}

// UpdatePriceUnit sets the "price_unit" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdatePriceUnit() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdatePriceUnit()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *Rent591HomeDetailUpsertOne) SetCreatedAt(v time.Time) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdateCreatedAt() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *Rent591HomeDetailUpsertOne) SetUpdatedAt(v time.Time) *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertOne) UpdateUpdatedAt() *Rent591HomeDetailUpsertOne {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *Rent591HomeDetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Rent591HomeDetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Rent591HomeDetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Rent591HomeDetailUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Rent591HomeDetailUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Rent591HomeDetailCreateBulk is the builder for creating many Rent591HomeDetail entities in bulk.
type Rent591HomeDetailCreateBulk struct {
	config
	builders []*Rent591HomeDetailCreate
	conflict []sql.ConflictOption
}

// Save creates the Rent591HomeDetail entities in the database.
func (rdcb *Rent591HomeDetailCreateBulk) Save(ctx context.Context) ([]*Rent591HomeDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rdcb.builders))
	nodes := make([]*Rent591HomeDetail, len(rdcb.builders))
	mutators := make([]Mutator, len(rdcb.builders))
	for i := range rdcb.builders {
		func(i int, root context.Context) {
			builder := rdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*Rent591HomeDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rdcb *Rent591HomeDetailCreateBulk) SaveX(ctx context.Context) []*Rent591HomeDetail {
	v, err := rdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdcb *Rent591HomeDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := rdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdcb *Rent591HomeDetailCreateBulk) ExecX(ctx context.Context) {
	if err := rdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rent591HomeDetail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Rent591HomeDetailUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (rdcb *Rent591HomeDetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *Rent591HomeDetailUpsertBulk {
	rdcb.conflict = opts
	return &Rent591HomeDetailUpsertBulk{
		create: rdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rent591HomeDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdcb *Rent591HomeDetailCreateBulk) OnConflictColumns(columns ...string) *Rent591HomeDetailUpsertBulk {
	rdcb.conflict = append(rdcb.conflict, sql.ConflictColumns(columns...))
	return &Rent591HomeDetailUpsertBulk{
		create: rdcb,
	}
}

// Rent591HomeDetailUpsertBulk is the builder for "upsert"-ing
// a bulk of Rent591HomeDetail nodes.
type Rent591HomeDetailUpsertBulk struct {
	create *Rent591HomeDetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Rent591HomeDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Rent591HomeDetailUpsertBulk) UpdateNewValues() *Rent591HomeDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rent591HomeDetail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Rent591HomeDetailUpsertBulk) Ignore() *Rent591HomeDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Rent591HomeDetailUpsertBulk) DoNothing() *Rent591HomeDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Rent591HomeDetailCreateBulk.OnConflict
// documentation for more info.
func (u *Rent591HomeDetailUpsertBulk) Update(set func(*Rent591HomeDetailUpsert)) *Rent591HomeDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Rent591HomeDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *Rent591HomeDetailUpsertBulk) SetTitle(v string) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdateTitle() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateTitle()
	})
}

// SetDeposit sets the "deposit" field.
func (u *Rent591HomeDetailUpsertBulk) SetDeposit(v string) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetDeposit(v)
	})
}

// UpdateDeposit sets the "deposit" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdateDeposit() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateDeposit()
	})
}

// SetKind sets the "kind" field.
func (u *Rent591HomeDetailUpsertBulk) SetKind(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetKind(v)
	})
}

// AddKind adds v to the "kind" field.
func (u *Rent591HomeDetailUpsertBulk) AddKind(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdateKind() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateKind()
	})
}

// SetRelieved sets the "relieved" field.
func (u *Rent591HomeDetailUpsertBulk) SetRelieved(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetRelieved(v)
	})
}

// AddRelieved adds v to the "relieved" field.
func (u *Rent591HomeDetailUpsertBulk) AddRelieved(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddRelieved(v)
	})
}

// UpdateRelieved sets the "relieved" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdateRelieved() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateRelieved()
	})
}

// SetRegionID sets the "region_id" field.
func (u *Rent591HomeDetailUpsertBulk) SetRegionID(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetRegionID(v)
	})
}

// AddRegionID adds v to the "region_id" field.
func (u *Rent591HomeDetailUpsertBulk) AddRegionID(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddRegionID(v)
	})
}

// UpdateRegionID sets the "region_id" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdateRegionID() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateRegionID()
	})
}

// SetSectionID sets the "section_id" field.
func (u *Rent591HomeDetailUpsertBulk) SetSectionID(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetSectionID(v)
	})
}

// AddSectionID adds v to the "section_id" field.
func (u *Rent591HomeDetailUpsertBulk) AddSectionID(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddSectionID(v)
	})
}

// UpdateSectionID sets the "section_id" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdateSectionID() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateSectionID()
	})
}

// SetDealText sets the "deal_text" field.
func (u *Rent591HomeDetailUpsertBulk) SetDealText(v string) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetDealText(v)
	})
}

// UpdateDealText sets the "deal_text" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdateDealText() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateDealText()
	})
}

// ClearDealText clears the value of the "deal_text" field.
func (u *Rent591HomeDetailUpsertBulk) ClearDealText() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.ClearDealText()
	})
}

// SetDealTime sets the "deal_time" field.
func (u *Rent591HomeDetailUpsertBulk) SetDealTime(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetDealTime(v)
	})
}

// AddDealTime adds v to the "deal_time" field.
func (u *Rent591HomeDetailUpsertBulk) AddDealTime(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddDealTime(v)
	})
}

// UpdateDealTime sets the "deal_time" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdateDealTime() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateDealTime()
	})
}

// SetPrice sets the "price" field.
func (u *Rent591HomeDetailUpsertBulk) SetPrice(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *Rent591HomeDetailUpsertBulk) AddPrice(v int) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdatePrice() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdatePrice()
	})
}

// SetPriceUnit sets the "price_unit" field.
func (u *Rent591HomeDetailUpsertBulk) SetPriceUnit(v string) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetPriceUnit(v)
	})
}

// UpdatePriceUnit sets the "price_unit" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdatePriceUnit() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdatePriceUnit()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *Rent591HomeDetailUpsertBulk) SetCreatedAt(v time.Time) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdateCreatedAt() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *Rent591HomeDetailUpsertBulk) SetUpdatedAt(v time.Time) *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *Rent591HomeDetailUpsertBulk) UpdateUpdatedAt() *Rent591HomeDetailUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *Rent591HomeDetailUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the Rent591HomeDetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Rent591HomeDetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Rent591HomeDetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

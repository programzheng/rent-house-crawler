// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/programzheng/rent-house-crawler/ent/rent591home"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionround"
)

// Rent591HomeDetail is the model entity for the Rent591HomeDetail schema.
type Rent591HomeDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Deposit holds the value of the "deposit" field.
	Deposit string `json:"deposit,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind int `json:"kind,omitempty"`
	// Relieved holds the value of the "relieved" field.
	Relieved int `json:"relieved,omitempty"`
	// RegionID holds the value of the "region_id" field.
	RegionID int `json:"region_id,omitempty"`
	// SectionID holds the value of the "section_id" field.
	SectionID int `json:"section_id,omitempty"`
	// DealText holds the value of the "deal_text" field.
	DealText string `json:"deal_text,omitempty"`
	// DealTime holds the value of the "deal_time" field.
	DealTime int `json:"deal_time,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// PriceUnit holds the value of the "price_unit" field.
	PriceUnit string `json:"price_unit,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Rent591HomeDetailQuery when eager-loading is set.
	Edges                           Rent591HomeDetailEdges `json:"edges"`
	rent591home_rent591home_details *int
	selectValues                    sql.SelectValues
}

// Rent591HomeDetailEdges holds the relations/edges for other nodes in the graph.
type Rent591HomeDetailEdges struct {
	// Rent591homes holds the value of the rent591homes edge.
	Rent591homes *Rent591Home `json:"rent591homes,omitempty"`
	// Rent591homeDetailBreadcrumbs holds the value of the rent591home_detail_breadcrumbs edge.
	Rent591homeDetailBreadcrumbs []*Rent591HomeDetailBreadcrumb `json:"rent591home_detail_breadcrumbs,omitempty"`
	// Rent591homeDetailShareinfos holds the value of the rent591home_detail_shareinfos edge.
	Rent591homeDetailShareinfos []*Rent591HomeDetailShareInfo `json:"rent591home_detail_shareinfos,omitempty"`
	// Rent591homeDetailBrowses holds the value of the rent591home_detail_browses edge.
	Rent591homeDetailBrowses []*Rent591HomeDetailBrowse `json:"rent591home_detail_browses,omitempty"`
	// Rent591homeDetailTags holds the value of the rent591home_detail_tags edge.
	Rent591homeDetailTags []*Rent591HomeDetailTag `json:"rent591home_detail_tags,omitempty"`
	// Rent591homeDetailNavdatas holds the value of the rent591home_detail_navdatas edge.
	Rent591homeDetailNavdatas []*Rent591HomeDetailNavData `json:"rent591home_detail_navdatas,omitempty"`
	// Rent591homeDetailInfos holds the value of the rent591home_detail_infos edge.
	Rent591homeDetailInfos []*Rent591HomeDetailInfo `json:"rent591home_detail_infos,omitempty"`
	// Rent591homeDetailPublishs holds the value of the rent591home_detail_publishs edge.
	Rent591homeDetailPublishs []*Rent591HomeDetailPublish `json:"rent591home_detail_publishs,omitempty"`
	// Rent591homeDetailPositionRounds holds the value of the rent591home_detail_position_rounds edge.
	Rent591homeDetailPositionRounds *Rent591HomeDetailPositionRound `json:"rent591home_detail_position_rounds,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// Rent591homesOrErr returns the Rent591homes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Rent591HomeDetailEdges) Rent591homesOrErr() (*Rent591Home, error) {
	if e.loadedTypes[0] {
		if e.Rent591homes == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rent591home.Label}
		}
		return e.Rent591homes, nil
	}
	return nil, &NotLoadedError{edge: "rent591homes"}
}

// Rent591homeDetailBreadcrumbsOrErr returns the Rent591homeDetailBreadcrumbs value or an error if the edge
// was not loaded in eager-loading.
func (e Rent591HomeDetailEdges) Rent591homeDetailBreadcrumbsOrErr() ([]*Rent591HomeDetailBreadcrumb, error) {
	if e.loadedTypes[1] {
		return e.Rent591homeDetailBreadcrumbs, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_detail_breadcrumbs"}
}

// Rent591homeDetailShareinfosOrErr returns the Rent591homeDetailShareinfos value or an error if the edge
// was not loaded in eager-loading.
func (e Rent591HomeDetailEdges) Rent591homeDetailShareinfosOrErr() ([]*Rent591HomeDetailShareInfo, error) {
	if e.loadedTypes[2] {
		return e.Rent591homeDetailShareinfos, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_detail_shareinfos"}
}

// Rent591homeDetailBrowsesOrErr returns the Rent591homeDetailBrowses value or an error if the edge
// was not loaded in eager-loading.
func (e Rent591HomeDetailEdges) Rent591homeDetailBrowsesOrErr() ([]*Rent591HomeDetailBrowse, error) {
	if e.loadedTypes[3] {
		return e.Rent591homeDetailBrowses, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_detail_browses"}
}

// Rent591homeDetailTagsOrErr returns the Rent591homeDetailTags value or an error if the edge
// was not loaded in eager-loading.
func (e Rent591HomeDetailEdges) Rent591homeDetailTagsOrErr() ([]*Rent591HomeDetailTag, error) {
	if e.loadedTypes[4] {
		return e.Rent591homeDetailTags, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_detail_tags"}
}

// Rent591homeDetailNavdatasOrErr returns the Rent591homeDetailNavdatas value or an error if the edge
// was not loaded in eager-loading.
func (e Rent591HomeDetailEdges) Rent591homeDetailNavdatasOrErr() ([]*Rent591HomeDetailNavData, error) {
	if e.loadedTypes[5] {
		return e.Rent591homeDetailNavdatas, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_detail_navdatas"}
}

// Rent591homeDetailInfosOrErr returns the Rent591homeDetailInfos value or an error if the edge
// was not loaded in eager-loading.
func (e Rent591HomeDetailEdges) Rent591homeDetailInfosOrErr() ([]*Rent591HomeDetailInfo, error) {
	if e.loadedTypes[6] {
		return e.Rent591homeDetailInfos, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_detail_infos"}
}

// Rent591homeDetailPublishsOrErr returns the Rent591homeDetailPublishs value or an error if the edge
// was not loaded in eager-loading.
func (e Rent591HomeDetailEdges) Rent591homeDetailPublishsOrErr() ([]*Rent591HomeDetailPublish, error) {
	if e.loadedTypes[7] {
		return e.Rent591homeDetailPublishs, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_detail_publishs"}
}

// Rent591homeDetailPositionRoundsOrErr returns the Rent591homeDetailPositionRounds value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Rent591HomeDetailEdges) Rent591homeDetailPositionRoundsOrErr() (*Rent591HomeDetailPositionRound, error) {
	if e.loadedTypes[8] {
		if e.Rent591homeDetailPositionRounds == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rent591homedetailpositionround.Label}
		}
		return e.Rent591homeDetailPositionRounds, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_detail_position_rounds"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rent591HomeDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rent591homedetail.FieldID, rent591homedetail.FieldKind, rent591homedetail.FieldRelieved, rent591homedetail.FieldRegionID, rent591homedetail.FieldSectionID, rent591homedetail.FieldDealTime, rent591homedetail.FieldPrice:
			values[i] = new(sql.NullInt64)
		case rent591homedetail.FieldTitle, rent591homedetail.FieldDeposit, rent591homedetail.FieldDealText, rent591homedetail.FieldPriceUnit:
			values[i] = new(sql.NullString)
		case rent591homedetail.FieldCreatedAt, rent591homedetail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case rent591homedetail.ForeignKeys[0]: // rent591home_rent591home_details
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rent591HomeDetail fields.
func (rd *Rent591HomeDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rent591homedetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rd.ID = int(value.Int64)
		case rent591homedetail.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				rd.Title = value.String
			}
		case rent591homedetail.FieldDeposit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deposit", values[i])
			} else if value.Valid {
				rd.Deposit = value.String
			}
		case rent591homedetail.FieldKind:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				rd.Kind = int(value.Int64)
			}
		case rent591homedetail.FieldRelieved:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field relieved", values[i])
			} else if value.Valid {
				rd.Relieved = int(value.Int64)
			}
		case rent591homedetail.FieldRegionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field region_id", values[i])
			} else if value.Valid {
				rd.RegionID = int(value.Int64)
			}
		case rent591homedetail.FieldSectionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field section_id", values[i])
			} else if value.Valid {
				rd.SectionID = int(value.Int64)
			}
		case rent591homedetail.FieldDealText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deal_text", values[i])
			} else if value.Valid {
				rd.DealText = value.String
			}
		case rent591homedetail.FieldDealTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deal_time", values[i])
			} else if value.Valid {
				rd.DealTime = int(value.Int64)
			}
		case rent591homedetail.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				rd.Price = int(value.Int64)
			}
		case rent591homedetail.FieldPriceUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_unit", values[i])
			} else if value.Valid {
				rd.PriceUnit = value.String
			}
		case rent591homedetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rd.CreatedAt = value.Time
			}
		case rent591homedetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rd.UpdatedAt = value.Time
			}
		case rent591homedetail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field rent591home_rent591home_details", value)
			} else if value.Valid {
				rd.rent591home_rent591home_details = new(int)
				*rd.rent591home_rent591home_details = int(value.Int64)
			}
		default:
			rd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rent591HomeDetail.
// This includes values selected through modifiers, order, etc.
func (rd *Rent591HomeDetail) Value(name string) (ent.Value, error) {
	return rd.selectValues.Get(name)
}

// QueryRent591homes queries the "rent591homes" edge of the Rent591HomeDetail entity.
func (rd *Rent591HomeDetail) QueryRent591homes() *Rent591HomeQuery {
	return NewRent591HomeDetailClient(rd.config).QueryRent591homes(rd)
}

// QueryRent591homeDetailBreadcrumbs queries the "rent591home_detail_breadcrumbs" edge of the Rent591HomeDetail entity.
func (rd *Rent591HomeDetail) QueryRent591homeDetailBreadcrumbs() *Rent591HomeDetailBreadcrumbQuery {
	return NewRent591HomeDetailClient(rd.config).QueryRent591homeDetailBreadcrumbs(rd)
}

// QueryRent591homeDetailShareinfos queries the "rent591home_detail_shareinfos" edge of the Rent591HomeDetail entity.
func (rd *Rent591HomeDetail) QueryRent591homeDetailShareinfos() *Rent591HomeDetailShareInfoQuery {
	return NewRent591HomeDetailClient(rd.config).QueryRent591homeDetailShareinfos(rd)
}

// QueryRent591homeDetailBrowses queries the "rent591home_detail_browses" edge of the Rent591HomeDetail entity.
func (rd *Rent591HomeDetail) QueryRent591homeDetailBrowses() *Rent591HomeDetailBrowseQuery {
	return NewRent591HomeDetailClient(rd.config).QueryRent591homeDetailBrowses(rd)
}

// QueryRent591homeDetailTags queries the "rent591home_detail_tags" edge of the Rent591HomeDetail entity.
func (rd *Rent591HomeDetail) QueryRent591homeDetailTags() *Rent591HomeDetailTagQuery {
	return NewRent591HomeDetailClient(rd.config).QueryRent591homeDetailTags(rd)
}

// QueryRent591homeDetailNavdatas queries the "rent591home_detail_navdatas" edge of the Rent591HomeDetail entity.
func (rd *Rent591HomeDetail) QueryRent591homeDetailNavdatas() *Rent591HomeDetailNavDataQuery {
	return NewRent591HomeDetailClient(rd.config).QueryRent591homeDetailNavdatas(rd)
}

// QueryRent591homeDetailInfos queries the "rent591home_detail_infos" edge of the Rent591HomeDetail entity.
func (rd *Rent591HomeDetail) QueryRent591homeDetailInfos() *Rent591HomeDetailInfoQuery {
	return NewRent591HomeDetailClient(rd.config).QueryRent591homeDetailInfos(rd)
}

// QueryRent591homeDetailPublishs queries the "rent591home_detail_publishs" edge of the Rent591HomeDetail entity.
func (rd *Rent591HomeDetail) QueryRent591homeDetailPublishs() *Rent591HomeDetailPublishQuery {
	return NewRent591HomeDetailClient(rd.config).QueryRent591homeDetailPublishs(rd)
}

// QueryRent591homeDetailPositionRounds queries the "rent591home_detail_position_rounds" edge of the Rent591HomeDetail entity.
func (rd *Rent591HomeDetail) QueryRent591homeDetailPositionRounds() *Rent591HomeDetailPositionRoundQuery {
	return NewRent591HomeDetailClient(rd.config).QueryRent591homeDetailPositionRounds(rd)
}

// Update returns a builder for updating this Rent591HomeDetail.
// Note that you need to call Rent591HomeDetail.Unwrap() before calling this method if this Rent591HomeDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (rd *Rent591HomeDetail) Update() *Rent591HomeDetailUpdateOne {
	return NewRent591HomeDetailClient(rd.config).UpdateOne(rd)
}

// Unwrap unwraps the Rent591HomeDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rd *Rent591HomeDetail) Unwrap() *Rent591HomeDetail {
	_tx, ok := rd.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rent591HomeDetail is not a transactional entity")
	}
	rd.config.driver = _tx.drv
	return rd
}

// String implements the fmt.Stringer.
func (rd *Rent591HomeDetail) String() string {
	var builder strings.Builder
	builder.WriteString("Rent591HomeDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rd.ID))
	builder.WriteString("title=")
	builder.WriteString(rd.Title)
	builder.WriteString(", ")
	builder.WriteString("deposit=")
	builder.WriteString(rd.Deposit)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", rd.Kind))
	builder.WriteString(", ")
	builder.WriteString("relieved=")
	builder.WriteString(fmt.Sprintf("%v", rd.Relieved))
	builder.WriteString(", ")
	builder.WriteString("region_id=")
	builder.WriteString(fmt.Sprintf("%v", rd.RegionID))
	builder.WriteString(", ")
	builder.WriteString("section_id=")
	builder.WriteString(fmt.Sprintf("%v", rd.SectionID))
	builder.WriteString(", ")
	builder.WriteString("deal_text=")
	builder.WriteString(rd.DealText)
	builder.WriteString(", ")
	builder.WriteString("deal_time=")
	builder.WriteString(fmt.Sprintf("%v", rd.DealTime))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", rd.Price))
	builder.WriteString(", ")
	builder.WriteString("price_unit=")
	builder.WriteString(rd.PriceUnit)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rd.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rent591HomeDetails is a parsable slice of Rent591HomeDetail.
type Rent591HomeDetails []*Rent591HomeDetail

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/programzheng/rent-house-crawler/ent/rent591home"
	"github.com/programzheng/rent-house-crawler/ent/rent591homesurrounding"
)

// Rent591HomeSurrounding is the model entity for the Rent591HomeSurrounding schema.
type Rent591HomeSurrounding struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Distance holds the value of the "distance" field.
	Distance string `json:"distance,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Rent591HomeSurroundingQuery when eager-loading is set.
	Edges                                Rent591HomeSurroundingEdges `json:"edges"`
	rent591home_rent591home_surroundings *int
	selectValues                         sql.SelectValues
}

// Rent591HomeSurroundingEdges holds the relations/edges for other nodes in the graph.
type Rent591HomeSurroundingEdges struct {
	// Rent591homes holds the value of the rent591homes edge.
	Rent591homes *Rent591Home `json:"rent591homes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// Rent591homesOrErr returns the Rent591homes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Rent591HomeSurroundingEdges) Rent591homesOrErr() (*Rent591Home, error) {
	if e.loadedTypes[0] {
		if e.Rent591homes == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rent591home.Label}
		}
		return e.Rent591homes, nil
	}
	return nil, &NotLoadedError{edge: "rent591homes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rent591HomeSurrounding) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rent591homesurrounding.FieldID:
			values[i] = new(sql.NullInt64)
		case rent591homesurrounding.FieldType, rent591homesurrounding.FieldDesc, rent591homesurrounding.FieldDistance:
			values[i] = new(sql.NullString)
		case rent591homesurrounding.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case rent591homesurrounding.ForeignKeys[0]: // rent591home_rent591home_surroundings
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rent591HomeSurrounding fields.
func (rs *Rent591HomeSurrounding) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rent591homesurrounding.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rs.ID = int(value.Int64)
		case rent591homesurrounding.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				rs.Type = value.String
			}
		case rent591homesurrounding.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				rs.Desc = value.String
			}
		case rent591homesurrounding.FieldDistance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field distance", values[i])
			} else if value.Valid {
				rs.Distance = value.String
			}
		case rent591homesurrounding.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rs.CreatedAt = value.Time
			}
		case rent591homesurrounding.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field rent591home_rent591home_surroundings", value)
			} else if value.Valid {
				rs.rent591home_rent591home_surroundings = new(int)
				*rs.rent591home_rent591home_surroundings = int(value.Int64)
			}
		default:
			rs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rent591HomeSurrounding.
// This includes values selected through modifiers, order, etc.
func (rs *Rent591HomeSurrounding) Value(name string) (ent.Value, error) {
	return rs.selectValues.Get(name)
}

// QueryRent591homes queries the "rent591homes" edge of the Rent591HomeSurrounding entity.
func (rs *Rent591HomeSurrounding) QueryRent591homes() *Rent591HomeQuery {
	return NewRent591HomeSurroundingClient(rs.config).QueryRent591homes(rs)
}

// Update returns a builder for updating this Rent591HomeSurrounding.
// Note that you need to call Rent591HomeSurrounding.Unwrap() before calling this method if this Rent591HomeSurrounding
// was returned from a transaction, and the transaction was committed or rolled back.
func (rs *Rent591HomeSurrounding) Update() *Rent591HomeSurroundingUpdateOne {
	return NewRent591HomeSurroundingClient(rs.config).UpdateOne(rs)
}

// Unwrap unwraps the Rent591HomeSurrounding entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rs *Rent591HomeSurrounding) Unwrap() *Rent591HomeSurrounding {
	_tx, ok := rs.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rent591HomeSurrounding is not a transactional entity")
	}
	rs.config.driver = _tx.drv
	return rs
}

// String implements the fmt.Stringer.
func (rs *Rent591HomeSurrounding) String() string {
	var builder strings.Builder
	builder.WriteString("Rent591HomeSurrounding(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rs.ID))
	builder.WriteString("type=")
	builder.WriteString(rs.Type)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(rs.Desc)
	builder.WriteString(", ")
	builder.WriteString("distance=")
	builder.WriteString(rs.Distance)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rs.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rent591HomeSurroundings is a parsable slice of Rent591HomeSurrounding.
type Rent591HomeSurroundings []*Rent591HomeSurrounding

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailinfo"
)

// Rent591HomeDetailInfoCreate is the builder for creating a Rent591HomeDetailInfo entity.
type Rent591HomeDetailInfoCreate struct {
	config
	mutation *Rent591HomeDetailInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (rdic *Rent591HomeDetailInfoCreate) SetName(s string) *Rent591HomeDetailInfoCreate {
	rdic.mutation.SetName(s)
	return rdic
}

// SetValue sets the "value" field.
func (rdic *Rent591HomeDetailInfoCreate) SetValue(s string) *Rent591HomeDetailInfoCreate {
	rdic.mutation.SetValue(s)
	return rdic
}

// SetKey sets the "key" field.
func (rdic *Rent591HomeDetailInfoCreate) SetKey(i int) *Rent591HomeDetailInfoCreate {
	rdic.mutation.SetKey(i)
	return rdic
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (rdic *Rent591HomeDetailInfoCreate) AddRent591homeDetailIDs(ids ...int) *Rent591HomeDetailInfoCreate {
	rdic.mutation.AddRent591homeDetailIDs(ids...)
	return rdic
}

// AddRent591homeDetails adds the "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdic *Rent591HomeDetailInfoCreate) AddRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailInfoCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdic.AddRent591homeDetailIDs(ids...)
}

// Mutation returns the Rent591HomeDetailInfoMutation object of the builder.
func (rdic *Rent591HomeDetailInfoCreate) Mutation() *Rent591HomeDetailInfoMutation {
	return rdic.mutation
}

// Save creates the Rent591HomeDetailInfo in the database.
func (rdic *Rent591HomeDetailInfoCreate) Save(ctx context.Context) (*Rent591HomeDetailInfo, error) {
	return withHooks(ctx, rdic.sqlSave, rdic.mutation, rdic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rdic *Rent591HomeDetailInfoCreate) SaveX(ctx context.Context) *Rent591HomeDetailInfo {
	v, err := rdic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdic *Rent591HomeDetailInfoCreate) Exec(ctx context.Context) error {
	_, err := rdic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdic *Rent591HomeDetailInfoCreate) ExecX(ctx context.Context) {
	if err := rdic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rdic *Rent591HomeDetailInfoCreate) check() error {
	if _, ok := rdic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Rent591HomeDetailInfo.name"`)}
	}
	if _, ok := rdic.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Rent591HomeDetailInfo.value"`)}
	}
	if _, ok := rdic.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Rent591HomeDetailInfo.key"`)}
	}
	return nil
}

func (rdic *Rent591HomeDetailInfoCreate) sqlSave(ctx context.Context) (*Rent591HomeDetailInfo, error) {
	if err := rdic.check(); err != nil {
		return nil, err
	}
	_node, _spec := rdic.createSpec()
	if err := sqlgraph.CreateNode(ctx, rdic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rdic.mutation.id = &_node.ID
	rdic.mutation.done = true
	return _node, nil
}

func (rdic *Rent591HomeDetailInfoCreate) createSpec() (*Rent591HomeDetailInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &Rent591HomeDetailInfo{config: rdic.config}
		_spec = sqlgraph.NewCreateSpec(rent591homedetailinfo.Table, sqlgraph.NewFieldSpec(rent591homedetailinfo.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rdic.conflict
	if value, ok := rdic.mutation.Name(); ok {
		_spec.SetField(rent591homedetailinfo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rdic.mutation.Value(); ok {
		_spec.SetField(rent591homedetailinfo.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := rdic.mutation.Key(); ok {
		_spec.SetField(rent591homedetailinfo.FieldKey, field.TypeInt, value)
		_node.Key = value
	}
	if nodes := rdic.mutation.Rent591homeDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rent591HomeDetailInfo.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Rent591HomeDetailInfoUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rdic *Rent591HomeDetailInfoCreate) OnConflict(opts ...sql.ConflictOption) *Rent591HomeDetailInfoUpsertOne {
	rdic.conflict = opts
	return &Rent591HomeDetailInfoUpsertOne{
		create: rdic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rent591HomeDetailInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdic *Rent591HomeDetailInfoCreate) OnConflictColumns(columns ...string) *Rent591HomeDetailInfoUpsertOne {
	rdic.conflict = append(rdic.conflict, sql.ConflictColumns(columns...))
	return &Rent591HomeDetailInfoUpsertOne{
		create: rdic,
	}
}

type (
	// Rent591HomeDetailInfoUpsertOne is the builder for "upsert"-ing
	//  one Rent591HomeDetailInfo node.
	Rent591HomeDetailInfoUpsertOne struct {
		create *Rent591HomeDetailInfoCreate
	}

	// Rent591HomeDetailInfoUpsert is the "OnConflict" setter.
	Rent591HomeDetailInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *Rent591HomeDetailInfoUpsert) SetName(v string) *Rent591HomeDetailInfoUpsert {
	u.Set(rent591homedetailinfo.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *Rent591HomeDetailInfoUpsert) UpdateName() *Rent591HomeDetailInfoUpsert {
	u.SetExcluded(rent591homedetailinfo.FieldName)
	return u
}

// SetValue sets the "value" field.
func (u *Rent591HomeDetailInfoUpsert) SetValue(v string) *Rent591HomeDetailInfoUpsert {
	u.Set(rent591homedetailinfo.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *Rent591HomeDetailInfoUpsert) UpdateValue() *Rent591HomeDetailInfoUpsert {
	u.SetExcluded(rent591homedetailinfo.FieldValue)
	return u
}

// SetKey sets the "key" field.
func (u *Rent591HomeDetailInfoUpsert) SetKey(v int) *Rent591HomeDetailInfoUpsert {
	u.Set(rent591homedetailinfo.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *Rent591HomeDetailInfoUpsert) UpdateKey() *Rent591HomeDetailInfoUpsert {
	u.SetExcluded(rent591homedetailinfo.FieldKey)
	return u
}

// AddKey adds v to the "key" field.
func (u *Rent591HomeDetailInfoUpsert) AddKey(v int) *Rent591HomeDetailInfoUpsert {
	u.Add(rent591homedetailinfo.FieldKey, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Rent591HomeDetailInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Rent591HomeDetailInfoUpsertOne) UpdateNewValues() *Rent591HomeDetailInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rent591HomeDetailInfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Rent591HomeDetailInfoUpsertOne) Ignore() *Rent591HomeDetailInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Rent591HomeDetailInfoUpsertOne) DoNothing() *Rent591HomeDetailInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Rent591HomeDetailInfoCreate.OnConflict
// documentation for more info.
func (u *Rent591HomeDetailInfoUpsertOne) Update(set func(*Rent591HomeDetailInfoUpsert)) *Rent591HomeDetailInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Rent591HomeDetailInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *Rent591HomeDetailInfoUpsertOne) SetName(v string) *Rent591HomeDetailInfoUpsertOne {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *Rent591HomeDetailInfoUpsertOne) UpdateName() *Rent591HomeDetailInfoUpsertOne {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.UpdateName()
	})
}

// SetValue sets the "value" field.
func (u *Rent591HomeDetailInfoUpsertOne) SetValue(v string) *Rent591HomeDetailInfoUpsertOne {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *Rent591HomeDetailInfoUpsertOne) UpdateValue() *Rent591HomeDetailInfoUpsertOne {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.UpdateValue()
	})
}

// SetKey sets the "key" field.
func (u *Rent591HomeDetailInfoUpsertOne) SetKey(v int) *Rent591HomeDetailInfoUpsertOne {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.SetKey(v)
	})
}

// AddKey adds v to the "key" field.
func (u *Rent591HomeDetailInfoUpsertOne) AddKey(v int) *Rent591HomeDetailInfoUpsertOne {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.AddKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *Rent591HomeDetailInfoUpsertOne) UpdateKey() *Rent591HomeDetailInfoUpsertOne {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.UpdateKey()
	})
}

// Exec executes the query.
func (u *Rent591HomeDetailInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Rent591HomeDetailInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Rent591HomeDetailInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Rent591HomeDetailInfoUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Rent591HomeDetailInfoUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Rent591HomeDetailInfoCreateBulk is the builder for creating many Rent591HomeDetailInfo entities in bulk.
type Rent591HomeDetailInfoCreateBulk struct {
	config
	builders []*Rent591HomeDetailInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the Rent591HomeDetailInfo entities in the database.
func (rdicb *Rent591HomeDetailInfoCreateBulk) Save(ctx context.Context) ([]*Rent591HomeDetailInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rdicb.builders))
	nodes := make([]*Rent591HomeDetailInfo, len(rdicb.builders))
	mutators := make([]Mutator, len(rdicb.builders))
	for i := range rdicb.builders {
		func(i int, root context.Context) {
			builder := rdicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*Rent591HomeDetailInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rdicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rdicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rdicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rdicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rdicb *Rent591HomeDetailInfoCreateBulk) SaveX(ctx context.Context) []*Rent591HomeDetailInfo {
	v, err := rdicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdicb *Rent591HomeDetailInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := rdicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdicb *Rent591HomeDetailInfoCreateBulk) ExecX(ctx context.Context) {
	if err := rdicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rent591HomeDetailInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Rent591HomeDetailInfoUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (rdicb *Rent591HomeDetailInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *Rent591HomeDetailInfoUpsertBulk {
	rdicb.conflict = opts
	return &Rent591HomeDetailInfoUpsertBulk{
		create: rdicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rent591HomeDetailInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdicb *Rent591HomeDetailInfoCreateBulk) OnConflictColumns(columns ...string) *Rent591HomeDetailInfoUpsertBulk {
	rdicb.conflict = append(rdicb.conflict, sql.ConflictColumns(columns...))
	return &Rent591HomeDetailInfoUpsertBulk{
		create: rdicb,
	}
}

// Rent591HomeDetailInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of Rent591HomeDetailInfo nodes.
type Rent591HomeDetailInfoUpsertBulk struct {
	create *Rent591HomeDetailInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Rent591HomeDetailInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Rent591HomeDetailInfoUpsertBulk) UpdateNewValues() *Rent591HomeDetailInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rent591HomeDetailInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Rent591HomeDetailInfoUpsertBulk) Ignore() *Rent591HomeDetailInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Rent591HomeDetailInfoUpsertBulk) DoNothing() *Rent591HomeDetailInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Rent591HomeDetailInfoCreateBulk.OnConflict
// documentation for more info.
func (u *Rent591HomeDetailInfoUpsertBulk) Update(set func(*Rent591HomeDetailInfoUpsert)) *Rent591HomeDetailInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Rent591HomeDetailInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *Rent591HomeDetailInfoUpsertBulk) SetName(v string) *Rent591HomeDetailInfoUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *Rent591HomeDetailInfoUpsertBulk) UpdateName() *Rent591HomeDetailInfoUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.UpdateName()
	})
}

// SetValue sets the "value" field.
func (u *Rent591HomeDetailInfoUpsertBulk) SetValue(v string) *Rent591HomeDetailInfoUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *Rent591HomeDetailInfoUpsertBulk) UpdateValue() *Rent591HomeDetailInfoUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.UpdateValue()
	})
}

// SetKey sets the "key" field.
func (u *Rent591HomeDetailInfoUpsertBulk) SetKey(v int) *Rent591HomeDetailInfoUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.SetKey(v)
	})
}

// AddKey adds v to the "key" field.
func (u *Rent591HomeDetailInfoUpsertBulk) AddKey(v int) *Rent591HomeDetailInfoUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.AddKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *Rent591HomeDetailInfoUpsertBulk) UpdateKey() *Rent591HomeDetailInfoUpsertBulk {
	return u.Update(func(s *Rent591HomeDetailInfoUpsert) {
		s.UpdateKey()
	})
}

// Exec executes the query.
func (u *Rent591HomeDetailInfoUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the Rent591HomeDetailInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Rent591HomeDetailInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Rent591HomeDetailInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

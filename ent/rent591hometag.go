// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/programzheng/rent-house-crawler/ent/rent591hometag"
)

// Rent591HomeTag is the model entity for the Rent591HomeTag schema.
type Rent591HomeTag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Rent591HomeTagQuery when eager-loading is set.
	Edges        Rent591HomeTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Rent591HomeTagEdges holds the relations/edges for other nodes in the graph.
type Rent591HomeTagEdges struct {
	// Rent591homes holds the value of the rent591homes edge.
	Rent591homes []*Rent591Home `json:"rent591homes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// Rent591homesOrErr returns the Rent591homes value or an error if the edge
// was not loaded in eager-loading.
func (e Rent591HomeTagEdges) Rent591homesOrErr() ([]*Rent591Home, error) {
	if e.loadedTypes[0] {
		return e.Rent591homes, nil
	}
	return nil, &NotLoadedError{edge: "rent591homes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rent591HomeTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rent591hometag.FieldID:
			values[i] = new(sql.NullInt64)
		case rent591hometag.FieldName:
			values[i] = new(sql.NullString)
		case rent591hometag.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rent591HomeTag fields.
func (rt *Rent591HomeTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rent591hometag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rt.ID = int(value.Int64)
		case rent591hometag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rt.Name = value.String
			}
		case rent591hometag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rt.CreatedAt = value.Time
			}
		default:
			rt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rent591HomeTag.
// This includes values selected through modifiers, order, etc.
func (rt *Rent591HomeTag) Value(name string) (ent.Value, error) {
	return rt.selectValues.Get(name)
}

// QueryRent591homes queries the "rent591homes" edge of the Rent591HomeTag entity.
func (rt *Rent591HomeTag) QueryRent591homes() *Rent591HomeQuery {
	return NewRent591HomeTagClient(rt.config).QueryRent591homes(rt)
}

// Update returns a builder for updating this Rent591HomeTag.
// Note that you need to call Rent591HomeTag.Unwrap() before calling this method if this Rent591HomeTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *Rent591HomeTag) Update() *Rent591HomeTagUpdateOne {
	return NewRent591HomeTagClient(rt.config).UpdateOne(rt)
}

// Unwrap unwraps the Rent591HomeTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rt *Rent591HomeTag) Unwrap() *Rent591HomeTag {
	_tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rent591HomeTag is not a transactional entity")
	}
	rt.config.driver = _tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *Rent591HomeTag) String() string {
	var builder strings.Builder
	builder.WriteString("Rent591HomeTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rt.ID))
	builder.WriteString("name=")
	builder.WriteString(rt.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rent591HomeTags is a parsable slice of Rent591HomeTag.
type Rent591HomeTags []*Rent591HomeTag

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionround"
)

// Rent591HomeDetailPositionRoundDelete is the builder for deleting a Rent591HomeDetailPositionRound entity.
type Rent591HomeDetailPositionRoundDelete struct {
	config
	hooks    []Hook
	mutation *Rent591HomeDetailPositionRoundMutation
}

// Where appends a list predicates to the Rent591HomeDetailPositionRoundDelete builder.
func (rdprd *Rent591HomeDetailPositionRoundDelete) Where(ps ...predicate.Rent591HomeDetailPositionRound) *Rent591HomeDetailPositionRoundDelete {
	rdprd.mutation.Where(ps...)
	return rdprd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rdprd *Rent591HomeDetailPositionRoundDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rdprd.sqlExec, rdprd.mutation, rdprd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rdprd *Rent591HomeDetailPositionRoundDelete) ExecX(ctx context.Context) int {
	n, err := rdprd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rdprd *Rent591HomeDetailPositionRoundDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(rent591homedetailpositionround.Table, sqlgraph.NewFieldSpec(rent591homedetailpositionround.FieldID, field.TypeInt))
	if ps := rdprd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rdprd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rdprd.mutation.done = true
	return affected, err
}

// Rent591HomeDetailPositionRoundDeleteOne is the builder for deleting a single Rent591HomeDetailPositionRound entity.
type Rent591HomeDetailPositionRoundDeleteOne struct {
	rdprd *Rent591HomeDetailPositionRoundDelete
}

// Where appends a list predicates to the Rent591HomeDetailPositionRoundDelete builder.
func (rdprdo *Rent591HomeDetailPositionRoundDeleteOne) Where(ps ...predicate.Rent591HomeDetailPositionRound) *Rent591HomeDetailPositionRoundDeleteOne {
	rdprdo.rdprd.mutation.Where(ps...)
	return rdprdo
}

// Exec executes the deletion query.
func (rdprdo *Rent591HomeDetailPositionRoundDeleteOne) Exec(ctx context.Context) error {
	n, err := rdprdo.rdprd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rent591homedetailpositionround.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rdprdo *Rent591HomeDetailPositionRoundDeleteOne) ExecX(ctx context.Context) {
	if err := rdprdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionround"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionrounddata"
)

// Rent591HomeDetailPositionRoundUpdate is the builder for updating Rent591HomeDetailPositionRound entities.
type Rent591HomeDetailPositionRoundUpdate struct {
	config
	hooks    []Hook
	mutation *Rent591HomeDetailPositionRoundMutation
}

// Where appends a list predicates to the Rent591HomeDetailPositionRoundUpdate builder.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) Where(ps ...predicate.Rent591HomeDetailPositionRound) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.Where(ps...)
	return rdpru
}

// SetTitle sets the "title" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SetTitle(s string) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.SetTitle(s)
	return rdpru
}

// SetKey sets the "key" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SetKey(s string) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.SetKey(s)
	return rdpru
}

// SetActive sets the "active" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SetActive(i int) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.ResetActive()
	rdpru.mutation.SetActive(i)
	return rdpru
}

// AddActive adds i to the "active" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) AddActive(i int) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.AddActive(i)
	return rdpru
}

// SetCommunityName sets the "community_name" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SetCommunityName(s string) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.SetCommunityName(s)
	return rdpru
}

// SetCommunityID sets the "community_id" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SetCommunityID(i int) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.ResetCommunityID()
	rdpru.mutation.SetCommunityID(i)
	return rdpru
}

// AddCommunityID adds i to the "community_id" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) AddCommunityID(i int) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.AddCommunityID(i)
	return rdpru
}

// SetAddress sets the "address" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SetAddress(s string) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.SetAddress(s)
	return rdpru
}

// SetLat sets the "lat" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SetLat(f float64) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.ResetLat()
	rdpru.mutation.SetLat(f)
	return rdpru
}

// AddLat adds f to the "lat" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) AddLat(f float64) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.AddLat(f)
	return rdpru
}

// SetLng sets the "lng" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SetLng(f float64) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.ResetLng()
	rdpru.mutation.SetLng(f)
	return rdpru
}

// AddLng adds f to the "lng" field.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) AddLng(f float64) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.AddLng(f)
	return rdpru
}

// SetRent591homeDetailsID sets the "rent591home_details" edge to the Rent591HomeDetail entity by ID.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SetRent591homeDetailsID(id int) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.SetRent591homeDetailsID(id)
	return rdpru
}

// SetNillableRent591homeDetailsID sets the "rent591home_details" edge to the Rent591HomeDetail entity by ID if the given value is not nil.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SetNillableRent591homeDetailsID(id *int) *Rent591HomeDetailPositionRoundUpdate {
	if id != nil {
		rdpru = rdpru.SetRent591homeDetailsID(*id)
	}
	return rdpru
}

// SetRent591homeDetails sets the "rent591home_details" edge to the Rent591HomeDetail entity.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SetRent591homeDetails(r *Rent591HomeDetail) *Rent591HomeDetailPositionRoundUpdate {
	return rdpru.SetRent591homeDetailsID(r.ID)
}

// AddRent591homeDetailPositionRoundDataIDs adds the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity by IDs.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) AddRent591homeDetailPositionRoundDataIDs(ids ...int) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.AddRent591homeDetailPositionRoundDataIDs(ids...)
	return rdpru
}

// AddRent591homeDetailPositionRoundDatas adds the "rent591home_detail_position_round_datas" edges to the Rent591HomeDetailPositionRoundData entity.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) AddRent591homeDetailPositionRoundDatas(r ...*Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdpru.AddRent591homeDetailPositionRoundDataIDs(ids...)
}

// Mutation returns the Rent591HomeDetailPositionRoundMutation object of the builder.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) Mutation() *Rent591HomeDetailPositionRoundMutation {
	return rdpru.mutation
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) ClearRent591homeDetails() *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.ClearRent591homeDetails()
	return rdpru
}

// ClearRent591homeDetailPositionRoundDatas clears all "rent591home_detail_position_round_datas" edges to the Rent591HomeDetailPositionRoundData entity.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) ClearRent591homeDetailPositionRoundDatas() *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.ClearRent591homeDetailPositionRoundDatas()
	return rdpru
}

// RemoveRent591homeDetailPositionRoundDataIDs removes the "rent591home_detail_position_round_datas" edge to Rent591HomeDetailPositionRoundData entities by IDs.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) RemoveRent591homeDetailPositionRoundDataIDs(ids ...int) *Rent591HomeDetailPositionRoundUpdate {
	rdpru.mutation.RemoveRent591homeDetailPositionRoundDataIDs(ids...)
	return rdpru
}

// RemoveRent591homeDetailPositionRoundDatas removes "rent591home_detail_position_round_datas" edges to Rent591HomeDetailPositionRoundData entities.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) RemoveRent591homeDetailPositionRoundDatas(r ...*Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdpru.RemoveRent591homeDetailPositionRoundDataIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rdpru.sqlSave, rdpru.mutation, rdpru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) SaveX(ctx context.Context) int {
	affected, err := rdpru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) Exec(ctx context.Context) error {
	_, err := rdpru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdpru *Rent591HomeDetailPositionRoundUpdate) ExecX(ctx context.Context) {
	if err := rdpru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdpru *Rent591HomeDetailPositionRoundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetailpositionround.Table, rent591homedetailpositionround.Columns, sqlgraph.NewFieldSpec(rent591homedetailpositionround.FieldID, field.TypeInt))
	if ps := rdpru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdpru.mutation.Title(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldTitle, field.TypeString, value)
	}
	if value, ok := rdpru.mutation.Key(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldKey, field.TypeString, value)
	}
	if value, ok := rdpru.mutation.Active(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldActive, field.TypeInt, value)
	}
	if value, ok := rdpru.mutation.AddedActive(); ok {
		_spec.AddField(rent591homedetailpositionround.FieldActive, field.TypeInt, value)
	}
	if value, ok := rdpru.mutation.CommunityName(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldCommunityName, field.TypeString, value)
	}
	if value, ok := rdpru.mutation.CommunityID(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldCommunityID, field.TypeInt, value)
	}
	if value, ok := rdpru.mutation.AddedCommunityID(); ok {
		_spec.AddField(rent591homedetailpositionround.FieldCommunityID, field.TypeInt, value)
	}
	if value, ok := rdpru.mutation.Address(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldAddress, field.TypeString, value)
	}
	if value, ok := rdpru.mutation.Lat(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := rdpru.mutation.AddedLat(); ok {
		_spec.AddField(rent591homedetailpositionround.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := rdpru.mutation.Lng(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := rdpru.mutation.AddedLng(); ok {
		_spec.AddField(rent591homedetailpositionround.FieldLng, field.TypeFloat64, value)
	}
	if rdpru.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homedetailpositionround.Rent591homeDetailsTable,
			Columns: []string{rent591homedetailpositionround.Rent591homeDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdpru.mutation.Rent591homeDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homedetailpositionround.Rent591homeDetailsTable,
			Columns: []string{rent591homedetailpositionround.Rent591homeDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdpru.mutation.Rent591homeDetailPositionRoundDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdpru.mutation.RemovedRent591homeDetailPositionRoundDatasIDs(); len(nodes) > 0 && !rdpru.mutation.Rent591homeDetailPositionRoundDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdpru.mutation.Rent591homeDetailPositionRoundDatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rdpru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetailpositionround.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdpru.mutation.done = true
	return n, nil
}

// Rent591HomeDetailPositionRoundUpdateOne is the builder for updating a single Rent591HomeDetailPositionRound entity.
type Rent591HomeDetailPositionRoundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Rent591HomeDetailPositionRoundMutation
}

// SetTitle sets the "title" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SetTitle(s string) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.SetTitle(s)
	return rdpruo
}

// SetKey sets the "key" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SetKey(s string) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.SetKey(s)
	return rdpruo
}

// SetActive sets the "active" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SetActive(i int) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.ResetActive()
	rdpruo.mutation.SetActive(i)
	return rdpruo
}

// AddActive adds i to the "active" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) AddActive(i int) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.AddActive(i)
	return rdpruo
}

// SetCommunityName sets the "community_name" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SetCommunityName(s string) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.SetCommunityName(s)
	return rdpruo
}

// SetCommunityID sets the "community_id" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SetCommunityID(i int) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.ResetCommunityID()
	rdpruo.mutation.SetCommunityID(i)
	return rdpruo
}

// AddCommunityID adds i to the "community_id" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) AddCommunityID(i int) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.AddCommunityID(i)
	return rdpruo
}

// SetAddress sets the "address" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SetAddress(s string) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.SetAddress(s)
	return rdpruo
}

// SetLat sets the "lat" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SetLat(f float64) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.ResetLat()
	rdpruo.mutation.SetLat(f)
	return rdpruo
}

// AddLat adds f to the "lat" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) AddLat(f float64) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.AddLat(f)
	return rdpruo
}

// SetLng sets the "lng" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SetLng(f float64) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.ResetLng()
	rdpruo.mutation.SetLng(f)
	return rdpruo
}

// AddLng adds f to the "lng" field.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) AddLng(f float64) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.AddLng(f)
	return rdpruo
}

// SetRent591homeDetailsID sets the "rent591home_details" edge to the Rent591HomeDetail entity by ID.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SetRent591homeDetailsID(id int) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.SetRent591homeDetailsID(id)
	return rdpruo
}

// SetNillableRent591homeDetailsID sets the "rent591home_details" edge to the Rent591HomeDetail entity by ID if the given value is not nil.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SetNillableRent591homeDetailsID(id *int) *Rent591HomeDetailPositionRoundUpdateOne {
	if id != nil {
		rdpruo = rdpruo.SetRent591homeDetailsID(*id)
	}
	return rdpruo
}

// SetRent591homeDetails sets the "rent591home_details" edge to the Rent591HomeDetail entity.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SetRent591homeDetails(r *Rent591HomeDetail) *Rent591HomeDetailPositionRoundUpdateOne {
	return rdpruo.SetRent591homeDetailsID(r.ID)
}

// AddRent591homeDetailPositionRoundDataIDs adds the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity by IDs.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) AddRent591homeDetailPositionRoundDataIDs(ids ...int) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.AddRent591homeDetailPositionRoundDataIDs(ids...)
	return rdpruo
}

// AddRent591homeDetailPositionRoundDatas adds the "rent591home_detail_position_round_datas" edges to the Rent591HomeDetailPositionRoundData entity.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) AddRent591homeDetailPositionRoundDatas(r ...*Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdpruo.AddRent591homeDetailPositionRoundDataIDs(ids...)
}

// Mutation returns the Rent591HomeDetailPositionRoundMutation object of the builder.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) Mutation() *Rent591HomeDetailPositionRoundMutation {
	return rdpruo.mutation
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) ClearRent591homeDetails() *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.ClearRent591homeDetails()
	return rdpruo
}

// ClearRent591homeDetailPositionRoundDatas clears all "rent591home_detail_position_round_datas" edges to the Rent591HomeDetailPositionRoundData entity.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) ClearRent591homeDetailPositionRoundDatas() *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.ClearRent591homeDetailPositionRoundDatas()
	return rdpruo
}

// RemoveRent591homeDetailPositionRoundDataIDs removes the "rent591home_detail_position_round_datas" edge to Rent591HomeDetailPositionRoundData entities by IDs.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) RemoveRent591homeDetailPositionRoundDataIDs(ids ...int) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.RemoveRent591homeDetailPositionRoundDataIDs(ids...)
	return rdpruo
}

// RemoveRent591homeDetailPositionRoundDatas removes "rent591home_detail_position_round_datas" edges to Rent591HomeDetailPositionRoundData entities.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) RemoveRent591homeDetailPositionRoundDatas(r ...*Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdpruo.RemoveRent591homeDetailPositionRoundDataIDs(ids...)
}

// Where appends a list predicates to the Rent591HomeDetailPositionRoundUpdate builder.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) Where(ps ...predicate.Rent591HomeDetailPositionRound) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.mutation.Where(ps...)
	return rdpruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) Select(field string, fields ...string) *Rent591HomeDetailPositionRoundUpdateOne {
	rdpruo.fields = append([]string{field}, fields...)
	return rdpruo
}

// Save executes the query and returns the updated Rent591HomeDetailPositionRound entity.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) Save(ctx context.Context) (*Rent591HomeDetailPositionRound, error) {
	return withHooks(ctx, rdpruo.sqlSave, rdpruo.mutation, rdpruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) SaveX(ctx context.Context) *Rent591HomeDetailPositionRound {
	node, err := rdpruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) Exec(ctx context.Context) error {
	_, err := rdpruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) ExecX(ctx context.Context) {
	if err := rdpruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdpruo *Rent591HomeDetailPositionRoundUpdateOne) sqlSave(ctx context.Context) (_node *Rent591HomeDetailPositionRound, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetailpositionround.Table, rent591homedetailpositionround.Columns, sqlgraph.NewFieldSpec(rent591homedetailpositionround.FieldID, field.TypeInt))
	id, ok := rdpruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rent591HomeDetailPositionRound.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rdpruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rent591homedetailpositionround.FieldID)
		for _, f := range fields {
			if !rent591homedetailpositionround.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rent591homedetailpositionround.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rdpruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdpruo.mutation.Title(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldTitle, field.TypeString, value)
	}
	if value, ok := rdpruo.mutation.Key(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldKey, field.TypeString, value)
	}
	if value, ok := rdpruo.mutation.Active(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldActive, field.TypeInt, value)
	}
	if value, ok := rdpruo.mutation.AddedActive(); ok {
		_spec.AddField(rent591homedetailpositionround.FieldActive, field.TypeInt, value)
	}
	if value, ok := rdpruo.mutation.CommunityName(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldCommunityName, field.TypeString, value)
	}
	if value, ok := rdpruo.mutation.CommunityID(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldCommunityID, field.TypeInt, value)
	}
	if value, ok := rdpruo.mutation.AddedCommunityID(); ok {
		_spec.AddField(rent591homedetailpositionround.FieldCommunityID, field.TypeInt, value)
	}
	if value, ok := rdpruo.mutation.Address(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldAddress, field.TypeString, value)
	}
	if value, ok := rdpruo.mutation.Lat(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := rdpruo.mutation.AddedLat(); ok {
		_spec.AddField(rent591homedetailpositionround.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := rdpruo.mutation.Lng(); ok {
		_spec.SetField(rent591homedetailpositionround.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := rdpruo.mutation.AddedLng(); ok {
		_spec.AddField(rent591homedetailpositionround.FieldLng, field.TypeFloat64, value)
	}
	if rdpruo.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homedetailpositionround.Rent591homeDetailsTable,
			Columns: []string{rent591homedetailpositionround.Rent591homeDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdpruo.mutation.Rent591homeDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homedetailpositionround.Rent591homeDetailsTable,
			Columns: []string{rent591homedetailpositionround.Rent591homeDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdpruo.mutation.Rent591homeDetailPositionRoundDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdpruo.mutation.RemovedRent591homeDetailPositionRoundDatasIDs(); len(nodes) > 0 && !rdpruo.mutation.Rent591homeDetailPositionRoundDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdpruo.mutation.Rent591homeDetailPositionRoundDatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rent591HomeDetailPositionRound{config: rdpruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rdpruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetailpositionround.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rdpruo.mutation.done = true
	return _node, nil
}

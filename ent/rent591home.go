// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/programzheng/rent-house-crawler/ent/rent591home"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homesurrounding"
)

// Rent591Home is the model entity for the Rent591Home schema.
type Rent591Home struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID int `json:"post_id,omitempty"`
	// KindName holds the value of the "kind_name" field.
	KindName string `json:"kind_name,omitempty"`
	// RoomStr holds the value of the "room_str" field.
	RoomStr string `json:"room_str,omitempty"`
	// FloorStr holds the value of the "floor_str" field.
	FloorStr string `json:"floor_str,omitempty"`
	// Community holds the value of the "community" field.
	Community string `json:"community,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// PriceUnit holds the value of the "price_unit" field.
	PriceUnit string `json:"price_unit,omitempty"`
	// PhotoList holds the value of the "photo_list" field.
	PhotoList []string `json:"photo_list,omitempty"`
	// RegionName holds the value of the "region_name" field.
	RegionName string `json:"region_name,omitempty"`
	// SectionName holds the value of the "section_name" field.
	SectionName string `json:"section_name,omitempty"`
	// StreetName holds the value of the "street_name" field.
	StreetName string `json:"street_name,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Area holds the value of the "area" field.
	Area string `json:"area,omitempty"`
	// RoleName holds the value of the "role_name" field.
	RoleName string `json:"role_name,omitempty"`
	// Contact holds the value of the "contact" field.
	Contact string `json:"contact,omitempty"`
	// RefreshTime holds the value of the "refresh_time" field.
	RefreshTime string `json:"refresh_time,omitempty"`
	// YesterdayHit holds the value of the "yesterday_hit" field.
	YesterdayHit int `json:"yesterday_hit,omitempty"`
	// IsVip holds the value of the "is_vip" field.
	IsVip int `json:"is_vip,omitempty"`
	// IsCombine holds the value of the "is_combine" field.
	IsCombine int `json:"is_combine,omitempty"`
	// Hurry holds the value of the "hurry" field.
	Hurry int `json:"hurry,omitempty"`
	// IsSocial holds the value of the "is_social" field.
	IsSocial int `json:"is_social,omitempty"`
	// DiscountPriceStr holds the value of the "discount_price_str" field.
	DiscountPriceStr string `json:"discount_price_str,omitempty"`
	// CasesID holds the value of the "cases_id" field.
	CasesID int `json:"cases_id,omitempty"`
	// IsVideo holds the value of the "is_video" field.
	IsVideo int `json:"is_video,omitempty"`
	// Preferred holds the value of the "preferred" field.
	Preferred int `json:"preferred,omitempty"`
	// Cid holds the value of the "cid" field.
	Cid int `json:"cid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Rent591HomeQuery when eager-loading is set.
	Edges        Rent591HomeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Rent591HomeEdges holds the relations/edges for other nodes in the graph.
type Rent591HomeEdges struct {
	// Rent591homeTags holds the value of the rent591home_tags edge.
	Rent591homeTags []*Rent591HomeTag `json:"rent591home_tags,omitempty"`
	// Rent591homeSurroundings holds the value of the rent591home_surroundings edge.
	Rent591homeSurroundings *Rent591HomeSurrounding `json:"rent591home_surroundings,omitempty"`
	// Rent591homeDetails holds the value of the rent591home_details edge.
	Rent591homeDetails *Rent591HomeDetail `json:"rent591home_details,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// Rent591homeTagsOrErr returns the Rent591homeTags value or an error if the edge
// was not loaded in eager-loading.
func (e Rent591HomeEdges) Rent591homeTagsOrErr() ([]*Rent591HomeTag, error) {
	if e.loadedTypes[0] {
		return e.Rent591homeTags, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_tags"}
}

// Rent591homeSurroundingsOrErr returns the Rent591homeSurroundings value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Rent591HomeEdges) Rent591homeSurroundingsOrErr() (*Rent591HomeSurrounding, error) {
	if e.loadedTypes[1] {
		if e.Rent591homeSurroundings == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rent591homesurrounding.Label}
		}
		return e.Rent591homeSurroundings, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_surroundings"}
}

// Rent591homeDetailsOrErr returns the Rent591homeDetails value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Rent591HomeEdges) Rent591homeDetailsOrErr() (*Rent591HomeDetail, error) {
	if e.loadedTypes[2] {
		if e.Rent591homeDetails == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rent591homedetail.Label}
		}
		return e.Rent591homeDetails, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rent591Home) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rent591home.FieldPhotoList:
			values[i] = new([]byte)
		case rent591home.FieldID, rent591home.FieldType, rent591home.FieldPostID, rent591home.FieldPrice, rent591home.FieldYesterdayHit, rent591home.FieldIsVip, rent591home.FieldIsCombine, rent591home.FieldHurry, rent591home.FieldIsSocial, rent591home.FieldCasesID, rent591home.FieldIsVideo, rent591home.FieldPreferred, rent591home.FieldCid:
			values[i] = new(sql.NullInt64)
		case rent591home.FieldTitle, rent591home.FieldKindName, rent591home.FieldRoomStr, rent591home.FieldFloorStr, rent591home.FieldCommunity, rent591home.FieldPriceUnit, rent591home.FieldRegionName, rent591home.FieldSectionName, rent591home.FieldStreetName, rent591home.FieldLocation, rent591home.FieldArea, rent591home.FieldRoleName, rent591home.FieldContact, rent591home.FieldRefreshTime, rent591home.FieldDiscountPriceStr:
			values[i] = new(sql.NullString)
		case rent591home.FieldCreatedAt, rent591home.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rent591Home fields.
func (r *Rent591Home) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rent591home.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case rent591home.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				r.Title = value.String
			}
		case rent591home.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = int(value.Int64)
			}
		case rent591home.FieldPostID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				r.PostID = int(value.Int64)
			}
		case rent591home.FieldKindName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind_name", values[i])
			} else if value.Valid {
				r.KindName = value.String
			}
		case rent591home.FieldRoomStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_str", values[i])
			} else if value.Valid {
				r.RoomStr = value.String
			}
		case rent591home.FieldFloorStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field floor_str", values[i])
			} else if value.Valid {
				r.FloorStr = value.String
			}
		case rent591home.FieldCommunity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field community", values[i])
			} else if value.Valid {
				r.Community = value.String
			}
		case rent591home.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				r.Price = int(value.Int64)
			}
		case rent591home.FieldPriceUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_unit", values[i])
			} else if value.Valid {
				r.PriceUnit = value.String
			}
		case rent591home.FieldPhotoList:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photo_list", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.PhotoList); err != nil {
					return fmt.Errorf("unmarshal field photo_list: %w", err)
				}
			}
		case rent591home.FieldRegionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region_name", values[i])
			} else if value.Valid {
				r.RegionName = value.String
			}
		case rent591home.FieldSectionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field section_name", values[i])
			} else if value.Valid {
				r.SectionName = value.String
			}
		case rent591home.FieldStreetName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street_name", values[i])
			} else if value.Valid {
				r.StreetName = value.String
			}
		case rent591home.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				r.Location = value.String
			}
		case rent591home.FieldArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				r.Area = value.String
			}
		case rent591home.FieldRoleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_name", values[i])
			} else if value.Valid {
				r.RoleName = value.String
			}
		case rent591home.FieldContact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact", values[i])
			} else if value.Valid {
				r.Contact = value.String
			}
		case rent591home.FieldRefreshTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_time", values[i])
			} else if value.Valid {
				r.RefreshTime = value.String
			}
		case rent591home.FieldYesterdayHit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field yesterday_hit", values[i])
			} else if value.Valid {
				r.YesterdayHit = int(value.Int64)
			}
		case rent591home.FieldIsVip:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_vip", values[i])
			} else if value.Valid {
				r.IsVip = int(value.Int64)
			}
		case rent591home.FieldIsCombine:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_combine", values[i])
			} else if value.Valid {
				r.IsCombine = int(value.Int64)
			}
		case rent591home.FieldHurry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hurry", values[i])
			} else if value.Valid {
				r.Hurry = int(value.Int64)
			}
		case rent591home.FieldIsSocial:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_social", values[i])
			} else if value.Valid {
				r.IsSocial = int(value.Int64)
			}
		case rent591home.FieldDiscountPriceStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field discount_price_str", values[i])
			} else if value.Valid {
				r.DiscountPriceStr = value.String
			}
		case rent591home.FieldCasesID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cases_id", values[i])
			} else if value.Valid {
				r.CasesID = int(value.Int64)
			}
		case rent591home.FieldIsVideo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_video", values[i])
			} else if value.Valid {
				r.IsVideo = int(value.Int64)
			}
		case rent591home.FieldPreferred:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field preferred", values[i])
			} else if value.Valid {
				r.Preferred = int(value.Int64)
			}
		case rent591home.FieldCid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cid", values[i])
			} else if value.Valid {
				r.Cid = int(value.Int64)
			}
		case rent591home.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case rent591home.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rent591Home.
// This includes values selected through modifiers, order, etc.
func (r *Rent591Home) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryRent591homeTags queries the "rent591home_tags" edge of the Rent591Home entity.
func (r *Rent591Home) QueryRent591homeTags() *Rent591HomeTagQuery {
	return NewRent591HomeClient(r.config).QueryRent591homeTags(r)
}

// QueryRent591homeSurroundings queries the "rent591home_surroundings" edge of the Rent591Home entity.
func (r *Rent591Home) QueryRent591homeSurroundings() *Rent591HomeSurroundingQuery {
	return NewRent591HomeClient(r.config).QueryRent591homeSurroundings(r)
}

// QueryRent591homeDetails queries the "rent591home_details" edge of the Rent591Home entity.
func (r *Rent591Home) QueryRent591homeDetails() *Rent591HomeDetailQuery {
	return NewRent591HomeClient(r.config).QueryRent591homeDetails(r)
}

// Update returns a builder for updating this Rent591Home.
// Note that you need to call Rent591Home.Unwrap() before calling this method if this Rent591Home
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rent591Home) Update() *Rent591HomeUpdateOne {
	return NewRent591HomeClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Rent591Home entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rent591Home) Unwrap() *Rent591Home {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rent591Home is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rent591Home) String() string {
	var builder strings.Builder
	builder.WriteString("Rent591Home(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("title=")
	builder.WriteString(r.Title)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	builder.WriteString("post_id=")
	builder.WriteString(fmt.Sprintf("%v", r.PostID))
	builder.WriteString(", ")
	builder.WriteString("kind_name=")
	builder.WriteString(r.KindName)
	builder.WriteString(", ")
	builder.WriteString("room_str=")
	builder.WriteString(r.RoomStr)
	builder.WriteString(", ")
	builder.WriteString("floor_str=")
	builder.WriteString(r.FloorStr)
	builder.WriteString(", ")
	builder.WriteString("community=")
	builder.WriteString(r.Community)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", r.Price))
	builder.WriteString(", ")
	builder.WriteString("price_unit=")
	builder.WriteString(r.PriceUnit)
	builder.WriteString(", ")
	builder.WriteString("photo_list=")
	builder.WriteString(fmt.Sprintf("%v", r.PhotoList))
	builder.WriteString(", ")
	builder.WriteString("region_name=")
	builder.WriteString(r.RegionName)
	builder.WriteString(", ")
	builder.WriteString("section_name=")
	builder.WriteString(r.SectionName)
	builder.WriteString(", ")
	builder.WriteString("street_name=")
	builder.WriteString(r.StreetName)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(r.Location)
	builder.WriteString(", ")
	builder.WriteString("area=")
	builder.WriteString(r.Area)
	builder.WriteString(", ")
	builder.WriteString("role_name=")
	builder.WriteString(r.RoleName)
	builder.WriteString(", ")
	builder.WriteString("contact=")
	builder.WriteString(r.Contact)
	builder.WriteString(", ")
	builder.WriteString("refresh_time=")
	builder.WriteString(r.RefreshTime)
	builder.WriteString(", ")
	builder.WriteString("yesterday_hit=")
	builder.WriteString(fmt.Sprintf("%v", r.YesterdayHit))
	builder.WriteString(", ")
	builder.WriteString("is_vip=")
	builder.WriteString(fmt.Sprintf("%v", r.IsVip))
	builder.WriteString(", ")
	builder.WriteString("is_combine=")
	builder.WriteString(fmt.Sprintf("%v", r.IsCombine))
	builder.WriteString(", ")
	builder.WriteString("hurry=")
	builder.WriteString(fmt.Sprintf("%v", r.Hurry))
	builder.WriteString(", ")
	builder.WriteString("is_social=")
	builder.WriteString(fmt.Sprintf("%v", r.IsSocial))
	builder.WriteString(", ")
	builder.WriteString("discount_price_str=")
	builder.WriteString(r.DiscountPriceStr)
	builder.WriteString(", ")
	builder.WriteString("cases_id=")
	builder.WriteString(fmt.Sprintf("%v", r.CasesID))
	builder.WriteString(", ")
	builder.WriteString("is_video=")
	builder.WriteString(fmt.Sprintf("%v", r.IsVideo))
	builder.WriteString(", ")
	builder.WriteString("preferred=")
	builder.WriteString(fmt.Sprintf("%v", r.Preferred))
	builder.WriteString(", ")
	builder.WriteString("cid=")
	builder.WriteString(fmt.Sprintf("%v", r.Cid))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Rent591Homes is a parsable slice of Rent591Home.
type Rent591Homes []*Rent591Home

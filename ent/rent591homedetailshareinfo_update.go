// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailshareinfo"
)

// Rent591HomeDetailShareInfoUpdate is the builder for updating Rent591HomeDetailShareInfo entities.
type Rent591HomeDetailShareInfoUpdate struct {
	config
	hooks    []Hook
	mutation *Rent591HomeDetailShareInfoMutation
}

// Where appends a list predicates to the Rent591HomeDetailShareInfoUpdate builder.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) Where(ps ...predicate.Rent591HomeDetailShareInfo) *Rent591HomeDetailShareInfoUpdate {
	rdsiu.mutation.Where(ps...)
	return rdsiu
}

// SetURL sets the "url" field.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) SetURL(s string) *Rent591HomeDetailShareInfoUpdate {
	rdsiu.mutation.SetURL(s)
	return rdsiu
}

// SetFrom sets the "From" field.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) SetFrom(s string) *Rent591HomeDetailShareInfoUpdate {
	rdsiu.mutation.SetFrom(s)
	return rdsiu
}

// SetTitle sets the "title" field.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) SetTitle(s string) *Rent591HomeDetailShareInfoUpdate {
	rdsiu.mutation.SetTitle(s)
	return rdsiu
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) AddRent591homeDetailIDs(ids ...int) *Rent591HomeDetailShareInfoUpdate {
	rdsiu.mutation.AddRent591homeDetailIDs(ids...)
	return rdsiu
}

// AddRent591homeDetails adds the "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) AddRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailShareInfoUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdsiu.AddRent591homeDetailIDs(ids...)
}

// Mutation returns the Rent591HomeDetailShareInfoMutation object of the builder.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) Mutation() *Rent591HomeDetailShareInfoMutation {
	return rdsiu.mutation
}

// ClearRent591homeDetails clears all "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) ClearRent591homeDetails() *Rent591HomeDetailShareInfoUpdate {
	rdsiu.mutation.ClearRent591homeDetails()
	return rdsiu
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to Rent591HomeDetail entities by IDs.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) RemoveRent591homeDetailIDs(ids ...int) *Rent591HomeDetailShareInfoUpdate {
	rdsiu.mutation.RemoveRent591homeDetailIDs(ids...)
	return rdsiu
}

// RemoveRent591homeDetails removes "rent591home_details" edges to Rent591HomeDetail entities.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) RemoveRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailShareInfoUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdsiu.RemoveRent591homeDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rdsiu.sqlSave, rdsiu.mutation, rdsiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := rdsiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) Exec(ctx context.Context) error {
	_, err := rdsiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdsiu *Rent591HomeDetailShareInfoUpdate) ExecX(ctx context.Context) {
	if err := rdsiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdsiu *Rent591HomeDetailShareInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetailshareinfo.Table, rent591homedetailshareinfo.Columns, sqlgraph.NewFieldSpec(rent591homedetailshareinfo.FieldID, field.TypeInt))
	if ps := rdsiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdsiu.mutation.URL(); ok {
		_spec.SetField(rent591homedetailshareinfo.FieldURL, field.TypeString, value)
	}
	if value, ok := rdsiu.mutation.From(); ok {
		_spec.SetField(rent591homedetailshareinfo.FieldFrom, field.TypeString, value)
	}
	if value, ok := rdsiu.mutation.Title(); ok {
		_spec.SetField(rent591homedetailshareinfo.FieldTitle, field.TypeString, value)
	}
	if rdsiu.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailshareinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailshareinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdsiu.mutation.RemovedRent591homeDetailsIDs(); len(nodes) > 0 && !rdsiu.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailshareinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailshareinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdsiu.mutation.Rent591homeDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailshareinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailshareinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rdsiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetailshareinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdsiu.mutation.done = true
	return n, nil
}

// Rent591HomeDetailShareInfoUpdateOne is the builder for updating a single Rent591HomeDetailShareInfo entity.
type Rent591HomeDetailShareInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Rent591HomeDetailShareInfoMutation
}

// SetURL sets the "url" field.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) SetURL(s string) *Rent591HomeDetailShareInfoUpdateOne {
	rdsiuo.mutation.SetURL(s)
	return rdsiuo
}

// SetFrom sets the "From" field.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) SetFrom(s string) *Rent591HomeDetailShareInfoUpdateOne {
	rdsiuo.mutation.SetFrom(s)
	return rdsiuo
}

// SetTitle sets the "title" field.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) SetTitle(s string) *Rent591HomeDetailShareInfoUpdateOne {
	rdsiuo.mutation.SetTitle(s)
	return rdsiuo
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) AddRent591homeDetailIDs(ids ...int) *Rent591HomeDetailShareInfoUpdateOne {
	rdsiuo.mutation.AddRent591homeDetailIDs(ids...)
	return rdsiuo
}

// AddRent591homeDetails adds the "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) AddRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailShareInfoUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdsiuo.AddRent591homeDetailIDs(ids...)
}

// Mutation returns the Rent591HomeDetailShareInfoMutation object of the builder.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) Mutation() *Rent591HomeDetailShareInfoMutation {
	return rdsiuo.mutation
}

// ClearRent591homeDetails clears all "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) ClearRent591homeDetails() *Rent591HomeDetailShareInfoUpdateOne {
	rdsiuo.mutation.ClearRent591homeDetails()
	return rdsiuo
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to Rent591HomeDetail entities by IDs.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) RemoveRent591homeDetailIDs(ids ...int) *Rent591HomeDetailShareInfoUpdateOne {
	rdsiuo.mutation.RemoveRent591homeDetailIDs(ids...)
	return rdsiuo
}

// RemoveRent591homeDetails removes "rent591home_details" edges to Rent591HomeDetail entities.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) RemoveRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailShareInfoUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdsiuo.RemoveRent591homeDetailIDs(ids...)
}

// Where appends a list predicates to the Rent591HomeDetailShareInfoUpdate builder.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) Where(ps ...predicate.Rent591HomeDetailShareInfo) *Rent591HomeDetailShareInfoUpdateOne {
	rdsiuo.mutation.Where(ps...)
	return rdsiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) Select(field string, fields ...string) *Rent591HomeDetailShareInfoUpdateOne {
	rdsiuo.fields = append([]string{field}, fields...)
	return rdsiuo
}

// Save executes the query and returns the updated Rent591HomeDetailShareInfo entity.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) Save(ctx context.Context) (*Rent591HomeDetailShareInfo, error) {
	return withHooks(ctx, rdsiuo.sqlSave, rdsiuo.mutation, rdsiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) SaveX(ctx context.Context) *Rent591HomeDetailShareInfo {
	node, err := rdsiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := rdsiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) ExecX(ctx context.Context) {
	if err := rdsiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdsiuo *Rent591HomeDetailShareInfoUpdateOne) sqlSave(ctx context.Context) (_node *Rent591HomeDetailShareInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetailshareinfo.Table, rent591homedetailshareinfo.Columns, sqlgraph.NewFieldSpec(rent591homedetailshareinfo.FieldID, field.TypeInt))
	id, ok := rdsiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rent591HomeDetailShareInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rdsiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rent591homedetailshareinfo.FieldID)
		for _, f := range fields {
			if !rent591homedetailshareinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rent591homedetailshareinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rdsiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdsiuo.mutation.URL(); ok {
		_spec.SetField(rent591homedetailshareinfo.FieldURL, field.TypeString, value)
	}
	if value, ok := rdsiuo.mutation.From(); ok {
		_spec.SetField(rent591homedetailshareinfo.FieldFrom, field.TypeString, value)
	}
	if value, ok := rdsiuo.mutation.Title(); ok {
		_spec.SetField(rent591homedetailshareinfo.FieldTitle, field.TypeString, value)
	}
	if rdsiuo.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailshareinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailshareinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdsiuo.mutation.RemovedRent591homeDetailsIDs(); len(nodes) > 0 && !rdsiuo.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailshareinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailshareinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdsiuo.mutation.Rent591homeDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailshareinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailshareinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rent591HomeDetailShareInfo{config: rdsiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rdsiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetailshareinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rdsiuo.mutation.done = true
	return _node, nil
}

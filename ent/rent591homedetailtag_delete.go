// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailtag"
)

// Rent591HomeDetailTagDelete is the builder for deleting a Rent591HomeDetailTag entity.
type Rent591HomeDetailTagDelete struct {
	config
	hooks    []Hook
	mutation *Rent591HomeDetailTagMutation
}

// Where appends a list predicates to the Rent591HomeDetailTagDelete builder.
func (rdtd *Rent591HomeDetailTagDelete) Where(ps ...predicate.Rent591HomeDetailTag) *Rent591HomeDetailTagDelete {
	rdtd.mutation.Where(ps...)
	return rdtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rdtd *Rent591HomeDetailTagDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rdtd.sqlExec, rdtd.mutation, rdtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rdtd *Rent591HomeDetailTagDelete) ExecX(ctx context.Context) int {
	n, err := rdtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rdtd *Rent591HomeDetailTagDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(rent591homedetailtag.Table, sqlgraph.NewFieldSpec(rent591homedetailtag.FieldID, field.TypeInt))
	if ps := rdtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rdtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rdtd.mutation.done = true
	return affected, err
}

// Rent591HomeDetailTagDeleteOne is the builder for deleting a single Rent591HomeDetailTag entity.
type Rent591HomeDetailTagDeleteOne struct {
	rdtd *Rent591HomeDetailTagDelete
}

// Where appends a list predicates to the Rent591HomeDetailTagDelete builder.
func (rdtdo *Rent591HomeDetailTagDeleteOne) Where(ps ...predicate.Rent591HomeDetailTag) *Rent591HomeDetailTagDeleteOne {
	rdtdo.rdtd.mutation.Where(ps...)
	return rdtdo
}

// Exec executes the deletion query.
func (rdtdo *Rent591HomeDetailTagDeleteOne) Exec(ctx context.Context) error {
	n, err := rdtdo.rdtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rent591homedetailtag.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rdtdo *Rent591HomeDetailTagDeleteOne) ExecX(ctx context.Context) {
	if err := rdtdo.Exec(ctx); err != nil {
		panic(err)
	}
}

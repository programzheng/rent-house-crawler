// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionrounddata"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionrounddatachildren"
)

// Rent591HomeDetailPositionRoundDataChildrenUpdate is the builder for updating Rent591HomeDetailPositionRoundDataChildren entities.
type Rent591HomeDetailPositionRoundDataChildrenUpdate struct {
	config
	hooks    []Hook
	mutation *Rent591HomeDetailPositionRoundDataChildrenMutation
}

// Where appends a list predicates to the Rent591HomeDetailPositionRoundDataChildrenUpdate builder.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) Where(ps ...predicate.Rent591HomeDetailPositionRoundDataChildren) *Rent591HomeDetailPositionRoundDataChildrenUpdate {
	rdprdcu.mutation.Where(ps...)
	return rdprdcu
}

// SetName sets the "name" field.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) SetName(s string) *Rent591HomeDetailPositionRoundDataChildrenUpdate {
	rdprdcu.mutation.SetName(s)
	return rdprdcu
}

// SetKey sets the "key" field.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) SetKey(s string) *Rent591HomeDetailPositionRoundDataChildrenUpdate {
	rdprdcu.mutation.SetKey(s)
	return rdprdcu
}

// AddRent591homeDetailPositionRoundDataIDs adds the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity by IDs.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) AddRent591homeDetailPositionRoundDataIDs(ids ...int) *Rent591HomeDetailPositionRoundDataChildrenUpdate {
	rdprdcu.mutation.AddRent591homeDetailPositionRoundDataIDs(ids...)
	return rdprdcu
}

// AddRent591homeDetailPositionRoundDatas adds the "rent591home_detail_position_round_datas" edges to the Rent591HomeDetailPositionRoundData entity.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) AddRent591homeDetailPositionRoundDatas(r ...*Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundDataChildrenUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdprdcu.AddRent591homeDetailPositionRoundDataIDs(ids...)
}

// Mutation returns the Rent591HomeDetailPositionRoundDataChildrenMutation object of the builder.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) Mutation() *Rent591HomeDetailPositionRoundDataChildrenMutation {
	return rdprdcu.mutation
}

// ClearRent591homeDetailPositionRoundDatas clears all "rent591home_detail_position_round_datas" edges to the Rent591HomeDetailPositionRoundData entity.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) ClearRent591homeDetailPositionRoundDatas() *Rent591HomeDetailPositionRoundDataChildrenUpdate {
	rdprdcu.mutation.ClearRent591homeDetailPositionRoundDatas()
	return rdprdcu
}

// RemoveRent591homeDetailPositionRoundDataIDs removes the "rent591home_detail_position_round_datas" edge to Rent591HomeDetailPositionRoundData entities by IDs.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) RemoveRent591homeDetailPositionRoundDataIDs(ids ...int) *Rent591HomeDetailPositionRoundDataChildrenUpdate {
	rdprdcu.mutation.RemoveRent591homeDetailPositionRoundDataIDs(ids...)
	return rdprdcu
}

// RemoveRent591homeDetailPositionRoundDatas removes "rent591home_detail_position_round_datas" edges to Rent591HomeDetailPositionRoundData entities.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) RemoveRent591homeDetailPositionRoundDatas(r ...*Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundDataChildrenUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdprdcu.RemoveRent591homeDetailPositionRoundDataIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rdprdcu.sqlSave, rdprdcu.mutation, rdprdcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) SaveX(ctx context.Context) int {
	affected, err := rdprdcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) Exec(ctx context.Context) error {
	_, err := rdprdcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) ExecX(ctx context.Context) {
	if err := rdprdcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdprdcu *Rent591HomeDetailPositionRoundDataChildrenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetailpositionrounddatachildren.Table, rent591homedetailpositionrounddatachildren.Columns, sqlgraph.NewFieldSpec(rent591homedetailpositionrounddatachildren.FieldID, field.TypeInt))
	if ps := rdprdcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdprdcu.mutation.Name(); ok {
		_spec.SetField(rent591homedetailpositionrounddatachildren.FieldName, field.TypeString, value)
	}
	if value, ok := rdprdcu.mutation.Key(); ok {
		_spec.SetField(rent591homedetailpositionrounddatachildren.FieldKey, field.TypeString, value)
	}
	if rdprdcu.mutation.Rent591homeDetailPositionRoundDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdprdcu.mutation.RemovedRent591homeDetailPositionRoundDatasIDs(); len(nodes) > 0 && !rdprdcu.mutation.Rent591homeDetailPositionRoundDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdprdcu.mutation.Rent591homeDetailPositionRoundDatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rdprdcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetailpositionrounddatachildren.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdprdcu.mutation.done = true
	return n, nil
}

// Rent591HomeDetailPositionRoundDataChildrenUpdateOne is the builder for updating a single Rent591HomeDetailPositionRoundDataChildren entity.
type Rent591HomeDetailPositionRoundDataChildrenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Rent591HomeDetailPositionRoundDataChildrenMutation
}

// SetName sets the "name" field.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) SetName(s string) *Rent591HomeDetailPositionRoundDataChildrenUpdateOne {
	rdprdcuo.mutation.SetName(s)
	return rdprdcuo
}

// SetKey sets the "key" field.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) SetKey(s string) *Rent591HomeDetailPositionRoundDataChildrenUpdateOne {
	rdprdcuo.mutation.SetKey(s)
	return rdprdcuo
}

// AddRent591homeDetailPositionRoundDataIDs adds the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity by IDs.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) AddRent591homeDetailPositionRoundDataIDs(ids ...int) *Rent591HomeDetailPositionRoundDataChildrenUpdateOne {
	rdprdcuo.mutation.AddRent591homeDetailPositionRoundDataIDs(ids...)
	return rdprdcuo
}

// AddRent591homeDetailPositionRoundDatas adds the "rent591home_detail_position_round_datas" edges to the Rent591HomeDetailPositionRoundData entity.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) AddRent591homeDetailPositionRoundDatas(r ...*Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundDataChildrenUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdprdcuo.AddRent591homeDetailPositionRoundDataIDs(ids...)
}

// Mutation returns the Rent591HomeDetailPositionRoundDataChildrenMutation object of the builder.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) Mutation() *Rent591HomeDetailPositionRoundDataChildrenMutation {
	return rdprdcuo.mutation
}

// ClearRent591homeDetailPositionRoundDatas clears all "rent591home_detail_position_round_datas" edges to the Rent591HomeDetailPositionRoundData entity.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) ClearRent591homeDetailPositionRoundDatas() *Rent591HomeDetailPositionRoundDataChildrenUpdateOne {
	rdprdcuo.mutation.ClearRent591homeDetailPositionRoundDatas()
	return rdprdcuo
}

// RemoveRent591homeDetailPositionRoundDataIDs removes the "rent591home_detail_position_round_datas" edge to Rent591HomeDetailPositionRoundData entities by IDs.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) RemoveRent591homeDetailPositionRoundDataIDs(ids ...int) *Rent591HomeDetailPositionRoundDataChildrenUpdateOne {
	rdprdcuo.mutation.RemoveRent591homeDetailPositionRoundDataIDs(ids...)
	return rdprdcuo
}

// RemoveRent591homeDetailPositionRoundDatas removes "rent591home_detail_position_round_datas" edges to Rent591HomeDetailPositionRoundData entities.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) RemoveRent591homeDetailPositionRoundDatas(r ...*Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundDataChildrenUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdprdcuo.RemoveRent591homeDetailPositionRoundDataIDs(ids...)
}

// Where appends a list predicates to the Rent591HomeDetailPositionRoundDataChildrenUpdate builder.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) Where(ps ...predicate.Rent591HomeDetailPositionRoundDataChildren) *Rent591HomeDetailPositionRoundDataChildrenUpdateOne {
	rdprdcuo.mutation.Where(ps...)
	return rdprdcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) Select(field string, fields ...string) *Rent591HomeDetailPositionRoundDataChildrenUpdateOne {
	rdprdcuo.fields = append([]string{field}, fields...)
	return rdprdcuo
}

// Save executes the query and returns the updated Rent591HomeDetailPositionRoundDataChildren entity.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) Save(ctx context.Context) (*Rent591HomeDetailPositionRoundDataChildren, error) {
	return withHooks(ctx, rdprdcuo.sqlSave, rdprdcuo.mutation, rdprdcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) SaveX(ctx context.Context) *Rent591HomeDetailPositionRoundDataChildren {
	node, err := rdprdcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) Exec(ctx context.Context) error {
	_, err := rdprdcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) ExecX(ctx context.Context) {
	if err := rdprdcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdprdcuo *Rent591HomeDetailPositionRoundDataChildrenUpdateOne) sqlSave(ctx context.Context) (_node *Rent591HomeDetailPositionRoundDataChildren, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetailpositionrounddatachildren.Table, rent591homedetailpositionrounddatachildren.Columns, sqlgraph.NewFieldSpec(rent591homedetailpositionrounddatachildren.FieldID, field.TypeInt))
	id, ok := rdprdcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rent591HomeDetailPositionRoundDataChildren.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rdprdcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rent591homedetailpositionrounddatachildren.FieldID)
		for _, f := range fields {
			if !rent591homedetailpositionrounddatachildren.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rent591homedetailpositionrounddatachildren.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rdprdcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdprdcuo.mutation.Name(); ok {
		_spec.SetField(rent591homedetailpositionrounddatachildren.FieldName, field.TypeString, value)
	}
	if value, ok := rdprdcuo.mutation.Key(); ok {
		_spec.SetField(rent591homedetailpositionrounddatachildren.FieldKey, field.TypeString, value)
	}
	if rdprdcuo.mutation.Rent591homeDetailPositionRoundDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdprdcuo.mutation.RemovedRent591homeDetailPositionRoundDatasIDs(); len(nodes) > 0 && !rdprdcuo.mutation.Rent591homeDetailPositionRoundDatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdprdcuo.mutation.Rent591homeDetailPositionRoundDatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasTable,
			Columns: rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionrounddata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rent591HomeDetailPositionRoundDataChildren{config: rdprdcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rdprdcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetailpositionrounddatachildren.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rdprdcuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/rent591home"
	"github.com/programzheng/rent-house-crawler/ent/rent591homesurrounding"
)

// Rent591HomeSurroundingCreate is the builder for creating a Rent591HomeSurrounding entity.
type Rent591HomeSurroundingCreate struct {
	config
	mutation *Rent591HomeSurroundingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (rsc *Rent591HomeSurroundingCreate) SetType(s string) *Rent591HomeSurroundingCreate {
	rsc.mutation.SetType(s)
	return rsc
}

// SetDesc sets the "desc" field.
func (rsc *Rent591HomeSurroundingCreate) SetDesc(s string) *Rent591HomeSurroundingCreate {
	rsc.mutation.SetDesc(s)
	return rsc
}

// SetDistance sets the "distance" field.
func (rsc *Rent591HomeSurroundingCreate) SetDistance(s string) *Rent591HomeSurroundingCreate {
	rsc.mutation.SetDistance(s)
	return rsc
}

// SetCreatedAt sets the "created_at" field.
func (rsc *Rent591HomeSurroundingCreate) SetCreatedAt(t time.Time) *Rent591HomeSurroundingCreate {
	rsc.mutation.SetCreatedAt(t)
	return rsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rsc *Rent591HomeSurroundingCreate) SetNillableCreatedAt(t *time.Time) *Rent591HomeSurroundingCreate {
	if t != nil {
		rsc.SetCreatedAt(*t)
	}
	return rsc
}

// SetRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID.
func (rsc *Rent591HomeSurroundingCreate) SetRent591homesID(id int) *Rent591HomeSurroundingCreate {
	rsc.mutation.SetRent591homesID(id)
	return rsc
}

// SetNillableRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID if the given value is not nil.
func (rsc *Rent591HomeSurroundingCreate) SetNillableRent591homesID(id *int) *Rent591HomeSurroundingCreate {
	if id != nil {
		rsc = rsc.SetRent591homesID(*id)
	}
	return rsc
}

// SetRent591homes sets the "rent591homes" edge to the Rent591Home entity.
func (rsc *Rent591HomeSurroundingCreate) SetRent591homes(r *Rent591Home) *Rent591HomeSurroundingCreate {
	return rsc.SetRent591homesID(r.ID)
}

// Mutation returns the Rent591HomeSurroundingMutation object of the builder.
func (rsc *Rent591HomeSurroundingCreate) Mutation() *Rent591HomeSurroundingMutation {
	return rsc.mutation
}

// Save creates the Rent591HomeSurrounding in the database.
func (rsc *Rent591HomeSurroundingCreate) Save(ctx context.Context) (*Rent591HomeSurrounding, error) {
	rsc.defaults()
	return withHooks(ctx, rsc.sqlSave, rsc.mutation, rsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rsc *Rent591HomeSurroundingCreate) SaveX(ctx context.Context) *Rent591HomeSurrounding {
	v, err := rsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsc *Rent591HomeSurroundingCreate) Exec(ctx context.Context) error {
	_, err := rsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsc *Rent591HomeSurroundingCreate) ExecX(ctx context.Context) {
	if err := rsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsc *Rent591HomeSurroundingCreate) defaults() {
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		v := rent591homesurrounding.DefaultCreatedAt()
		rsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsc *Rent591HomeSurroundingCreate) check() error {
	if _, ok := rsc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Rent591HomeSurrounding.type"`)}
	}
	if _, ok := rsc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "Rent591HomeSurrounding.desc"`)}
	}
	if _, ok := rsc.mutation.Distance(); !ok {
		return &ValidationError{Name: "distance", err: errors.New(`ent: missing required field "Rent591HomeSurrounding.distance"`)}
	}
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Rent591HomeSurrounding.created_at"`)}
	}
	return nil
}

func (rsc *Rent591HomeSurroundingCreate) sqlSave(ctx context.Context) (*Rent591HomeSurrounding, error) {
	if err := rsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rsc.mutation.id = &_node.ID
	rsc.mutation.done = true
	return _node, nil
}

func (rsc *Rent591HomeSurroundingCreate) createSpec() (*Rent591HomeSurrounding, *sqlgraph.CreateSpec) {
	var (
		_node = &Rent591HomeSurrounding{config: rsc.config}
		_spec = sqlgraph.NewCreateSpec(rent591homesurrounding.Table, sqlgraph.NewFieldSpec(rent591homesurrounding.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rsc.conflict
	if value, ok := rsc.mutation.GetType(); ok {
		_spec.SetField(rent591homesurrounding.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := rsc.mutation.Desc(); ok {
		_spec.SetField(rent591homesurrounding.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := rsc.mutation.Distance(); ok {
		_spec.SetField(rent591homesurrounding.FieldDistance, field.TypeString, value)
		_node.Distance = value
	}
	if value, ok := rsc.mutation.CreatedAt(); ok {
		_spec.SetField(rent591homesurrounding.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := rsc.mutation.Rent591homesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homesurrounding.Rent591homesTable,
			Columns: []string{rent591homesurrounding.Rent591homesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.rent591home_rent591home_surroundings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rent591HomeSurrounding.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Rent591HomeSurroundingUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (rsc *Rent591HomeSurroundingCreate) OnConflict(opts ...sql.ConflictOption) *Rent591HomeSurroundingUpsertOne {
	rsc.conflict = opts
	return &Rent591HomeSurroundingUpsertOne{
		create: rsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rent591HomeSurrounding.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rsc *Rent591HomeSurroundingCreate) OnConflictColumns(columns ...string) *Rent591HomeSurroundingUpsertOne {
	rsc.conflict = append(rsc.conflict, sql.ConflictColumns(columns...))
	return &Rent591HomeSurroundingUpsertOne{
		create: rsc,
	}
}

type (
	// Rent591HomeSurroundingUpsertOne is the builder for "upsert"-ing
	//  one Rent591HomeSurrounding node.
	Rent591HomeSurroundingUpsertOne struct {
		create *Rent591HomeSurroundingCreate
	}

	// Rent591HomeSurroundingUpsert is the "OnConflict" setter.
	Rent591HomeSurroundingUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *Rent591HomeSurroundingUpsert) SetType(v string) *Rent591HomeSurroundingUpsert {
	u.Set(rent591homesurrounding.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsert) UpdateType() *Rent591HomeSurroundingUpsert {
	u.SetExcluded(rent591homesurrounding.FieldType)
	return u
}

// SetDesc sets the "desc" field.
func (u *Rent591HomeSurroundingUpsert) SetDesc(v string) *Rent591HomeSurroundingUpsert {
	u.Set(rent591homesurrounding.FieldDesc, v)
	return u
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsert) UpdateDesc() *Rent591HomeSurroundingUpsert {
	u.SetExcluded(rent591homesurrounding.FieldDesc)
	return u
}

// SetDistance sets the "distance" field.
func (u *Rent591HomeSurroundingUpsert) SetDistance(v string) *Rent591HomeSurroundingUpsert {
	u.Set(rent591homesurrounding.FieldDistance, v)
	return u
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsert) UpdateDistance() *Rent591HomeSurroundingUpsert {
	u.SetExcluded(rent591homesurrounding.FieldDistance)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *Rent591HomeSurroundingUpsert) SetCreatedAt(v time.Time) *Rent591HomeSurroundingUpsert {
	u.Set(rent591homesurrounding.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsert) UpdateCreatedAt() *Rent591HomeSurroundingUpsert {
	u.SetExcluded(rent591homesurrounding.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Rent591HomeSurrounding.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Rent591HomeSurroundingUpsertOne) UpdateNewValues() *Rent591HomeSurroundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rent591HomeSurrounding.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *Rent591HomeSurroundingUpsertOne) Ignore() *Rent591HomeSurroundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Rent591HomeSurroundingUpsertOne) DoNothing() *Rent591HomeSurroundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Rent591HomeSurroundingCreate.OnConflict
// documentation for more info.
func (u *Rent591HomeSurroundingUpsertOne) Update(set func(*Rent591HomeSurroundingUpsert)) *Rent591HomeSurroundingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Rent591HomeSurroundingUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *Rent591HomeSurroundingUpsertOne) SetType(v string) *Rent591HomeSurroundingUpsertOne {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsertOne) UpdateType() *Rent591HomeSurroundingUpsertOne {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.UpdateType()
	})
}

// SetDesc sets the "desc" field.
func (u *Rent591HomeSurroundingUpsertOne) SetDesc(v string) *Rent591HomeSurroundingUpsertOne {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsertOne) UpdateDesc() *Rent591HomeSurroundingUpsertOne {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.UpdateDesc()
	})
}

// SetDistance sets the "distance" field.
func (u *Rent591HomeSurroundingUpsertOne) SetDistance(v string) *Rent591HomeSurroundingUpsertOne {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.SetDistance(v)
	})
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsertOne) UpdateDistance() *Rent591HomeSurroundingUpsertOne {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.UpdateDistance()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *Rent591HomeSurroundingUpsertOne) SetCreatedAt(v time.Time) *Rent591HomeSurroundingUpsertOne {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsertOne) UpdateCreatedAt() *Rent591HomeSurroundingUpsertOne {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *Rent591HomeSurroundingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Rent591HomeSurroundingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Rent591HomeSurroundingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *Rent591HomeSurroundingUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *Rent591HomeSurroundingUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Rent591HomeSurroundingCreateBulk is the builder for creating many Rent591HomeSurrounding entities in bulk.
type Rent591HomeSurroundingCreateBulk struct {
	config
	builders []*Rent591HomeSurroundingCreate
	conflict []sql.ConflictOption
}

// Save creates the Rent591HomeSurrounding entities in the database.
func (rscb *Rent591HomeSurroundingCreateBulk) Save(ctx context.Context) ([]*Rent591HomeSurrounding, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rscb.builders))
	nodes := make([]*Rent591HomeSurrounding, len(rscb.builders))
	mutators := make([]Mutator, len(rscb.builders))
	for i := range rscb.builders {
		func(i int, root context.Context) {
			builder := rscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*Rent591HomeSurroundingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rscb *Rent591HomeSurroundingCreateBulk) SaveX(ctx context.Context) []*Rent591HomeSurrounding {
	v, err := rscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rscb *Rent591HomeSurroundingCreateBulk) Exec(ctx context.Context) error {
	_, err := rscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscb *Rent591HomeSurroundingCreateBulk) ExecX(ctx context.Context) {
	if err := rscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rent591HomeSurrounding.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.Rent591HomeSurroundingUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (rscb *Rent591HomeSurroundingCreateBulk) OnConflict(opts ...sql.ConflictOption) *Rent591HomeSurroundingUpsertBulk {
	rscb.conflict = opts
	return &Rent591HomeSurroundingUpsertBulk{
		create: rscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rent591HomeSurrounding.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rscb *Rent591HomeSurroundingCreateBulk) OnConflictColumns(columns ...string) *Rent591HomeSurroundingUpsertBulk {
	rscb.conflict = append(rscb.conflict, sql.ConflictColumns(columns...))
	return &Rent591HomeSurroundingUpsertBulk{
		create: rscb,
	}
}

// Rent591HomeSurroundingUpsertBulk is the builder for "upsert"-ing
// a bulk of Rent591HomeSurrounding nodes.
type Rent591HomeSurroundingUpsertBulk struct {
	create *Rent591HomeSurroundingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Rent591HomeSurrounding.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *Rent591HomeSurroundingUpsertBulk) UpdateNewValues() *Rent591HomeSurroundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rent591HomeSurrounding.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *Rent591HomeSurroundingUpsertBulk) Ignore() *Rent591HomeSurroundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *Rent591HomeSurroundingUpsertBulk) DoNothing() *Rent591HomeSurroundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the Rent591HomeSurroundingCreateBulk.OnConflict
// documentation for more info.
func (u *Rent591HomeSurroundingUpsertBulk) Update(set func(*Rent591HomeSurroundingUpsert)) *Rent591HomeSurroundingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&Rent591HomeSurroundingUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *Rent591HomeSurroundingUpsertBulk) SetType(v string) *Rent591HomeSurroundingUpsertBulk {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsertBulk) UpdateType() *Rent591HomeSurroundingUpsertBulk {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.UpdateType()
	})
}

// SetDesc sets the "desc" field.
func (u *Rent591HomeSurroundingUpsertBulk) SetDesc(v string) *Rent591HomeSurroundingUpsertBulk {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsertBulk) UpdateDesc() *Rent591HomeSurroundingUpsertBulk {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.UpdateDesc()
	})
}

// SetDistance sets the "distance" field.
func (u *Rent591HomeSurroundingUpsertBulk) SetDistance(v string) *Rent591HomeSurroundingUpsertBulk {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.SetDistance(v)
	})
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsertBulk) UpdateDistance() *Rent591HomeSurroundingUpsertBulk {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.UpdateDistance()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *Rent591HomeSurroundingUpsertBulk) SetCreatedAt(v time.Time) *Rent591HomeSurroundingUpsertBulk {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *Rent591HomeSurroundingUpsertBulk) UpdateCreatedAt() *Rent591HomeSurroundingUpsertBulk {
	return u.Update(func(s *Rent591HomeSurroundingUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *Rent591HomeSurroundingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the Rent591HomeSurroundingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for Rent591HomeSurroundingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *Rent591HomeSurroundingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

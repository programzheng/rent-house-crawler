// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591home"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbreadcrumb"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbrowse"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailinfo"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailnavdata"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionround"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpublish"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailshareinfo"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailtag"
)

// Rent591HomeDetailQuery is the builder for querying Rent591HomeDetail entities.
type Rent591HomeDetailQuery struct {
	config
	ctx                                 *QueryContext
	order                               []rent591homedetail.OrderOption
	inters                              []Interceptor
	predicates                          []predicate.Rent591HomeDetail
	withRent591homes                    *Rent591HomeQuery
	withRent591homeDetailBreadcrumbs    *Rent591HomeDetailBreadcrumbQuery
	withRent591homeDetailShareinfos     *Rent591HomeDetailShareInfoQuery
	withRent591homeDetailBrowses        *Rent591HomeDetailBrowseQuery
	withRent591homeDetailTags           *Rent591HomeDetailTagQuery
	withRent591homeDetailNavdatas       *Rent591HomeDetailNavDataQuery
	withRent591homeDetailInfos          *Rent591HomeDetailInfoQuery
	withRent591homeDetailPublishs       *Rent591HomeDetailPublishQuery
	withRent591homeDetailPositionRounds *Rent591HomeDetailPositionRoundQuery
	withFKs                             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the Rent591HomeDetailQuery builder.
func (rdq *Rent591HomeDetailQuery) Where(ps ...predicate.Rent591HomeDetail) *Rent591HomeDetailQuery {
	rdq.predicates = append(rdq.predicates, ps...)
	return rdq
}

// Limit the number of records to be returned by this query.
func (rdq *Rent591HomeDetailQuery) Limit(limit int) *Rent591HomeDetailQuery {
	rdq.ctx.Limit = &limit
	return rdq
}

// Offset to start from.
func (rdq *Rent591HomeDetailQuery) Offset(offset int) *Rent591HomeDetailQuery {
	rdq.ctx.Offset = &offset
	return rdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rdq *Rent591HomeDetailQuery) Unique(unique bool) *Rent591HomeDetailQuery {
	rdq.ctx.Unique = &unique
	return rdq
}

// Order specifies how the records should be ordered.
func (rdq *Rent591HomeDetailQuery) Order(o ...rent591homedetail.OrderOption) *Rent591HomeDetailQuery {
	rdq.order = append(rdq.order, o...)
	return rdq
}

// QueryRent591homes chains the current query on the "rent591homes" edge.
func (rdq *Rent591HomeDetailQuery) QueryRent591homes() *Rent591HomeQuery {
	query := (&Rent591HomeClient{config: rdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, selector),
			sqlgraph.To(rent591home.Table, rent591home.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, rent591homedetail.Rent591homesTable, rent591homedetail.Rent591homesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRent591homeDetailBreadcrumbs chains the current query on the "rent591home_detail_breadcrumbs" edge.
func (rdq *Rent591HomeDetailQuery) QueryRent591homeDetailBreadcrumbs() *Rent591HomeDetailBreadcrumbQuery {
	query := (&Rent591HomeDetailBreadcrumbClient{config: rdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, selector),
			sqlgraph.To(rent591homedetailbreadcrumb.Table, rent591homedetailbreadcrumb.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetail.Rent591homeDetailBreadcrumbsTable, rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRent591homeDetailShareinfos chains the current query on the "rent591home_detail_shareinfos" edge.
func (rdq *Rent591HomeDetailQuery) QueryRent591homeDetailShareinfos() *Rent591HomeDetailShareInfoQuery {
	query := (&Rent591HomeDetailShareInfoClient{config: rdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, selector),
			sqlgraph.To(rent591homedetailshareinfo.Table, rent591homedetailshareinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetail.Rent591homeDetailShareinfosTable, rent591homedetail.Rent591homeDetailShareinfosPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRent591homeDetailBrowses chains the current query on the "rent591home_detail_browses" edge.
func (rdq *Rent591HomeDetailQuery) QueryRent591homeDetailBrowses() *Rent591HomeDetailBrowseQuery {
	query := (&Rent591HomeDetailBrowseClient{config: rdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, selector),
			sqlgraph.To(rent591homedetailbrowse.Table, rent591homedetailbrowse.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetail.Rent591homeDetailBrowsesTable, rent591homedetail.Rent591homeDetailBrowsesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRent591homeDetailTags chains the current query on the "rent591home_detail_tags" edge.
func (rdq *Rent591HomeDetailQuery) QueryRent591homeDetailTags() *Rent591HomeDetailTagQuery {
	query := (&Rent591HomeDetailTagClient{config: rdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, selector),
			sqlgraph.To(rent591homedetailtag.Table, rent591homedetailtag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetail.Rent591homeDetailTagsTable, rent591homedetail.Rent591homeDetailTagsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRent591homeDetailNavdatas chains the current query on the "rent591home_detail_navdatas" edge.
func (rdq *Rent591HomeDetailQuery) QueryRent591homeDetailNavdatas() *Rent591HomeDetailNavDataQuery {
	query := (&Rent591HomeDetailNavDataClient{config: rdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, selector),
			sqlgraph.To(rent591homedetailnavdata.Table, rent591homedetailnavdata.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetail.Rent591homeDetailNavdatasTable, rent591homedetail.Rent591homeDetailNavdatasPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRent591homeDetailInfos chains the current query on the "rent591home_detail_infos" edge.
func (rdq *Rent591HomeDetailQuery) QueryRent591homeDetailInfos() *Rent591HomeDetailInfoQuery {
	query := (&Rent591HomeDetailInfoClient{config: rdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, selector),
			sqlgraph.To(rent591homedetailinfo.Table, rent591homedetailinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetail.Rent591homeDetailInfosTable, rent591homedetail.Rent591homeDetailInfosPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRent591homeDetailPublishs chains the current query on the "rent591home_detail_publishs" edge.
func (rdq *Rent591HomeDetailQuery) QueryRent591homeDetailPublishs() *Rent591HomeDetailPublishQuery {
	query := (&Rent591HomeDetailPublishClient{config: rdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, selector),
			sqlgraph.To(rent591homedetailpublish.Table, rent591homedetailpublish.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetail.Rent591homeDetailPublishsTable, rent591homedetail.Rent591homeDetailPublishsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRent591homeDetailPositionRounds chains the current query on the "rent591home_detail_position_rounds" edge.
func (rdq *Rent591HomeDetailQuery) QueryRent591homeDetailPositionRounds() *Rent591HomeDetailPositionRoundQuery {
	query := (&Rent591HomeDetailPositionRoundClient{config: rdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, selector),
			sqlgraph.To(rent591homedetailpositionround.Table, rent591homedetailpositionround.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, rent591homedetail.Rent591homeDetailPositionRoundsTable, rent591homedetail.Rent591homeDetailPositionRoundsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Rent591HomeDetail entity from the query.
// Returns a *NotFoundError when no Rent591HomeDetail was found.
func (rdq *Rent591HomeDetailQuery) First(ctx context.Context) (*Rent591HomeDetail, error) {
	nodes, err := rdq.Limit(1).All(setContextOp(ctx, rdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{rent591homedetail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rdq *Rent591HomeDetailQuery) FirstX(ctx context.Context) *Rent591HomeDetail {
	node, err := rdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Rent591HomeDetail ID from the query.
// Returns a *NotFoundError when no Rent591HomeDetail ID was found.
func (rdq *Rent591HomeDetailQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rdq.Limit(1).IDs(setContextOp(ctx, rdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{rent591homedetail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rdq *Rent591HomeDetailQuery) FirstIDX(ctx context.Context) int {
	id, err := rdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Rent591HomeDetail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Rent591HomeDetail entity is found.
// Returns a *NotFoundError when no Rent591HomeDetail entities are found.
func (rdq *Rent591HomeDetailQuery) Only(ctx context.Context) (*Rent591HomeDetail, error) {
	nodes, err := rdq.Limit(2).All(setContextOp(ctx, rdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{rent591homedetail.Label}
	default:
		return nil, &NotSingularError{rent591homedetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rdq *Rent591HomeDetailQuery) OnlyX(ctx context.Context) *Rent591HomeDetail {
	node, err := rdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Rent591HomeDetail ID in the query.
// Returns a *NotSingularError when more than one Rent591HomeDetail ID is found.
// Returns a *NotFoundError when no entities are found.
func (rdq *Rent591HomeDetailQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rdq.Limit(2).IDs(setContextOp(ctx, rdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{rent591homedetail.Label}
	default:
		err = &NotSingularError{rent591homedetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rdq *Rent591HomeDetailQuery) OnlyIDX(ctx context.Context) int {
	id, err := rdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Rent591HomeDetails.
func (rdq *Rent591HomeDetailQuery) All(ctx context.Context) ([]*Rent591HomeDetail, error) {
	ctx = setContextOp(ctx, rdq.ctx, "All")
	if err := rdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Rent591HomeDetail, *Rent591HomeDetailQuery]()
	return withInterceptors[[]*Rent591HomeDetail](ctx, rdq, qr, rdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rdq *Rent591HomeDetailQuery) AllX(ctx context.Context) []*Rent591HomeDetail {
	nodes, err := rdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Rent591HomeDetail IDs.
func (rdq *Rent591HomeDetailQuery) IDs(ctx context.Context) (ids []int, err error) {
	if rdq.ctx.Unique == nil && rdq.path != nil {
		rdq.Unique(true)
	}
	ctx = setContextOp(ctx, rdq.ctx, "IDs")
	if err = rdq.Select(rent591homedetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rdq *Rent591HomeDetailQuery) IDsX(ctx context.Context) []int {
	ids, err := rdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rdq *Rent591HomeDetailQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rdq.ctx, "Count")
	if err := rdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rdq, querierCount[*Rent591HomeDetailQuery](), rdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rdq *Rent591HomeDetailQuery) CountX(ctx context.Context) int {
	count, err := rdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rdq *Rent591HomeDetailQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rdq.ctx, "Exist")
	switch _, err := rdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rdq *Rent591HomeDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := rdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the Rent591HomeDetailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rdq *Rent591HomeDetailQuery) Clone() *Rent591HomeDetailQuery {
	if rdq == nil {
		return nil
	}
	return &Rent591HomeDetailQuery{
		config:                              rdq.config,
		ctx:                                 rdq.ctx.Clone(),
		order:                               append([]rent591homedetail.OrderOption{}, rdq.order...),
		inters:                              append([]Interceptor{}, rdq.inters...),
		predicates:                          append([]predicate.Rent591HomeDetail{}, rdq.predicates...),
		withRent591homes:                    rdq.withRent591homes.Clone(),
		withRent591homeDetailBreadcrumbs:    rdq.withRent591homeDetailBreadcrumbs.Clone(),
		withRent591homeDetailShareinfos:     rdq.withRent591homeDetailShareinfos.Clone(),
		withRent591homeDetailBrowses:        rdq.withRent591homeDetailBrowses.Clone(),
		withRent591homeDetailTags:           rdq.withRent591homeDetailTags.Clone(),
		withRent591homeDetailNavdatas:       rdq.withRent591homeDetailNavdatas.Clone(),
		withRent591homeDetailInfos:          rdq.withRent591homeDetailInfos.Clone(),
		withRent591homeDetailPublishs:       rdq.withRent591homeDetailPublishs.Clone(),
		withRent591homeDetailPositionRounds: rdq.withRent591homeDetailPositionRounds.Clone(),
		// clone intermediate query.
		sql:  rdq.sql.Clone(),
		path: rdq.path,
	}
}

// WithRent591homes tells the query-builder to eager-load the nodes that are connected to
// the "rent591homes" edge. The optional arguments are used to configure the query builder of the edge.
func (rdq *Rent591HomeDetailQuery) WithRent591homes(opts ...func(*Rent591HomeQuery)) *Rent591HomeDetailQuery {
	query := (&Rent591HomeClient{config: rdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdq.withRent591homes = query
	return rdq
}

// WithRent591homeDetailBreadcrumbs tells the query-builder to eager-load the nodes that are connected to
// the "rent591home_detail_breadcrumbs" edge. The optional arguments are used to configure the query builder of the edge.
func (rdq *Rent591HomeDetailQuery) WithRent591homeDetailBreadcrumbs(opts ...func(*Rent591HomeDetailBreadcrumbQuery)) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailBreadcrumbClient{config: rdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdq.withRent591homeDetailBreadcrumbs = query
	return rdq
}

// WithRent591homeDetailShareinfos tells the query-builder to eager-load the nodes that are connected to
// the "rent591home_detail_shareinfos" edge. The optional arguments are used to configure the query builder of the edge.
func (rdq *Rent591HomeDetailQuery) WithRent591homeDetailShareinfos(opts ...func(*Rent591HomeDetailShareInfoQuery)) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailShareInfoClient{config: rdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdq.withRent591homeDetailShareinfos = query
	return rdq
}

// WithRent591homeDetailBrowses tells the query-builder to eager-load the nodes that are connected to
// the "rent591home_detail_browses" edge. The optional arguments are used to configure the query builder of the edge.
func (rdq *Rent591HomeDetailQuery) WithRent591homeDetailBrowses(opts ...func(*Rent591HomeDetailBrowseQuery)) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailBrowseClient{config: rdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdq.withRent591homeDetailBrowses = query
	return rdq
}

// WithRent591homeDetailTags tells the query-builder to eager-load the nodes that are connected to
// the "rent591home_detail_tags" edge. The optional arguments are used to configure the query builder of the edge.
func (rdq *Rent591HomeDetailQuery) WithRent591homeDetailTags(opts ...func(*Rent591HomeDetailTagQuery)) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailTagClient{config: rdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdq.withRent591homeDetailTags = query
	return rdq
}

// WithRent591homeDetailNavdatas tells the query-builder to eager-load the nodes that are connected to
// the "rent591home_detail_navdatas" edge. The optional arguments are used to configure the query builder of the edge.
func (rdq *Rent591HomeDetailQuery) WithRent591homeDetailNavdatas(opts ...func(*Rent591HomeDetailNavDataQuery)) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailNavDataClient{config: rdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdq.withRent591homeDetailNavdatas = query
	return rdq
}

// WithRent591homeDetailInfos tells the query-builder to eager-load the nodes that are connected to
// the "rent591home_detail_infos" edge. The optional arguments are used to configure the query builder of the edge.
func (rdq *Rent591HomeDetailQuery) WithRent591homeDetailInfos(opts ...func(*Rent591HomeDetailInfoQuery)) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailInfoClient{config: rdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdq.withRent591homeDetailInfos = query
	return rdq
}

// WithRent591homeDetailPublishs tells the query-builder to eager-load the nodes that are connected to
// the "rent591home_detail_publishs" edge. The optional arguments are used to configure the query builder of the edge.
func (rdq *Rent591HomeDetailQuery) WithRent591homeDetailPublishs(opts ...func(*Rent591HomeDetailPublishQuery)) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailPublishClient{config: rdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdq.withRent591homeDetailPublishs = query
	return rdq
}

// WithRent591homeDetailPositionRounds tells the query-builder to eager-load the nodes that are connected to
// the "rent591home_detail_position_rounds" edge. The optional arguments are used to configure the query builder of the edge.
func (rdq *Rent591HomeDetailQuery) WithRent591homeDetailPositionRounds(opts ...func(*Rent591HomeDetailPositionRoundQuery)) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailPositionRoundClient{config: rdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rdq.withRent591homeDetailPositionRounds = query
	return rdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Rent591HomeDetail.Query().
//		GroupBy(rent591homedetail.FieldTitle).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rdq *Rent591HomeDetailQuery) GroupBy(field string, fields ...string) *Rent591HomeDetailGroupBy {
	rdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &Rent591HomeDetailGroupBy{build: rdq}
	grbuild.flds = &rdq.ctx.Fields
	grbuild.label = rent591homedetail.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.Rent591HomeDetail.Query().
//		Select(rent591homedetail.FieldTitle).
//		Scan(ctx, &v)
func (rdq *Rent591HomeDetailQuery) Select(fields ...string) *Rent591HomeDetailSelect {
	rdq.ctx.Fields = append(rdq.ctx.Fields, fields...)
	sbuild := &Rent591HomeDetailSelect{Rent591HomeDetailQuery: rdq}
	sbuild.label = rent591homedetail.Label
	sbuild.flds, sbuild.scan = &rdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a Rent591HomeDetailSelect configured with the given aggregations.
func (rdq *Rent591HomeDetailQuery) Aggregate(fns ...AggregateFunc) *Rent591HomeDetailSelect {
	return rdq.Select().Aggregate(fns...)
}

func (rdq *Rent591HomeDetailQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rdq); err != nil {
				return err
			}
		}
	}
	for _, f := range rdq.ctx.Fields {
		if !rent591homedetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rdq.path != nil {
		prev, err := rdq.path(ctx)
		if err != nil {
			return err
		}
		rdq.sql = prev
	}
	return nil
}

func (rdq *Rent591HomeDetailQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Rent591HomeDetail, error) {
	var (
		nodes       = []*Rent591HomeDetail{}
		withFKs     = rdq.withFKs
		_spec       = rdq.querySpec()
		loadedTypes = [9]bool{
			rdq.withRent591homes != nil,
			rdq.withRent591homeDetailBreadcrumbs != nil,
			rdq.withRent591homeDetailShareinfos != nil,
			rdq.withRent591homeDetailBrowses != nil,
			rdq.withRent591homeDetailTags != nil,
			rdq.withRent591homeDetailNavdatas != nil,
			rdq.withRent591homeDetailInfos != nil,
			rdq.withRent591homeDetailPublishs != nil,
			rdq.withRent591homeDetailPositionRounds != nil,
		}
	)
	if rdq.withRent591homes != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, rent591homedetail.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Rent591HomeDetail).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Rent591HomeDetail{config: rdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rdq.withRent591homes; query != nil {
		if err := rdq.loadRent591homes(ctx, query, nodes, nil,
			func(n *Rent591HomeDetail, e *Rent591Home) { n.Edges.Rent591homes = e }); err != nil {
			return nil, err
		}
	}
	if query := rdq.withRent591homeDetailBreadcrumbs; query != nil {
		if err := rdq.loadRent591homeDetailBreadcrumbs(ctx, query, nodes,
			func(n *Rent591HomeDetail) { n.Edges.Rent591homeDetailBreadcrumbs = []*Rent591HomeDetailBreadcrumb{} },
			func(n *Rent591HomeDetail, e *Rent591HomeDetailBreadcrumb) {
				n.Edges.Rent591homeDetailBreadcrumbs = append(n.Edges.Rent591homeDetailBreadcrumbs, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rdq.withRent591homeDetailShareinfos; query != nil {
		if err := rdq.loadRent591homeDetailShareinfos(ctx, query, nodes,
			func(n *Rent591HomeDetail) { n.Edges.Rent591homeDetailShareinfos = []*Rent591HomeDetailShareInfo{} },
			func(n *Rent591HomeDetail, e *Rent591HomeDetailShareInfo) {
				n.Edges.Rent591homeDetailShareinfos = append(n.Edges.Rent591homeDetailShareinfos, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rdq.withRent591homeDetailBrowses; query != nil {
		if err := rdq.loadRent591homeDetailBrowses(ctx, query, nodes,
			func(n *Rent591HomeDetail) { n.Edges.Rent591homeDetailBrowses = []*Rent591HomeDetailBrowse{} },
			func(n *Rent591HomeDetail, e *Rent591HomeDetailBrowse) {
				n.Edges.Rent591homeDetailBrowses = append(n.Edges.Rent591homeDetailBrowses, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rdq.withRent591homeDetailTags; query != nil {
		if err := rdq.loadRent591homeDetailTags(ctx, query, nodes,
			func(n *Rent591HomeDetail) { n.Edges.Rent591homeDetailTags = []*Rent591HomeDetailTag{} },
			func(n *Rent591HomeDetail, e *Rent591HomeDetailTag) {
				n.Edges.Rent591homeDetailTags = append(n.Edges.Rent591homeDetailTags, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rdq.withRent591homeDetailNavdatas; query != nil {
		if err := rdq.loadRent591homeDetailNavdatas(ctx, query, nodes,
			func(n *Rent591HomeDetail) { n.Edges.Rent591homeDetailNavdatas = []*Rent591HomeDetailNavData{} },
			func(n *Rent591HomeDetail, e *Rent591HomeDetailNavData) {
				n.Edges.Rent591homeDetailNavdatas = append(n.Edges.Rent591homeDetailNavdatas, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rdq.withRent591homeDetailInfos; query != nil {
		if err := rdq.loadRent591homeDetailInfos(ctx, query, nodes,
			func(n *Rent591HomeDetail) { n.Edges.Rent591homeDetailInfos = []*Rent591HomeDetailInfo{} },
			func(n *Rent591HomeDetail, e *Rent591HomeDetailInfo) {
				n.Edges.Rent591homeDetailInfos = append(n.Edges.Rent591homeDetailInfos, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rdq.withRent591homeDetailPublishs; query != nil {
		if err := rdq.loadRent591homeDetailPublishs(ctx, query, nodes,
			func(n *Rent591HomeDetail) { n.Edges.Rent591homeDetailPublishs = []*Rent591HomeDetailPublish{} },
			func(n *Rent591HomeDetail, e *Rent591HomeDetailPublish) {
				n.Edges.Rent591homeDetailPublishs = append(n.Edges.Rent591homeDetailPublishs, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rdq.withRent591homeDetailPositionRounds; query != nil {
		if err := rdq.loadRent591homeDetailPositionRounds(ctx, query, nodes, nil,
			func(n *Rent591HomeDetail, e *Rent591HomeDetailPositionRound) {
				n.Edges.Rent591homeDetailPositionRounds = e
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rdq *Rent591HomeDetailQuery) loadRent591homes(ctx context.Context, query *Rent591HomeQuery, nodes []*Rent591HomeDetail, init func(*Rent591HomeDetail), assign func(*Rent591HomeDetail, *Rent591Home)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Rent591HomeDetail)
	for i := range nodes {
		if nodes[i].rent591home_rent591home_details == nil {
			continue
		}
		fk := *nodes[i].rent591home_rent591home_details
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rent591home.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rent591home_rent591home_details" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rdq *Rent591HomeDetailQuery) loadRent591homeDetailBreadcrumbs(ctx context.Context, query *Rent591HomeDetailBreadcrumbQuery, nodes []*Rent591HomeDetail, init func(*Rent591HomeDetail), assign func(*Rent591HomeDetail, *Rent591HomeDetailBreadcrumb)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Rent591HomeDetail)
	nids := make(map[int]map[*Rent591HomeDetail]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(rent591homedetail.Rent591homeDetailBreadcrumbsTable)
		s.Join(joinT).On(s.C(rent591homedetailbreadcrumb.FieldID), joinT.C(rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Rent591HomeDetail]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Rent591HomeDetailBreadcrumb](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "rent591home_detail_breadcrumbs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rdq *Rent591HomeDetailQuery) loadRent591homeDetailShareinfos(ctx context.Context, query *Rent591HomeDetailShareInfoQuery, nodes []*Rent591HomeDetail, init func(*Rent591HomeDetail), assign func(*Rent591HomeDetail, *Rent591HomeDetailShareInfo)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Rent591HomeDetail)
	nids := make(map[int]map[*Rent591HomeDetail]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(rent591homedetail.Rent591homeDetailShareinfosTable)
		s.Join(joinT).On(s.C(rent591homedetailshareinfo.FieldID), joinT.C(rent591homedetail.Rent591homeDetailShareinfosPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(rent591homedetail.Rent591homeDetailShareinfosPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(rent591homedetail.Rent591homeDetailShareinfosPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Rent591HomeDetail]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Rent591HomeDetailShareInfo](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "rent591home_detail_shareinfos" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rdq *Rent591HomeDetailQuery) loadRent591homeDetailBrowses(ctx context.Context, query *Rent591HomeDetailBrowseQuery, nodes []*Rent591HomeDetail, init func(*Rent591HomeDetail), assign func(*Rent591HomeDetail, *Rent591HomeDetailBrowse)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Rent591HomeDetail)
	nids := make(map[int]map[*Rent591HomeDetail]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(rent591homedetail.Rent591homeDetailBrowsesTable)
		s.Join(joinT).On(s.C(rent591homedetailbrowse.FieldID), joinT.C(rent591homedetail.Rent591homeDetailBrowsesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(rent591homedetail.Rent591homeDetailBrowsesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(rent591homedetail.Rent591homeDetailBrowsesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Rent591HomeDetail]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Rent591HomeDetailBrowse](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "rent591home_detail_browses" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rdq *Rent591HomeDetailQuery) loadRent591homeDetailTags(ctx context.Context, query *Rent591HomeDetailTagQuery, nodes []*Rent591HomeDetail, init func(*Rent591HomeDetail), assign func(*Rent591HomeDetail, *Rent591HomeDetailTag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Rent591HomeDetail)
	nids := make(map[int]map[*Rent591HomeDetail]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(rent591homedetail.Rent591homeDetailTagsTable)
		s.Join(joinT).On(s.C(rent591homedetailtag.FieldID), joinT.C(rent591homedetail.Rent591homeDetailTagsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(rent591homedetail.Rent591homeDetailTagsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(rent591homedetail.Rent591homeDetailTagsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Rent591HomeDetail]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Rent591HomeDetailTag](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "rent591home_detail_tags" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rdq *Rent591HomeDetailQuery) loadRent591homeDetailNavdatas(ctx context.Context, query *Rent591HomeDetailNavDataQuery, nodes []*Rent591HomeDetail, init func(*Rent591HomeDetail), assign func(*Rent591HomeDetail, *Rent591HomeDetailNavData)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Rent591HomeDetail)
	nids := make(map[int]map[*Rent591HomeDetail]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(rent591homedetail.Rent591homeDetailNavdatasTable)
		s.Join(joinT).On(s.C(rent591homedetailnavdata.FieldID), joinT.C(rent591homedetail.Rent591homeDetailNavdatasPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(rent591homedetail.Rent591homeDetailNavdatasPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(rent591homedetail.Rent591homeDetailNavdatasPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Rent591HomeDetail]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Rent591HomeDetailNavData](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "rent591home_detail_navdatas" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rdq *Rent591HomeDetailQuery) loadRent591homeDetailInfos(ctx context.Context, query *Rent591HomeDetailInfoQuery, nodes []*Rent591HomeDetail, init func(*Rent591HomeDetail), assign func(*Rent591HomeDetail, *Rent591HomeDetailInfo)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Rent591HomeDetail)
	nids := make(map[int]map[*Rent591HomeDetail]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(rent591homedetail.Rent591homeDetailInfosTable)
		s.Join(joinT).On(s.C(rent591homedetailinfo.FieldID), joinT.C(rent591homedetail.Rent591homeDetailInfosPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(rent591homedetail.Rent591homeDetailInfosPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(rent591homedetail.Rent591homeDetailInfosPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Rent591HomeDetail]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Rent591HomeDetailInfo](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "rent591home_detail_infos" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rdq *Rent591HomeDetailQuery) loadRent591homeDetailPublishs(ctx context.Context, query *Rent591HomeDetailPublishQuery, nodes []*Rent591HomeDetail, init func(*Rent591HomeDetail), assign func(*Rent591HomeDetail, *Rent591HomeDetailPublish)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Rent591HomeDetail)
	nids := make(map[int]map[*Rent591HomeDetail]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(rent591homedetail.Rent591homeDetailPublishsTable)
		s.Join(joinT).On(s.C(rent591homedetailpublish.FieldID), joinT.C(rent591homedetail.Rent591homeDetailPublishsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(rent591homedetail.Rent591homeDetailPublishsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(rent591homedetail.Rent591homeDetailPublishsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Rent591HomeDetail]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Rent591HomeDetailPublish](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "rent591home_detail_publishs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rdq *Rent591HomeDetailQuery) loadRent591homeDetailPositionRounds(ctx context.Context, query *Rent591HomeDetailPositionRoundQuery, nodes []*Rent591HomeDetail, init func(*Rent591HomeDetail), assign func(*Rent591HomeDetail, *Rent591HomeDetailPositionRound)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Rent591HomeDetail)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Rent591HomeDetailPositionRound(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(rent591homedetail.Rent591homeDetailPositionRoundsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.rent591home_detail_rent591home_detail_position_rounds
		if fk == nil {
			return fmt.Errorf(`foreign-key "rent591home_detail_rent591home_detail_position_rounds" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "rent591home_detail_rent591home_detail_position_rounds" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rdq *Rent591HomeDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rdq.querySpec()
	_spec.Node.Columns = rdq.ctx.Fields
	if len(rdq.ctx.Fields) > 0 {
		_spec.Unique = rdq.ctx.Unique != nil && *rdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rdq.driver, _spec)
}

func (rdq *Rent591HomeDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(rent591homedetail.Table, rent591homedetail.Columns, sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt))
	_spec.From = rdq.sql
	if unique := rdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rdq.path != nil {
		_spec.Unique = true
	}
	if fields := rdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rent591homedetail.FieldID)
		for i := range fields {
			if fields[i] != rent591homedetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rdq *Rent591HomeDetailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rdq.driver.Dialect())
	t1 := builder.Table(rent591homedetail.Table)
	columns := rdq.ctx.Fields
	if len(columns) == 0 {
		columns = rent591homedetail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rdq.sql != nil {
		selector = rdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rdq.ctx.Unique != nil && *rdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rdq.predicates {
		p(selector)
	}
	for _, p := range rdq.order {
		p(selector)
	}
	if offset := rdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Rent591HomeDetailGroupBy is the group-by builder for Rent591HomeDetail entities.
type Rent591HomeDetailGroupBy struct {
	selector
	build *Rent591HomeDetailQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rdgb *Rent591HomeDetailGroupBy) Aggregate(fns ...AggregateFunc) *Rent591HomeDetailGroupBy {
	rdgb.fns = append(rdgb.fns, fns...)
	return rdgb
}

// Scan applies the selector query and scans the result into the given value.
func (rdgb *Rent591HomeDetailGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rdgb.build.ctx, "GroupBy")
	if err := rdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*Rent591HomeDetailQuery, *Rent591HomeDetailGroupBy](ctx, rdgb.build, rdgb, rdgb.build.inters, v)
}

func (rdgb *Rent591HomeDetailGroupBy) sqlScan(ctx context.Context, root *Rent591HomeDetailQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rdgb.fns))
	for _, fn := range rdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rdgb.flds)+len(rdgb.fns))
		for _, f := range *rdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Rent591HomeDetailSelect is the builder for selecting fields of Rent591HomeDetail entities.
type Rent591HomeDetailSelect struct {
	*Rent591HomeDetailQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rds *Rent591HomeDetailSelect) Aggregate(fns ...AggregateFunc) *Rent591HomeDetailSelect {
	rds.fns = append(rds.fns, fns...)
	return rds
}

// Scan applies the selector query and scans the result into the given value.
func (rds *Rent591HomeDetailSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rds.ctx, "Select")
	if err := rds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*Rent591HomeDetailQuery, *Rent591HomeDetailSelect](ctx, rds.Rent591HomeDetailQuery, rds, rds.inters, v)
}

func (rds *Rent591HomeDetailSelect) sqlScan(ctx context.Context, root *Rent591HomeDetailQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rds.fns))
	for _, fn := range rds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

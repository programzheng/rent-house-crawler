// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591home"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbreadcrumb"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbrowse"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailinfo"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailnavdata"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionround"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpublish"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailshareinfo"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailtag"
)

// Rent591HomeDetailUpdate is the builder for updating Rent591HomeDetail entities.
type Rent591HomeDetailUpdate struct {
	config
	hooks    []Hook
	mutation *Rent591HomeDetailMutation
}

// Where appends a list predicates to the Rent591HomeDetailUpdate builder.
func (rdu *Rent591HomeDetailUpdate) Where(ps ...predicate.Rent591HomeDetail) *Rent591HomeDetailUpdate {
	rdu.mutation.Where(ps...)
	return rdu
}

// SetTitle sets the "title" field.
func (rdu *Rent591HomeDetailUpdate) SetTitle(s string) *Rent591HomeDetailUpdate {
	rdu.mutation.SetTitle(s)
	return rdu
}

// SetDeposit sets the "deposit" field.
func (rdu *Rent591HomeDetailUpdate) SetDeposit(s string) *Rent591HomeDetailUpdate {
	rdu.mutation.SetDeposit(s)
	return rdu
}

// SetKind sets the "kind" field.
func (rdu *Rent591HomeDetailUpdate) SetKind(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.ResetKind()
	rdu.mutation.SetKind(i)
	return rdu
}

// AddKind adds i to the "kind" field.
func (rdu *Rent591HomeDetailUpdate) AddKind(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddKind(i)
	return rdu
}

// SetRelieved sets the "relieved" field.
func (rdu *Rent591HomeDetailUpdate) SetRelieved(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.ResetRelieved()
	rdu.mutation.SetRelieved(i)
	return rdu
}

// AddRelieved adds i to the "relieved" field.
func (rdu *Rent591HomeDetailUpdate) AddRelieved(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddRelieved(i)
	return rdu
}

// SetRegionID sets the "region_id" field.
func (rdu *Rent591HomeDetailUpdate) SetRegionID(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.ResetRegionID()
	rdu.mutation.SetRegionID(i)
	return rdu
}

// AddRegionID adds i to the "region_id" field.
func (rdu *Rent591HomeDetailUpdate) AddRegionID(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddRegionID(i)
	return rdu
}

// SetSectionID sets the "section_id" field.
func (rdu *Rent591HomeDetailUpdate) SetSectionID(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.ResetSectionID()
	rdu.mutation.SetSectionID(i)
	return rdu
}

// AddSectionID adds i to the "section_id" field.
func (rdu *Rent591HomeDetailUpdate) AddSectionID(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddSectionID(i)
	return rdu
}

// SetDealText sets the "deal_text" field.
func (rdu *Rent591HomeDetailUpdate) SetDealText(s string) *Rent591HomeDetailUpdate {
	rdu.mutation.SetDealText(s)
	return rdu
}

// SetNillableDealText sets the "deal_text" field if the given value is not nil.
func (rdu *Rent591HomeDetailUpdate) SetNillableDealText(s *string) *Rent591HomeDetailUpdate {
	if s != nil {
		rdu.SetDealText(*s)
	}
	return rdu
}

// ClearDealText clears the value of the "deal_text" field.
func (rdu *Rent591HomeDetailUpdate) ClearDealText() *Rent591HomeDetailUpdate {
	rdu.mutation.ClearDealText()
	return rdu
}

// SetDealTime sets the "deal_time" field.
func (rdu *Rent591HomeDetailUpdate) SetDealTime(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.ResetDealTime()
	rdu.mutation.SetDealTime(i)
	return rdu
}

// AddDealTime adds i to the "deal_time" field.
func (rdu *Rent591HomeDetailUpdate) AddDealTime(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddDealTime(i)
	return rdu
}

// SetPrice sets the "price" field.
func (rdu *Rent591HomeDetailUpdate) SetPrice(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.ResetPrice()
	rdu.mutation.SetPrice(i)
	return rdu
}

// AddPrice adds i to the "price" field.
func (rdu *Rent591HomeDetailUpdate) AddPrice(i int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddPrice(i)
	return rdu
}

// SetPriceUnit sets the "price_unit" field.
func (rdu *Rent591HomeDetailUpdate) SetPriceUnit(s string) *Rent591HomeDetailUpdate {
	rdu.mutation.SetPriceUnit(s)
	return rdu
}

// SetCreatedAt sets the "created_at" field.
func (rdu *Rent591HomeDetailUpdate) SetCreatedAt(t time.Time) *Rent591HomeDetailUpdate {
	rdu.mutation.SetCreatedAt(t)
	return rdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rdu *Rent591HomeDetailUpdate) SetNillableCreatedAt(t *time.Time) *Rent591HomeDetailUpdate {
	if t != nil {
		rdu.SetCreatedAt(*t)
	}
	return rdu
}

// SetUpdatedAt sets the "updated_at" field.
func (rdu *Rent591HomeDetailUpdate) SetUpdatedAt(t time.Time) *Rent591HomeDetailUpdate {
	rdu.mutation.SetUpdatedAt(t)
	return rdu
}

// SetRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID.
func (rdu *Rent591HomeDetailUpdate) SetRent591homesID(id int) *Rent591HomeDetailUpdate {
	rdu.mutation.SetRent591homesID(id)
	return rdu
}

// SetNillableRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID if the given value is not nil.
func (rdu *Rent591HomeDetailUpdate) SetNillableRent591homesID(id *int) *Rent591HomeDetailUpdate {
	if id != nil {
		rdu = rdu.SetRent591homesID(*id)
	}
	return rdu
}

// SetRent591homes sets the "rent591homes" edge to the Rent591Home entity.
func (rdu *Rent591HomeDetailUpdate) SetRent591homes(r *Rent591Home) *Rent591HomeDetailUpdate {
	return rdu.SetRent591homesID(r.ID)
}

// AddRent591homeDetailBreadcrumbIDs adds the "rent591home_detail_breadcrumbs" edge to the Rent591HomeDetailBreadcrumb entity by IDs.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailBreadcrumbIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddRent591homeDetailBreadcrumbIDs(ids...)
	return rdu
}

// AddRent591homeDetailBreadcrumbs adds the "rent591home_detail_breadcrumbs" edges to the Rent591HomeDetailBreadcrumb entity.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailBreadcrumbs(r ...*Rent591HomeDetailBreadcrumb) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.AddRent591homeDetailBreadcrumbIDs(ids...)
}

// AddRent591homeDetailShareinfoIDs adds the "rent591home_detail_shareinfos" edge to the Rent591HomeDetailShareInfo entity by IDs.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailShareinfoIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddRent591homeDetailShareinfoIDs(ids...)
	return rdu
}

// AddRent591homeDetailShareinfos adds the "rent591home_detail_shareinfos" edges to the Rent591HomeDetailShareInfo entity.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailShareinfos(r ...*Rent591HomeDetailShareInfo) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.AddRent591homeDetailShareinfoIDs(ids...)
}

// AddRent591homeDetailBrowseIDs adds the "rent591home_detail_browses" edge to the Rent591HomeDetailBrowse entity by IDs.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailBrowseIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddRent591homeDetailBrowseIDs(ids...)
	return rdu
}

// AddRent591homeDetailBrowses adds the "rent591home_detail_browses" edges to the Rent591HomeDetailBrowse entity.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailBrowses(r ...*Rent591HomeDetailBrowse) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.AddRent591homeDetailBrowseIDs(ids...)
}

// AddRent591homeDetailTagIDs adds the "rent591home_detail_tags" edge to the Rent591HomeDetailTag entity by IDs.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailTagIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddRent591homeDetailTagIDs(ids...)
	return rdu
}

// AddRent591homeDetailTags adds the "rent591home_detail_tags" edges to the Rent591HomeDetailTag entity.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailTags(r ...*Rent591HomeDetailTag) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.AddRent591homeDetailTagIDs(ids...)
}

// AddRent591homeDetailNavdataIDs adds the "rent591home_detail_navdatas" edge to the Rent591HomeDetailNavData entity by IDs.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailNavdataIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddRent591homeDetailNavdataIDs(ids...)
	return rdu
}

// AddRent591homeDetailNavdatas adds the "rent591home_detail_navdatas" edges to the Rent591HomeDetailNavData entity.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailNavdatas(r ...*Rent591HomeDetailNavData) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.AddRent591homeDetailNavdataIDs(ids...)
}

// AddRent591homeDetailInfoIDs adds the "rent591home_detail_infos" edge to the Rent591HomeDetailInfo entity by IDs.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailInfoIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddRent591homeDetailInfoIDs(ids...)
	return rdu
}

// AddRent591homeDetailInfos adds the "rent591home_detail_infos" edges to the Rent591HomeDetailInfo entity.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailInfos(r ...*Rent591HomeDetailInfo) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.AddRent591homeDetailInfoIDs(ids...)
}

// AddRent591homeDetailPublishIDs adds the "rent591home_detail_publishs" edge to the Rent591HomeDetailPublish entity by IDs.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailPublishIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.AddRent591homeDetailPublishIDs(ids...)
	return rdu
}

// AddRent591homeDetailPublishs adds the "rent591home_detail_publishs" edges to the Rent591HomeDetailPublish entity.
func (rdu *Rent591HomeDetailUpdate) AddRent591homeDetailPublishs(r ...*Rent591HomeDetailPublish) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.AddRent591homeDetailPublishIDs(ids...)
}

// SetRent591homeDetailPositionRoundsID sets the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity by ID.
func (rdu *Rent591HomeDetailUpdate) SetRent591homeDetailPositionRoundsID(id int) *Rent591HomeDetailUpdate {
	rdu.mutation.SetRent591homeDetailPositionRoundsID(id)
	return rdu
}

// SetNillableRent591homeDetailPositionRoundsID sets the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity by ID if the given value is not nil.
func (rdu *Rent591HomeDetailUpdate) SetNillableRent591homeDetailPositionRoundsID(id *int) *Rent591HomeDetailUpdate {
	if id != nil {
		rdu = rdu.SetRent591homeDetailPositionRoundsID(*id)
	}
	return rdu
}

// SetRent591homeDetailPositionRounds sets the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity.
func (rdu *Rent591HomeDetailUpdate) SetRent591homeDetailPositionRounds(r *Rent591HomeDetailPositionRound) *Rent591HomeDetailUpdate {
	return rdu.SetRent591homeDetailPositionRoundsID(r.ID)
}

// Mutation returns the Rent591HomeDetailMutation object of the builder.
func (rdu *Rent591HomeDetailUpdate) Mutation() *Rent591HomeDetailMutation {
	return rdu.mutation
}

// ClearRent591homes clears the "rent591homes" edge to the Rent591Home entity.
func (rdu *Rent591HomeDetailUpdate) ClearRent591homes() *Rent591HomeDetailUpdate {
	rdu.mutation.ClearRent591homes()
	return rdu
}

// ClearRent591homeDetailBreadcrumbs clears all "rent591home_detail_breadcrumbs" edges to the Rent591HomeDetailBreadcrumb entity.
func (rdu *Rent591HomeDetailUpdate) ClearRent591homeDetailBreadcrumbs() *Rent591HomeDetailUpdate {
	rdu.mutation.ClearRent591homeDetailBreadcrumbs()
	return rdu
}

// RemoveRent591homeDetailBreadcrumbIDs removes the "rent591home_detail_breadcrumbs" edge to Rent591HomeDetailBreadcrumb entities by IDs.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailBreadcrumbIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.RemoveRent591homeDetailBreadcrumbIDs(ids...)
	return rdu
}

// RemoveRent591homeDetailBreadcrumbs removes "rent591home_detail_breadcrumbs" edges to Rent591HomeDetailBreadcrumb entities.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailBreadcrumbs(r ...*Rent591HomeDetailBreadcrumb) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.RemoveRent591homeDetailBreadcrumbIDs(ids...)
}

// ClearRent591homeDetailShareinfos clears all "rent591home_detail_shareinfos" edges to the Rent591HomeDetailShareInfo entity.
func (rdu *Rent591HomeDetailUpdate) ClearRent591homeDetailShareinfos() *Rent591HomeDetailUpdate {
	rdu.mutation.ClearRent591homeDetailShareinfos()
	return rdu
}

// RemoveRent591homeDetailShareinfoIDs removes the "rent591home_detail_shareinfos" edge to Rent591HomeDetailShareInfo entities by IDs.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailShareinfoIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.RemoveRent591homeDetailShareinfoIDs(ids...)
	return rdu
}

// RemoveRent591homeDetailShareinfos removes "rent591home_detail_shareinfos" edges to Rent591HomeDetailShareInfo entities.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailShareinfos(r ...*Rent591HomeDetailShareInfo) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.RemoveRent591homeDetailShareinfoIDs(ids...)
}

// ClearRent591homeDetailBrowses clears all "rent591home_detail_browses" edges to the Rent591HomeDetailBrowse entity.
func (rdu *Rent591HomeDetailUpdate) ClearRent591homeDetailBrowses() *Rent591HomeDetailUpdate {
	rdu.mutation.ClearRent591homeDetailBrowses()
	return rdu
}

// RemoveRent591homeDetailBrowseIDs removes the "rent591home_detail_browses" edge to Rent591HomeDetailBrowse entities by IDs.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailBrowseIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.RemoveRent591homeDetailBrowseIDs(ids...)
	return rdu
}

// RemoveRent591homeDetailBrowses removes "rent591home_detail_browses" edges to Rent591HomeDetailBrowse entities.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailBrowses(r ...*Rent591HomeDetailBrowse) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.RemoveRent591homeDetailBrowseIDs(ids...)
}

// ClearRent591homeDetailTags clears all "rent591home_detail_tags" edges to the Rent591HomeDetailTag entity.
func (rdu *Rent591HomeDetailUpdate) ClearRent591homeDetailTags() *Rent591HomeDetailUpdate {
	rdu.mutation.ClearRent591homeDetailTags()
	return rdu
}

// RemoveRent591homeDetailTagIDs removes the "rent591home_detail_tags" edge to Rent591HomeDetailTag entities by IDs.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailTagIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.RemoveRent591homeDetailTagIDs(ids...)
	return rdu
}

// RemoveRent591homeDetailTags removes "rent591home_detail_tags" edges to Rent591HomeDetailTag entities.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailTags(r ...*Rent591HomeDetailTag) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.RemoveRent591homeDetailTagIDs(ids...)
}

// ClearRent591homeDetailNavdatas clears all "rent591home_detail_navdatas" edges to the Rent591HomeDetailNavData entity.
func (rdu *Rent591HomeDetailUpdate) ClearRent591homeDetailNavdatas() *Rent591HomeDetailUpdate {
	rdu.mutation.ClearRent591homeDetailNavdatas()
	return rdu
}

// RemoveRent591homeDetailNavdataIDs removes the "rent591home_detail_navdatas" edge to Rent591HomeDetailNavData entities by IDs.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailNavdataIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.RemoveRent591homeDetailNavdataIDs(ids...)
	return rdu
}

// RemoveRent591homeDetailNavdatas removes "rent591home_detail_navdatas" edges to Rent591HomeDetailNavData entities.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailNavdatas(r ...*Rent591HomeDetailNavData) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.RemoveRent591homeDetailNavdataIDs(ids...)
}

// ClearRent591homeDetailInfos clears all "rent591home_detail_infos" edges to the Rent591HomeDetailInfo entity.
func (rdu *Rent591HomeDetailUpdate) ClearRent591homeDetailInfos() *Rent591HomeDetailUpdate {
	rdu.mutation.ClearRent591homeDetailInfos()
	return rdu
}

// RemoveRent591homeDetailInfoIDs removes the "rent591home_detail_infos" edge to Rent591HomeDetailInfo entities by IDs.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailInfoIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.RemoveRent591homeDetailInfoIDs(ids...)
	return rdu
}

// RemoveRent591homeDetailInfos removes "rent591home_detail_infos" edges to Rent591HomeDetailInfo entities.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailInfos(r ...*Rent591HomeDetailInfo) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.RemoveRent591homeDetailInfoIDs(ids...)
}

// ClearRent591homeDetailPublishs clears all "rent591home_detail_publishs" edges to the Rent591HomeDetailPublish entity.
func (rdu *Rent591HomeDetailUpdate) ClearRent591homeDetailPublishs() *Rent591HomeDetailUpdate {
	rdu.mutation.ClearRent591homeDetailPublishs()
	return rdu
}

// RemoveRent591homeDetailPublishIDs removes the "rent591home_detail_publishs" edge to Rent591HomeDetailPublish entities by IDs.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailPublishIDs(ids ...int) *Rent591HomeDetailUpdate {
	rdu.mutation.RemoveRent591homeDetailPublishIDs(ids...)
	return rdu
}

// RemoveRent591homeDetailPublishs removes "rent591home_detail_publishs" edges to Rent591HomeDetailPublish entities.
func (rdu *Rent591HomeDetailUpdate) RemoveRent591homeDetailPublishs(r ...*Rent591HomeDetailPublish) *Rent591HomeDetailUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdu.RemoveRent591homeDetailPublishIDs(ids...)
}

// ClearRent591homeDetailPositionRounds clears the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity.
func (rdu *Rent591HomeDetailUpdate) ClearRent591homeDetailPositionRounds() *Rent591HomeDetailUpdate {
	rdu.mutation.ClearRent591homeDetailPositionRounds()
	return rdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdu *Rent591HomeDetailUpdate) Save(ctx context.Context) (int, error) {
	rdu.defaults()
	return withHooks(ctx, rdu.sqlSave, rdu.mutation, rdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdu *Rent591HomeDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := rdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdu *Rent591HomeDetailUpdate) Exec(ctx context.Context) error {
	_, err := rdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdu *Rent591HomeDetailUpdate) ExecX(ctx context.Context) {
	if err := rdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdu *Rent591HomeDetailUpdate) defaults() {
	if _, ok := rdu.mutation.UpdatedAt(); !ok {
		v := rent591homedetail.UpdateDefaultUpdatedAt()
		rdu.mutation.SetUpdatedAt(v)
	}
}

func (rdu *Rent591HomeDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetail.Table, rent591homedetail.Columns, sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt))
	if ps := rdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdu.mutation.Title(); ok {
		_spec.SetField(rent591homedetail.FieldTitle, field.TypeString, value)
	}
	if value, ok := rdu.mutation.Deposit(); ok {
		_spec.SetField(rent591homedetail.FieldDeposit, field.TypeString, value)
	}
	if value, ok := rdu.mutation.Kind(); ok {
		_spec.SetField(rent591homedetail.FieldKind, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.AddedKind(); ok {
		_spec.AddField(rent591homedetail.FieldKind, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.Relieved(); ok {
		_spec.SetField(rent591homedetail.FieldRelieved, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.AddedRelieved(); ok {
		_spec.AddField(rent591homedetail.FieldRelieved, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.RegionID(); ok {
		_spec.SetField(rent591homedetail.FieldRegionID, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.AddedRegionID(); ok {
		_spec.AddField(rent591homedetail.FieldRegionID, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.SectionID(); ok {
		_spec.SetField(rent591homedetail.FieldSectionID, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.AddedSectionID(); ok {
		_spec.AddField(rent591homedetail.FieldSectionID, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.DealText(); ok {
		_spec.SetField(rent591homedetail.FieldDealText, field.TypeString, value)
	}
	if rdu.mutation.DealTextCleared() {
		_spec.ClearField(rent591homedetail.FieldDealText, field.TypeString)
	}
	if value, ok := rdu.mutation.DealTime(); ok {
		_spec.SetField(rent591homedetail.FieldDealTime, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.AddedDealTime(); ok {
		_spec.AddField(rent591homedetail.FieldDealTime, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.Price(); ok {
		_spec.SetField(rent591homedetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.AddedPrice(); ok {
		_spec.AddField(rent591homedetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := rdu.mutation.PriceUnit(); ok {
		_spec.SetField(rent591homedetail.FieldPriceUnit, field.TypeString, value)
	}
	if value, ok := rdu.mutation.CreatedAt(); ok {
		_spec.SetField(rent591homedetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rdu.mutation.UpdatedAt(); ok {
		_spec.SetField(rent591homedetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if rdu.mutation.Rent591homesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homedetail.Rent591homesTable,
			Columns: []string{rent591homedetail.Rent591homesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.Rent591homesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homedetail.Rent591homesTable,
			Columns: []string{rent591homedetail.Rent591homesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdu.mutation.Rent591homeDetailBreadcrumbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailBreadcrumbsTable,
			Columns: rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbreadcrumb.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RemovedRent591homeDetailBreadcrumbsIDs(); len(nodes) > 0 && !rdu.mutation.Rent591homeDetailBreadcrumbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailBreadcrumbsTable,
			Columns: rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbreadcrumb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.Rent591homeDetailBreadcrumbsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailBreadcrumbsTable,
			Columns: rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbreadcrumb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdu.mutation.Rent591homeDetailShareinfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailShareinfosTable,
			Columns: rent591homedetail.Rent591homeDetailShareinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailshareinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RemovedRent591homeDetailShareinfosIDs(); len(nodes) > 0 && !rdu.mutation.Rent591homeDetailShareinfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailShareinfosTable,
			Columns: rent591homedetail.Rent591homeDetailShareinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailshareinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.Rent591homeDetailShareinfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailShareinfosTable,
			Columns: rent591homedetail.Rent591homeDetailShareinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailshareinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdu.mutation.Rent591homeDetailBrowsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailBrowsesTable,
			Columns: rent591homedetail.Rent591homeDetailBrowsesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbrowse.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RemovedRent591homeDetailBrowsesIDs(); len(nodes) > 0 && !rdu.mutation.Rent591homeDetailBrowsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailBrowsesTable,
			Columns: rent591homedetail.Rent591homeDetailBrowsesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbrowse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.Rent591homeDetailBrowsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailBrowsesTable,
			Columns: rent591homedetail.Rent591homeDetailBrowsesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbrowse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdu.mutation.Rent591homeDetailTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailTagsTable,
			Columns: rent591homedetail.Rent591homeDetailTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailtag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RemovedRent591homeDetailTagsIDs(); len(nodes) > 0 && !rdu.mutation.Rent591homeDetailTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailTagsTable,
			Columns: rent591homedetail.Rent591homeDetailTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.Rent591homeDetailTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailTagsTable,
			Columns: rent591homedetail.Rent591homeDetailTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdu.mutation.Rent591homeDetailNavdatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailNavdatasTable,
			Columns: rent591homedetail.Rent591homeDetailNavdatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailnavdata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RemovedRent591homeDetailNavdatasIDs(); len(nodes) > 0 && !rdu.mutation.Rent591homeDetailNavdatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailNavdatasTable,
			Columns: rent591homedetail.Rent591homeDetailNavdatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailnavdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.Rent591homeDetailNavdatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailNavdatasTable,
			Columns: rent591homedetail.Rent591homeDetailNavdatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailnavdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdu.mutation.Rent591homeDetailInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailInfosTable,
			Columns: rent591homedetail.Rent591homeDetailInfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RemovedRent591homeDetailInfosIDs(); len(nodes) > 0 && !rdu.mutation.Rent591homeDetailInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailInfosTable,
			Columns: rent591homedetail.Rent591homeDetailInfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.Rent591homeDetailInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailInfosTable,
			Columns: rent591homedetail.Rent591homeDetailInfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdu.mutation.Rent591homeDetailPublishsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPublishsTable,
			Columns: rent591homedetail.Rent591homeDetailPublishsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpublish.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.RemovedRent591homeDetailPublishsIDs(); len(nodes) > 0 && !rdu.mutation.Rent591homeDetailPublishsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPublishsTable,
			Columns: rent591homedetail.Rent591homeDetailPublishsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpublish.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.Rent591homeDetailPublishsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPublishsTable,
			Columns: rent591homedetail.Rent591homeDetailPublishsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpublish.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rdu.mutation.Rent591homeDetailPositionRoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPositionRoundsTable,
			Columns: []string{rent591homedetail.Rent591homeDetailPositionRoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionround.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.Rent591homeDetailPositionRoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPositionRoundsTable,
			Columns: []string{rent591homedetail.Rent591homeDetailPositionRoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionround.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdu.mutation.done = true
	return n, nil
}

// Rent591HomeDetailUpdateOne is the builder for updating a single Rent591HomeDetail entity.
type Rent591HomeDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Rent591HomeDetailMutation
}

// SetTitle sets the "title" field.
func (rduo *Rent591HomeDetailUpdateOne) SetTitle(s string) *Rent591HomeDetailUpdateOne {
	rduo.mutation.SetTitle(s)
	return rduo
}

// SetDeposit sets the "deposit" field.
func (rduo *Rent591HomeDetailUpdateOne) SetDeposit(s string) *Rent591HomeDetailUpdateOne {
	rduo.mutation.SetDeposit(s)
	return rduo
}

// SetKind sets the "kind" field.
func (rduo *Rent591HomeDetailUpdateOne) SetKind(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.ResetKind()
	rduo.mutation.SetKind(i)
	return rduo
}

// AddKind adds i to the "kind" field.
func (rduo *Rent591HomeDetailUpdateOne) AddKind(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddKind(i)
	return rduo
}

// SetRelieved sets the "relieved" field.
func (rduo *Rent591HomeDetailUpdateOne) SetRelieved(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.ResetRelieved()
	rduo.mutation.SetRelieved(i)
	return rduo
}

// AddRelieved adds i to the "relieved" field.
func (rduo *Rent591HomeDetailUpdateOne) AddRelieved(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddRelieved(i)
	return rduo
}

// SetRegionID sets the "region_id" field.
func (rduo *Rent591HomeDetailUpdateOne) SetRegionID(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.ResetRegionID()
	rduo.mutation.SetRegionID(i)
	return rduo
}

// AddRegionID adds i to the "region_id" field.
func (rduo *Rent591HomeDetailUpdateOne) AddRegionID(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddRegionID(i)
	return rduo
}

// SetSectionID sets the "section_id" field.
func (rduo *Rent591HomeDetailUpdateOne) SetSectionID(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.ResetSectionID()
	rduo.mutation.SetSectionID(i)
	return rduo
}

// AddSectionID adds i to the "section_id" field.
func (rduo *Rent591HomeDetailUpdateOne) AddSectionID(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddSectionID(i)
	return rduo
}

// SetDealText sets the "deal_text" field.
func (rduo *Rent591HomeDetailUpdateOne) SetDealText(s string) *Rent591HomeDetailUpdateOne {
	rduo.mutation.SetDealText(s)
	return rduo
}

// SetNillableDealText sets the "deal_text" field if the given value is not nil.
func (rduo *Rent591HomeDetailUpdateOne) SetNillableDealText(s *string) *Rent591HomeDetailUpdateOne {
	if s != nil {
		rduo.SetDealText(*s)
	}
	return rduo
}

// ClearDealText clears the value of the "deal_text" field.
func (rduo *Rent591HomeDetailUpdateOne) ClearDealText() *Rent591HomeDetailUpdateOne {
	rduo.mutation.ClearDealText()
	return rduo
}

// SetDealTime sets the "deal_time" field.
func (rduo *Rent591HomeDetailUpdateOne) SetDealTime(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.ResetDealTime()
	rduo.mutation.SetDealTime(i)
	return rduo
}

// AddDealTime adds i to the "deal_time" field.
func (rduo *Rent591HomeDetailUpdateOne) AddDealTime(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddDealTime(i)
	return rduo
}

// SetPrice sets the "price" field.
func (rduo *Rent591HomeDetailUpdateOne) SetPrice(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.ResetPrice()
	rduo.mutation.SetPrice(i)
	return rduo
}

// AddPrice adds i to the "price" field.
func (rduo *Rent591HomeDetailUpdateOne) AddPrice(i int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddPrice(i)
	return rduo
}

// SetPriceUnit sets the "price_unit" field.
func (rduo *Rent591HomeDetailUpdateOne) SetPriceUnit(s string) *Rent591HomeDetailUpdateOne {
	rduo.mutation.SetPriceUnit(s)
	return rduo
}

// SetCreatedAt sets the "created_at" field.
func (rduo *Rent591HomeDetailUpdateOne) SetCreatedAt(t time.Time) *Rent591HomeDetailUpdateOne {
	rduo.mutation.SetCreatedAt(t)
	return rduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rduo *Rent591HomeDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *Rent591HomeDetailUpdateOne {
	if t != nil {
		rduo.SetCreatedAt(*t)
	}
	return rduo
}

// SetUpdatedAt sets the "updated_at" field.
func (rduo *Rent591HomeDetailUpdateOne) SetUpdatedAt(t time.Time) *Rent591HomeDetailUpdateOne {
	rduo.mutation.SetUpdatedAt(t)
	return rduo
}

// SetRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID.
func (rduo *Rent591HomeDetailUpdateOne) SetRent591homesID(id int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.SetRent591homesID(id)
	return rduo
}

// SetNillableRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID if the given value is not nil.
func (rduo *Rent591HomeDetailUpdateOne) SetNillableRent591homesID(id *int) *Rent591HomeDetailUpdateOne {
	if id != nil {
		rduo = rduo.SetRent591homesID(*id)
	}
	return rduo
}

// SetRent591homes sets the "rent591homes" edge to the Rent591Home entity.
func (rduo *Rent591HomeDetailUpdateOne) SetRent591homes(r *Rent591Home) *Rent591HomeDetailUpdateOne {
	return rduo.SetRent591homesID(r.ID)
}

// AddRent591homeDetailBreadcrumbIDs adds the "rent591home_detail_breadcrumbs" edge to the Rent591HomeDetailBreadcrumb entity by IDs.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailBreadcrumbIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddRent591homeDetailBreadcrumbIDs(ids...)
	return rduo
}

// AddRent591homeDetailBreadcrumbs adds the "rent591home_detail_breadcrumbs" edges to the Rent591HomeDetailBreadcrumb entity.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailBreadcrumbs(r ...*Rent591HomeDetailBreadcrumb) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.AddRent591homeDetailBreadcrumbIDs(ids...)
}

// AddRent591homeDetailShareinfoIDs adds the "rent591home_detail_shareinfos" edge to the Rent591HomeDetailShareInfo entity by IDs.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailShareinfoIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddRent591homeDetailShareinfoIDs(ids...)
	return rduo
}

// AddRent591homeDetailShareinfos adds the "rent591home_detail_shareinfos" edges to the Rent591HomeDetailShareInfo entity.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailShareinfos(r ...*Rent591HomeDetailShareInfo) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.AddRent591homeDetailShareinfoIDs(ids...)
}

// AddRent591homeDetailBrowseIDs adds the "rent591home_detail_browses" edge to the Rent591HomeDetailBrowse entity by IDs.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailBrowseIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddRent591homeDetailBrowseIDs(ids...)
	return rduo
}

// AddRent591homeDetailBrowses adds the "rent591home_detail_browses" edges to the Rent591HomeDetailBrowse entity.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailBrowses(r ...*Rent591HomeDetailBrowse) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.AddRent591homeDetailBrowseIDs(ids...)
}

// AddRent591homeDetailTagIDs adds the "rent591home_detail_tags" edge to the Rent591HomeDetailTag entity by IDs.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailTagIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddRent591homeDetailTagIDs(ids...)
	return rduo
}

// AddRent591homeDetailTags adds the "rent591home_detail_tags" edges to the Rent591HomeDetailTag entity.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailTags(r ...*Rent591HomeDetailTag) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.AddRent591homeDetailTagIDs(ids...)
}

// AddRent591homeDetailNavdataIDs adds the "rent591home_detail_navdatas" edge to the Rent591HomeDetailNavData entity by IDs.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailNavdataIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddRent591homeDetailNavdataIDs(ids...)
	return rduo
}

// AddRent591homeDetailNavdatas adds the "rent591home_detail_navdatas" edges to the Rent591HomeDetailNavData entity.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailNavdatas(r ...*Rent591HomeDetailNavData) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.AddRent591homeDetailNavdataIDs(ids...)
}

// AddRent591homeDetailInfoIDs adds the "rent591home_detail_infos" edge to the Rent591HomeDetailInfo entity by IDs.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailInfoIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddRent591homeDetailInfoIDs(ids...)
	return rduo
}

// AddRent591homeDetailInfos adds the "rent591home_detail_infos" edges to the Rent591HomeDetailInfo entity.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailInfos(r ...*Rent591HomeDetailInfo) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.AddRent591homeDetailInfoIDs(ids...)
}

// AddRent591homeDetailPublishIDs adds the "rent591home_detail_publishs" edge to the Rent591HomeDetailPublish entity by IDs.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailPublishIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.AddRent591homeDetailPublishIDs(ids...)
	return rduo
}

// AddRent591homeDetailPublishs adds the "rent591home_detail_publishs" edges to the Rent591HomeDetailPublish entity.
func (rduo *Rent591HomeDetailUpdateOne) AddRent591homeDetailPublishs(r ...*Rent591HomeDetailPublish) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.AddRent591homeDetailPublishIDs(ids...)
}

// SetRent591homeDetailPositionRoundsID sets the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity by ID.
func (rduo *Rent591HomeDetailUpdateOne) SetRent591homeDetailPositionRoundsID(id int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.SetRent591homeDetailPositionRoundsID(id)
	return rduo
}

// SetNillableRent591homeDetailPositionRoundsID sets the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity by ID if the given value is not nil.
func (rduo *Rent591HomeDetailUpdateOne) SetNillableRent591homeDetailPositionRoundsID(id *int) *Rent591HomeDetailUpdateOne {
	if id != nil {
		rduo = rduo.SetRent591homeDetailPositionRoundsID(*id)
	}
	return rduo
}

// SetRent591homeDetailPositionRounds sets the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity.
func (rduo *Rent591HomeDetailUpdateOne) SetRent591homeDetailPositionRounds(r *Rent591HomeDetailPositionRound) *Rent591HomeDetailUpdateOne {
	return rduo.SetRent591homeDetailPositionRoundsID(r.ID)
}

// Mutation returns the Rent591HomeDetailMutation object of the builder.
func (rduo *Rent591HomeDetailUpdateOne) Mutation() *Rent591HomeDetailMutation {
	return rduo.mutation
}

// ClearRent591homes clears the "rent591homes" edge to the Rent591Home entity.
func (rduo *Rent591HomeDetailUpdateOne) ClearRent591homes() *Rent591HomeDetailUpdateOne {
	rduo.mutation.ClearRent591homes()
	return rduo
}

// ClearRent591homeDetailBreadcrumbs clears all "rent591home_detail_breadcrumbs" edges to the Rent591HomeDetailBreadcrumb entity.
func (rduo *Rent591HomeDetailUpdateOne) ClearRent591homeDetailBreadcrumbs() *Rent591HomeDetailUpdateOne {
	rduo.mutation.ClearRent591homeDetailBreadcrumbs()
	return rduo
}

// RemoveRent591homeDetailBreadcrumbIDs removes the "rent591home_detail_breadcrumbs" edge to Rent591HomeDetailBreadcrumb entities by IDs.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailBreadcrumbIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.RemoveRent591homeDetailBreadcrumbIDs(ids...)
	return rduo
}

// RemoveRent591homeDetailBreadcrumbs removes "rent591home_detail_breadcrumbs" edges to Rent591HomeDetailBreadcrumb entities.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailBreadcrumbs(r ...*Rent591HomeDetailBreadcrumb) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.RemoveRent591homeDetailBreadcrumbIDs(ids...)
}

// ClearRent591homeDetailShareinfos clears all "rent591home_detail_shareinfos" edges to the Rent591HomeDetailShareInfo entity.
func (rduo *Rent591HomeDetailUpdateOne) ClearRent591homeDetailShareinfos() *Rent591HomeDetailUpdateOne {
	rduo.mutation.ClearRent591homeDetailShareinfos()
	return rduo
}

// RemoveRent591homeDetailShareinfoIDs removes the "rent591home_detail_shareinfos" edge to Rent591HomeDetailShareInfo entities by IDs.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailShareinfoIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.RemoveRent591homeDetailShareinfoIDs(ids...)
	return rduo
}

// RemoveRent591homeDetailShareinfos removes "rent591home_detail_shareinfos" edges to Rent591HomeDetailShareInfo entities.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailShareinfos(r ...*Rent591HomeDetailShareInfo) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.RemoveRent591homeDetailShareinfoIDs(ids...)
}

// ClearRent591homeDetailBrowses clears all "rent591home_detail_browses" edges to the Rent591HomeDetailBrowse entity.
func (rduo *Rent591HomeDetailUpdateOne) ClearRent591homeDetailBrowses() *Rent591HomeDetailUpdateOne {
	rduo.mutation.ClearRent591homeDetailBrowses()
	return rduo
}

// RemoveRent591homeDetailBrowseIDs removes the "rent591home_detail_browses" edge to Rent591HomeDetailBrowse entities by IDs.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailBrowseIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.RemoveRent591homeDetailBrowseIDs(ids...)
	return rduo
}

// RemoveRent591homeDetailBrowses removes "rent591home_detail_browses" edges to Rent591HomeDetailBrowse entities.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailBrowses(r ...*Rent591HomeDetailBrowse) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.RemoveRent591homeDetailBrowseIDs(ids...)
}

// ClearRent591homeDetailTags clears all "rent591home_detail_tags" edges to the Rent591HomeDetailTag entity.
func (rduo *Rent591HomeDetailUpdateOne) ClearRent591homeDetailTags() *Rent591HomeDetailUpdateOne {
	rduo.mutation.ClearRent591homeDetailTags()
	return rduo
}

// RemoveRent591homeDetailTagIDs removes the "rent591home_detail_tags" edge to Rent591HomeDetailTag entities by IDs.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailTagIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.RemoveRent591homeDetailTagIDs(ids...)
	return rduo
}

// RemoveRent591homeDetailTags removes "rent591home_detail_tags" edges to Rent591HomeDetailTag entities.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailTags(r ...*Rent591HomeDetailTag) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.RemoveRent591homeDetailTagIDs(ids...)
}

// ClearRent591homeDetailNavdatas clears all "rent591home_detail_navdatas" edges to the Rent591HomeDetailNavData entity.
func (rduo *Rent591HomeDetailUpdateOne) ClearRent591homeDetailNavdatas() *Rent591HomeDetailUpdateOne {
	rduo.mutation.ClearRent591homeDetailNavdatas()
	return rduo
}

// RemoveRent591homeDetailNavdataIDs removes the "rent591home_detail_navdatas" edge to Rent591HomeDetailNavData entities by IDs.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailNavdataIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.RemoveRent591homeDetailNavdataIDs(ids...)
	return rduo
}

// RemoveRent591homeDetailNavdatas removes "rent591home_detail_navdatas" edges to Rent591HomeDetailNavData entities.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailNavdatas(r ...*Rent591HomeDetailNavData) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.RemoveRent591homeDetailNavdataIDs(ids...)
}

// ClearRent591homeDetailInfos clears all "rent591home_detail_infos" edges to the Rent591HomeDetailInfo entity.
func (rduo *Rent591HomeDetailUpdateOne) ClearRent591homeDetailInfos() *Rent591HomeDetailUpdateOne {
	rduo.mutation.ClearRent591homeDetailInfos()
	return rduo
}

// RemoveRent591homeDetailInfoIDs removes the "rent591home_detail_infos" edge to Rent591HomeDetailInfo entities by IDs.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailInfoIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.RemoveRent591homeDetailInfoIDs(ids...)
	return rduo
}

// RemoveRent591homeDetailInfos removes "rent591home_detail_infos" edges to Rent591HomeDetailInfo entities.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailInfos(r ...*Rent591HomeDetailInfo) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.RemoveRent591homeDetailInfoIDs(ids...)
}

// ClearRent591homeDetailPublishs clears all "rent591home_detail_publishs" edges to the Rent591HomeDetailPublish entity.
func (rduo *Rent591HomeDetailUpdateOne) ClearRent591homeDetailPublishs() *Rent591HomeDetailUpdateOne {
	rduo.mutation.ClearRent591homeDetailPublishs()
	return rduo
}

// RemoveRent591homeDetailPublishIDs removes the "rent591home_detail_publishs" edge to Rent591HomeDetailPublish entities by IDs.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailPublishIDs(ids ...int) *Rent591HomeDetailUpdateOne {
	rduo.mutation.RemoveRent591homeDetailPublishIDs(ids...)
	return rduo
}

// RemoveRent591homeDetailPublishs removes "rent591home_detail_publishs" edges to Rent591HomeDetailPublish entities.
func (rduo *Rent591HomeDetailUpdateOne) RemoveRent591homeDetailPublishs(r ...*Rent591HomeDetailPublish) *Rent591HomeDetailUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rduo.RemoveRent591homeDetailPublishIDs(ids...)
}

// ClearRent591homeDetailPositionRounds clears the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity.
func (rduo *Rent591HomeDetailUpdateOne) ClearRent591homeDetailPositionRounds() *Rent591HomeDetailUpdateOne {
	rduo.mutation.ClearRent591homeDetailPositionRounds()
	return rduo
}

// Where appends a list predicates to the Rent591HomeDetailUpdate builder.
func (rduo *Rent591HomeDetailUpdateOne) Where(ps ...predicate.Rent591HomeDetail) *Rent591HomeDetailUpdateOne {
	rduo.mutation.Where(ps...)
	return rduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rduo *Rent591HomeDetailUpdateOne) Select(field string, fields ...string) *Rent591HomeDetailUpdateOne {
	rduo.fields = append([]string{field}, fields...)
	return rduo
}

// Save executes the query and returns the updated Rent591HomeDetail entity.
func (rduo *Rent591HomeDetailUpdateOne) Save(ctx context.Context) (*Rent591HomeDetail, error) {
	rduo.defaults()
	return withHooks(ctx, rduo.sqlSave, rduo.mutation, rduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rduo *Rent591HomeDetailUpdateOne) SaveX(ctx context.Context) *Rent591HomeDetail {
	node, err := rduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rduo *Rent591HomeDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := rduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rduo *Rent591HomeDetailUpdateOne) ExecX(ctx context.Context) {
	if err := rduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rduo *Rent591HomeDetailUpdateOne) defaults() {
	if _, ok := rduo.mutation.UpdatedAt(); !ok {
		v := rent591homedetail.UpdateDefaultUpdatedAt()
		rduo.mutation.SetUpdatedAt(v)
	}
}

func (rduo *Rent591HomeDetailUpdateOne) sqlSave(ctx context.Context) (_node *Rent591HomeDetail, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetail.Table, rent591homedetail.Columns, sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt))
	id, ok := rduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rent591HomeDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rent591homedetail.FieldID)
		for _, f := range fields {
			if !rent591homedetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rent591homedetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rduo.mutation.Title(); ok {
		_spec.SetField(rent591homedetail.FieldTitle, field.TypeString, value)
	}
	if value, ok := rduo.mutation.Deposit(); ok {
		_spec.SetField(rent591homedetail.FieldDeposit, field.TypeString, value)
	}
	if value, ok := rduo.mutation.Kind(); ok {
		_spec.SetField(rent591homedetail.FieldKind, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.AddedKind(); ok {
		_spec.AddField(rent591homedetail.FieldKind, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.Relieved(); ok {
		_spec.SetField(rent591homedetail.FieldRelieved, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.AddedRelieved(); ok {
		_spec.AddField(rent591homedetail.FieldRelieved, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.RegionID(); ok {
		_spec.SetField(rent591homedetail.FieldRegionID, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.AddedRegionID(); ok {
		_spec.AddField(rent591homedetail.FieldRegionID, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.SectionID(); ok {
		_spec.SetField(rent591homedetail.FieldSectionID, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.AddedSectionID(); ok {
		_spec.AddField(rent591homedetail.FieldSectionID, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.DealText(); ok {
		_spec.SetField(rent591homedetail.FieldDealText, field.TypeString, value)
	}
	if rduo.mutation.DealTextCleared() {
		_spec.ClearField(rent591homedetail.FieldDealText, field.TypeString)
	}
	if value, ok := rduo.mutation.DealTime(); ok {
		_spec.SetField(rent591homedetail.FieldDealTime, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.AddedDealTime(); ok {
		_spec.AddField(rent591homedetail.FieldDealTime, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.Price(); ok {
		_spec.SetField(rent591homedetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.AddedPrice(); ok {
		_spec.AddField(rent591homedetail.FieldPrice, field.TypeInt, value)
	}
	if value, ok := rduo.mutation.PriceUnit(); ok {
		_spec.SetField(rent591homedetail.FieldPriceUnit, field.TypeString, value)
	}
	if value, ok := rduo.mutation.CreatedAt(); ok {
		_spec.SetField(rent591homedetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := rduo.mutation.UpdatedAt(); ok {
		_spec.SetField(rent591homedetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if rduo.mutation.Rent591homesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homedetail.Rent591homesTable,
			Columns: []string{rent591homedetail.Rent591homesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.Rent591homesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homedetail.Rent591homesTable,
			Columns: []string{rent591homedetail.Rent591homesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rduo.mutation.Rent591homeDetailBreadcrumbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailBreadcrumbsTable,
			Columns: rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbreadcrumb.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RemovedRent591homeDetailBreadcrumbsIDs(); len(nodes) > 0 && !rduo.mutation.Rent591homeDetailBreadcrumbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailBreadcrumbsTable,
			Columns: rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbreadcrumb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.Rent591homeDetailBreadcrumbsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailBreadcrumbsTable,
			Columns: rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbreadcrumb.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rduo.mutation.Rent591homeDetailShareinfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailShareinfosTable,
			Columns: rent591homedetail.Rent591homeDetailShareinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailshareinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RemovedRent591homeDetailShareinfosIDs(); len(nodes) > 0 && !rduo.mutation.Rent591homeDetailShareinfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailShareinfosTable,
			Columns: rent591homedetail.Rent591homeDetailShareinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailshareinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.Rent591homeDetailShareinfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailShareinfosTable,
			Columns: rent591homedetail.Rent591homeDetailShareinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailshareinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rduo.mutation.Rent591homeDetailBrowsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailBrowsesTable,
			Columns: rent591homedetail.Rent591homeDetailBrowsesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbrowse.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RemovedRent591homeDetailBrowsesIDs(); len(nodes) > 0 && !rduo.mutation.Rent591homeDetailBrowsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailBrowsesTable,
			Columns: rent591homedetail.Rent591homeDetailBrowsesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbrowse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.Rent591homeDetailBrowsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailBrowsesTable,
			Columns: rent591homedetail.Rent591homeDetailBrowsesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailbrowse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rduo.mutation.Rent591homeDetailTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailTagsTable,
			Columns: rent591homedetail.Rent591homeDetailTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailtag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RemovedRent591homeDetailTagsIDs(); len(nodes) > 0 && !rduo.mutation.Rent591homeDetailTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailTagsTable,
			Columns: rent591homedetail.Rent591homeDetailTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.Rent591homeDetailTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailTagsTable,
			Columns: rent591homedetail.Rent591homeDetailTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rduo.mutation.Rent591homeDetailNavdatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailNavdatasTable,
			Columns: rent591homedetail.Rent591homeDetailNavdatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailnavdata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RemovedRent591homeDetailNavdatasIDs(); len(nodes) > 0 && !rduo.mutation.Rent591homeDetailNavdatasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailNavdatasTable,
			Columns: rent591homedetail.Rent591homeDetailNavdatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailnavdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.Rent591homeDetailNavdatasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailNavdatasTable,
			Columns: rent591homedetail.Rent591homeDetailNavdatasPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailnavdata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rduo.mutation.Rent591homeDetailInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailInfosTable,
			Columns: rent591homedetail.Rent591homeDetailInfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RemovedRent591homeDetailInfosIDs(); len(nodes) > 0 && !rduo.mutation.Rent591homeDetailInfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailInfosTable,
			Columns: rent591homedetail.Rent591homeDetailInfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.Rent591homeDetailInfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591homedetail.Rent591homeDetailInfosTable,
			Columns: rent591homedetail.Rent591homeDetailInfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rduo.mutation.Rent591homeDetailPublishsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPublishsTable,
			Columns: rent591homedetail.Rent591homeDetailPublishsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpublish.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.RemovedRent591homeDetailPublishsIDs(); len(nodes) > 0 && !rduo.mutation.Rent591homeDetailPublishsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPublishsTable,
			Columns: rent591homedetail.Rent591homeDetailPublishsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpublish.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.Rent591homeDetailPublishsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPublishsTable,
			Columns: rent591homedetail.Rent591homeDetailPublishsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpublish.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rduo.mutation.Rent591homeDetailPositionRoundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPositionRoundsTable,
			Columns: []string{rent591homedetail.Rent591homeDetailPositionRoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionround.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.Rent591homeDetailPositionRoundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591homedetail.Rent591homeDetailPositionRoundsTable,
			Columns: []string{rent591homedetail.Rent591homeDetailPositionRoundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetailpositionround.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rent591HomeDetail{config: rduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rduo.mutation.done = true
	return _node, nil
}

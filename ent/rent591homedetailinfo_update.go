// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailinfo"
)

// Rent591HomeDetailInfoUpdate is the builder for updating Rent591HomeDetailInfo entities.
type Rent591HomeDetailInfoUpdate struct {
	config
	hooks    []Hook
	mutation *Rent591HomeDetailInfoMutation
}

// Where appends a list predicates to the Rent591HomeDetailInfoUpdate builder.
func (rdiu *Rent591HomeDetailInfoUpdate) Where(ps ...predicate.Rent591HomeDetailInfo) *Rent591HomeDetailInfoUpdate {
	rdiu.mutation.Where(ps...)
	return rdiu
}

// SetName sets the "name" field.
func (rdiu *Rent591HomeDetailInfoUpdate) SetName(s string) *Rent591HomeDetailInfoUpdate {
	rdiu.mutation.SetName(s)
	return rdiu
}

// SetValue sets the "value" field.
func (rdiu *Rent591HomeDetailInfoUpdate) SetValue(s string) *Rent591HomeDetailInfoUpdate {
	rdiu.mutation.SetValue(s)
	return rdiu
}

// SetKey sets the "key" field.
func (rdiu *Rent591HomeDetailInfoUpdate) SetKey(i int) *Rent591HomeDetailInfoUpdate {
	rdiu.mutation.ResetKey()
	rdiu.mutation.SetKey(i)
	return rdiu
}

// AddKey adds i to the "key" field.
func (rdiu *Rent591HomeDetailInfoUpdate) AddKey(i int) *Rent591HomeDetailInfoUpdate {
	rdiu.mutation.AddKey(i)
	return rdiu
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (rdiu *Rent591HomeDetailInfoUpdate) AddRent591homeDetailIDs(ids ...int) *Rent591HomeDetailInfoUpdate {
	rdiu.mutation.AddRent591homeDetailIDs(ids...)
	return rdiu
}

// AddRent591homeDetails adds the "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdiu *Rent591HomeDetailInfoUpdate) AddRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailInfoUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdiu.AddRent591homeDetailIDs(ids...)
}

// Mutation returns the Rent591HomeDetailInfoMutation object of the builder.
func (rdiu *Rent591HomeDetailInfoUpdate) Mutation() *Rent591HomeDetailInfoMutation {
	return rdiu.mutation
}

// ClearRent591homeDetails clears all "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdiu *Rent591HomeDetailInfoUpdate) ClearRent591homeDetails() *Rent591HomeDetailInfoUpdate {
	rdiu.mutation.ClearRent591homeDetails()
	return rdiu
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to Rent591HomeDetail entities by IDs.
func (rdiu *Rent591HomeDetailInfoUpdate) RemoveRent591homeDetailIDs(ids ...int) *Rent591HomeDetailInfoUpdate {
	rdiu.mutation.RemoveRent591homeDetailIDs(ids...)
	return rdiu
}

// RemoveRent591homeDetails removes "rent591home_details" edges to Rent591HomeDetail entities.
func (rdiu *Rent591HomeDetailInfoUpdate) RemoveRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailInfoUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdiu.RemoveRent591homeDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdiu *Rent591HomeDetailInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rdiu.sqlSave, rdiu.mutation, rdiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdiu *Rent591HomeDetailInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := rdiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdiu *Rent591HomeDetailInfoUpdate) Exec(ctx context.Context) error {
	_, err := rdiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdiu *Rent591HomeDetailInfoUpdate) ExecX(ctx context.Context) {
	if err := rdiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdiu *Rent591HomeDetailInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetailinfo.Table, rent591homedetailinfo.Columns, sqlgraph.NewFieldSpec(rent591homedetailinfo.FieldID, field.TypeInt))
	if ps := rdiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdiu.mutation.Name(); ok {
		_spec.SetField(rent591homedetailinfo.FieldName, field.TypeString, value)
	}
	if value, ok := rdiu.mutation.Value(); ok {
		_spec.SetField(rent591homedetailinfo.FieldValue, field.TypeString, value)
	}
	if value, ok := rdiu.mutation.Key(); ok {
		_spec.SetField(rent591homedetailinfo.FieldKey, field.TypeInt, value)
	}
	if value, ok := rdiu.mutation.AddedKey(); ok {
		_spec.AddField(rent591homedetailinfo.FieldKey, field.TypeInt, value)
	}
	if rdiu.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdiu.mutation.RemovedRent591homeDetailsIDs(); len(nodes) > 0 && !rdiu.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdiu.mutation.Rent591homeDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rdiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetailinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdiu.mutation.done = true
	return n, nil
}

// Rent591HomeDetailInfoUpdateOne is the builder for updating a single Rent591HomeDetailInfo entity.
type Rent591HomeDetailInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Rent591HomeDetailInfoMutation
}

// SetName sets the "name" field.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) SetName(s string) *Rent591HomeDetailInfoUpdateOne {
	rdiuo.mutation.SetName(s)
	return rdiuo
}

// SetValue sets the "value" field.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) SetValue(s string) *Rent591HomeDetailInfoUpdateOne {
	rdiuo.mutation.SetValue(s)
	return rdiuo
}

// SetKey sets the "key" field.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) SetKey(i int) *Rent591HomeDetailInfoUpdateOne {
	rdiuo.mutation.ResetKey()
	rdiuo.mutation.SetKey(i)
	return rdiuo
}

// AddKey adds i to the "key" field.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) AddKey(i int) *Rent591HomeDetailInfoUpdateOne {
	rdiuo.mutation.AddKey(i)
	return rdiuo
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) AddRent591homeDetailIDs(ids ...int) *Rent591HomeDetailInfoUpdateOne {
	rdiuo.mutation.AddRent591homeDetailIDs(ids...)
	return rdiuo
}

// AddRent591homeDetails adds the "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) AddRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailInfoUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdiuo.AddRent591homeDetailIDs(ids...)
}

// Mutation returns the Rent591HomeDetailInfoMutation object of the builder.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) Mutation() *Rent591HomeDetailInfoMutation {
	return rdiuo.mutation
}

// ClearRent591homeDetails clears all "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) ClearRent591homeDetails() *Rent591HomeDetailInfoUpdateOne {
	rdiuo.mutation.ClearRent591homeDetails()
	return rdiuo
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to Rent591HomeDetail entities by IDs.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) RemoveRent591homeDetailIDs(ids ...int) *Rent591HomeDetailInfoUpdateOne {
	rdiuo.mutation.RemoveRent591homeDetailIDs(ids...)
	return rdiuo
}

// RemoveRent591homeDetails removes "rent591home_details" edges to Rent591HomeDetail entities.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) RemoveRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailInfoUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdiuo.RemoveRent591homeDetailIDs(ids...)
}

// Where appends a list predicates to the Rent591HomeDetailInfoUpdate builder.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) Where(ps ...predicate.Rent591HomeDetailInfo) *Rent591HomeDetailInfoUpdateOne {
	rdiuo.mutation.Where(ps...)
	return rdiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) Select(field string, fields ...string) *Rent591HomeDetailInfoUpdateOne {
	rdiuo.fields = append([]string{field}, fields...)
	return rdiuo
}

// Save executes the query and returns the updated Rent591HomeDetailInfo entity.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) Save(ctx context.Context) (*Rent591HomeDetailInfo, error) {
	return withHooks(ctx, rdiuo.sqlSave, rdiuo.mutation, rdiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) SaveX(ctx context.Context) *Rent591HomeDetailInfo {
	node, err := rdiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := rdiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdiuo *Rent591HomeDetailInfoUpdateOne) ExecX(ctx context.Context) {
	if err := rdiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdiuo *Rent591HomeDetailInfoUpdateOne) sqlSave(ctx context.Context) (_node *Rent591HomeDetailInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetailinfo.Table, rent591homedetailinfo.Columns, sqlgraph.NewFieldSpec(rent591homedetailinfo.FieldID, field.TypeInt))
	id, ok := rdiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rent591HomeDetailInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rdiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rent591homedetailinfo.FieldID)
		for _, f := range fields {
			if !rent591homedetailinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rent591homedetailinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rdiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdiuo.mutation.Name(); ok {
		_spec.SetField(rent591homedetailinfo.FieldName, field.TypeString, value)
	}
	if value, ok := rdiuo.mutation.Value(); ok {
		_spec.SetField(rent591homedetailinfo.FieldValue, field.TypeString, value)
	}
	if value, ok := rdiuo.mutation.Key(); ok {
		_spec.SetField(rent591homedetailinfo.FieldKey, field.TypeInt, value)
	}
	if value, ok := rdiuo.mutation.AddedKey(); ok {
		_spec.AddField(rent591homedetailinfo.FieldKey, field.TypeInt, value)
	}
	if rdiuo.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdiuo.mutation.RemovedRent591homeDetailsIDs(); len(nodes) > 0 && !rdiuo.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdiuo.mutation.Rent591homeDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailinfo.Rent591homeDetailsTable,
			Columns: rent591homedetailinfo.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rent591HomeDetailInfo{config: rdiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rdiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetailinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rdiuo.mutation.done = true
	return _node, nil
}

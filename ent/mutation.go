// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591home"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbreadcrumb"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbrowse"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailinfo"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailnavdata"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionround"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionrounddata"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionrounddatachildren"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpublish"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailshareinfo"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailtag"
	"github.com/programzheng/rent-house-crawler/ent/rent591homesurrounding"
	"github.com/programzheng/rent-house-crawler/ent/rent591hometag"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRent591Home                                = "Rent591Home"
	TypeRent591HomeDetail                          = "Rent591HomeDetail"
	TypeRent591HomeDetailBreadcrumb                = "Rent591HomeDetailBreadcrumb"
	TypeRent591HomeDetailBrowse                    = "Rent591HomeDetailBrowse"
	TypeRent591HomeDetailInfo                      = "Rent591HomeDetailInfo"
	TypeRent591HomeDetailNavData                   = "Rent591HomeDetailNavData"
	TypeRent591HomeDetailPositionRound             = "Rent591HomeDetailPositionRound"
	TypeRent591HomeDetailPositionRoundData         = "Rent591HomeDetailPositionRoundData"
	TypeRent591HomeDetailPositionRoundDataChildren = "Rent591HomeDetailPositionRoundDataChildren"
	TypeRent591HomeDetailPublish                   = "Rent591HomeDetailPublish"
	TypeRent591HomeDetailShareInfo                 = "Rent591HomeDetailShareInfo"
	TypeRent591HomeDetailTag                       = "Rent591HomeDetailTag"
	TypeRent591HomeSurrounding                     = "Rent591HomeSurrounding"
	TypeRent591HomeTag                             = "Rent591HomeTag"
)

// Rent591HomeMutation represents an operation that mutates the Rent591Home nodes in the graph.
type Rent591HomeMutation struct {
	config
	op                              Op
	typ                             string
	id                              *int
	title                           *string
	_type                           *int
	add_type                        *int
	post_id                         *int
	addpost_id                      *int
	kind_name                       *string
	room_str                        *string
	floor_str                       *string
	community                       *string
	price                           *int
	addprice                        *int
	price_unit                      *string
	photo_list                      *[]string
	appendphoto_list                []string
	region_name                     *string
	section_name                    *string
	street_name                     *string
	location                        *string
	area                            *string
	role_name                       *string
	contact                         *string
	refresh_time                    *string
	yesterday_hit                   *int
	addyesterday_hit                *int
	is_vip                          *int
	addis_vip                       *int
	is_combine                      *int
	addis_combine                   *int
	hurry                           *int
	addhurry                        *int
	is_social                       *int
	addis_social                    *int
	discount_price_str              *string
	cases_id                        *int
	addcases_id                     *int
	is_video                        *int
	addis_video                     *int
	preferred                       *int
	addpreferred                    *int
	cid                             *int
	addcid                          *int
	created_at                      *time.Time
	updated_at                      *time.Time
	clearedFields                   map[string]struct{}
	rent591home_tags                map[int]struct{}
	removedrent591home_tags         map[int]struct{}
	clearedrent591home_tags         bool
	rent591home_surroundings        *int
	clearedrent591home_surroundings bool
	rent591home_details             *int
	clearedrent591home_details      bool
	done                            bool
	oldValue                        func(context.Context) (*Rent591Home, error)
	predicates                      []predicate.Rent591Home
}

var _ ent.Mutation = (*Rent591HomeMutation)(nil)

// rent591homeOption allows management of the mutation configuration using functional options.
type rent591homeOption func(*Rent591HomeMutation)

// newRent591HomeMutation creates new mutation for the Rent591Home entity.
func newRent591HomeMutation(c config, op Op, opts ...rent591homeOption) *Rent591HomeMutation {
	m := &Rent591HomeMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591Home,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeID sets the ID field of the mutation.
func withRent591HomeID(id int) rent591homeOption {
	return func(m *Rent591HomeMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591Home
		)
		m.oldValue = func(ctx context.Context) (*Rent591Home, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591Home.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591Home sets the old Rent591Home of the mutation.
func withRent591Home(node *Rent591Home) rent591homeOption {
	return func(m *Rent591HomeMutation) {
		m.oldValue = func(context.Context) (*Rent591Home, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591Home.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *Rent591HomeMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *Rent591HomeMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *Rent591HomeMutation) ResetTitle() {
	m.title = nil
}

// SetType sets the "type" field.
func (m *Rent591HomeMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *Rent591HomeMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *Rent591HomeMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *Rent591HomeMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *Rent591HomeMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetPostID sets the "post_id" field.
func (m *Rent591HomeMutation) SetPostID(i int) {
	m.post_id = &i
	m.addpost_id = nil
}

// PostID returns the value of the "post_id" field in the mutation.
func (m *Rent591HomeMutation) PostID() (r int, exists bool) {
	v := m.post_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPostID returns the old "post_id" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldPostID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostID: %w", err)
	}
	return oldValue.PostID, nil
}

// AddPostID adds i to the "post_id" field.
func (m *Rent591HomeMutation) AddPostID(i int) {
	if m.addpost_id != nil {
		*m.addpost_id += i
	} else {
		m.addpost_id = &i
	}
}

// AddedPostID returns the value that was added to the "post_id" field in this mutation.
func (m *Rent591HomeMutation) AddedPostID() (r int, exists bool) {
	v := m.addpost_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPostID resets all changes to the "post_id" field.
func (m *Rent591HomeMutation) ResetPostID() {
	m.post_id = nil
	m.addpost_id = nil
}

// SetKindName sets the "kind_name" field.
func (m *Rent591HomeMutation) SetKindName(s string) {
	m.kind_name = &s
}

// KindName returns the value of the "kind_name" field in the mutation.
func (m *Rent591HomeMutation) KindName() (r string, exists bool) {
	v := m.kind_name
	if v == nil {
		return
	}
	return *v, true
}

// OldKindName returns the old "kind_name" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldKindName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKindName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKindName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKindName: %w", err)
	}
	return oldValue.KindName, nil
}

// ResetKindName resets all changes to the "kind_name" field.
func (m *Rent591HomeMutation) ResetKindName() {
	m.kind_name = nil
}

// SetRoomStr sets the "room_str" field.
func (m *Rent591HomeMutation) SetRoomStr(s string) {
	m.room_str = &s
}

// RoomStr returns the value of the "room_str" field in the mutation.
func (m *Rent591HomeMutation) RoomStr() (r string, exists bool) {
	v := m.room_str
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomStr returns the old "room_str" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldRoomStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoomStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoomStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomStr: %w", err)
	}
	return oldValue.RoomStr, nil
}

// ResetRoomStr resets all changes to the "room_str" field.
func (m *Rent591HomeMutation) ResetRoomStr() {
	m.room_str = nil
}

// SetFloorStr sets the "floor_str" field.
func (m *Rent591HomeMutation) SetFloorStr(s string) {
	m.floor_str = &s
}

// FloorStr returns the value of the "floor_str" field in the mutation.
func (m *Rent591HomeMutation) FloorStr() (r string, exists bool) {
	v := m.floor_str
	if v == nil {
		return
	}
	return *v, true
}

// OldFloorStr returns the old "floor_str" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldFloorStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFloorStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFloorStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFloorStr: %w", err)
	}
	return oldValue.FloorStr, nil
}

// ResetFloorStr resets all changes to the "floor_str" field.
func (m *Rent591HomeMutation) ResetFloorStr() {
	m.floor_str = nil
}

// SetCommunity sets the "community" field.
func (m *Rent591HomeMutation) SetCommunity(s string) {
	m.community = &s
}

// Community returns the value of the "community" field in the mutation.
func (m *Rent591HomeMutation) Community() (r string, exists bool) {
	v := m.community
	if v == nil {
		return
	}
	return *v, true
}

// OldCommunity returns the old "community" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldCommunity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommunity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommunity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommunity: %w", err)
	}
	return oldValue.Community, nil
}

// ResetCommunity resets all changes to the "community" field.
func (m *Rent591HomeMutation) ResetCommunity() {
	m.community = nil
}

// SetPrice sets the "price" field.
func (m *Rent591HomeMutation) SetPrice(i int) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *Rent591HomeMutation) Price() (r int, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *Rent591HomeMutation) AddPrice(i int) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *Rent591HomeMutation) AddedPrice() (r int, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *Rent591HomeMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetPriceUnit sets the "price_unit" field.
func (m *Rent591HomeMutation) SetPriceUnit(s string) {
	m.price_unit = &s
}

// PriceUnit returns the value of the "price_unit" field in the mutation.
func (m *Rent591HomeMutation) PriceUnit() (r string, exists bool) {
	v := m.price_unit
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnit returns the old "price_unit" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldPriceUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnit: %w", err)
	}
	return oldValue.PriceUnit, nil
}

// ResetPriceUnit resets all changes to the "price_unit" field.
func (m *Rent591HomeMutation) ResetPriceUnit() {
	m.price_unit = nil
}

// SetPhotoList sets the "photo_list" field.
func (m *Rent591HomeMutation) SetPhotoList(s []string) {
	m.photo_list = &s
	m.appendphoto_list = nil
}

// PhotoList returns the value of the "photo_list" field in the mutation.
func (m *Rent591HomeMutation) PhotoList() (r []string, exists bool) {
	v := m.photo_list
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoList returns the old "photo_list" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldPhotoList(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoList is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoList requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoList: %w", err)
	}
	return oldValue.PhotoList, nil
}

// AppendPhotoList adds s to the "photo_list" field.
func (m *Rent591HomeMutation) AppendPhotoList(s []string) {
	m.appendphoto_list = append(m.appendphoto_list, s...)
}

// AppendedPhotoList returns the list of values that were appended to the "photo_list" field in this mutation.
func (m *Rent591HomeMutation) AppendedPhotoList() ([]string, bool) {
	if len(m.appendphoto_list) == 0 {
		return nil, false
	}
	return m.appendphoto_list, true
}

// ClearPhotoList clears the value of the "photo_list" field.
func (m *Rent591HomeMutation) ClearPhotoList() {
	m.photo_list = nil
	m.appendphoto_list = nil
	m.clearedFields[rent591home.FieldPhotoList] = struct{}{}
}

// PhotoListCleared returns if the "photo_list" field was cleared in this mutation.
func (m *Rent591HomeMutation) PhotoListCleared() bool {
	_, ok := m.clearedFields[rent591home.FieldPhotoList]
	return ok
}

// ResetPhotoList resets all changes to the "photo_list" field.
func (m *Rent591HomeMutation) ResetPhotoList() {
	m.photo_list = nil
	m.appendphoto_list = nil
	delete(m.clearedFields, rent591home.FieldPhotoList)
}

// SetRegionName sets the "region_name" field.
func (m *Rent591HomeMutation) SetRegionName(s string) {
	m.region_name = &s
}

// RegionName returns the value of the "region_name" field in the mutation.
func (m *Rent591HomeMutation) RegionName() (r string, exists bool) {
	v := m.region_name
	if v == nil {
		return
	}
	return *v, true
}

// OldRegionName returns the old "region_name" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldRegionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegionName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegionName: %w", err)
	}
	return oldValue.RegionName, nil
}

// ClearRegionName clears the value of the "region_name" field.
func (m *Rent591HomeMutation) ClearRegionName() {
	m.region_name = nil
	m.clearedFields[rent591home.FieldRegionName] = struct{}{}
}

// RegionNameCleared returns if the "region_name" field was cleared in this mutation.
func (m *Rent591HomeMutation) RegionNameCleared() bool {
	_, ok := m.clearedFields[rent591home.FieldRegionName]
	return ok
}

// ResetRegionName resets all changes to the "region_name" field.
func (m *Rent591HomeMutation) ResetRegionName() {
	m.region_name = nil
	delete(m.clearedFields, rent591home.FieldRegionName)
}

// SetSectionName sets the "section_name" field.
func (m *Rent591HomeMutation) SetSectionName(s string) {
	m.section_name = &s
}

// SectionName returns the value of the "section_name" field in the mutation.
func (m *Rent591HomeMutation) SectionName() (r string, exists bool) {
	v := m.section_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSectionName returns the old "section_name" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldSectionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSectionName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSectionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSectionName: %w", err)
	}
	return oldValue.SectionName, nil
}

// ResetSectionName resets all changes to the "section_name" field.
func (m *Rent591HomeMutation) ResetSectionName() {
	m.section_name = nil
}

// SetStreetName sets the "street_name" field.
func (m *Rent591HomeMutation) SetStreetName(s string) {
	m.street_name = &s
}

// StreetName returns the value of the "street_name" field in the mutation.
func (m *Rent591HomeMutation) StreetName() (r string, exists bool) {
	v := m.street_name
	if v == nil {
		return
	}
	return *v, true
}

// OldStreetName returns the old "street_name" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldStreetName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStreetName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStreetName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStreetName: %w", err)
	}
	return oldValue.StreetName, nil
}

// ResetStreetName resets all changes to the "street_name" field.
func (m *Rent591HomeMutation) ResetStreetName() {
	m.street_name = nil
}

// SetLocation sets the "location" field.
func (m *Rent591HomeMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *Rent591HomeMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *Rent591HomeMutation) ResetLocation() {
	m.location = nil
}

// SetArea sets the "area" field.
func (m *Rent591HomeMutation) SetArea(s string) {
	m.area = &s
}

// Area returns the value of the "area" field in the mutation.
func (m *Rent591HomeMutation) Area() (r string, exists bool) {
	v := m.area
	if v == nil {
		return
	}
	return *v, true
}

// OldArea returns the old "area" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldArea(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArea: %w", err)
	}
	return oldValue.Area, nil
}

// ResetArea resets all changes to the "area" field.
func (m *Rent591HomeMutation) ResetArea() {
	m.area = nil
}

// SetRoleName sets the "role_name" field.
func (m *Rent591HomeMutation) SetRoleName(s string) {
	m.role_name = &s
}

// RoleName returns the value of the "role_name" field in the mutation.
func (m *Rent591HomeMutation) RoleName() (r string, exists bool) {
	v := m.role_name
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleName returns the old "role_name" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldRoleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleName: %w", err)
	}
	return oldValue.RoleName, nil
}

// ResetRoleName resets all changes to the "role_name" field.
func (m *Rent591HomeMutation) ResetRoleName() {
	m.role_name = nil
}

// SetContact sets the "contact" field.
func (m *Rent591HomeMutation) SetContact(s string) {
	m.contact = &s
}

// Contact returns the value of the "contact" field in the mutation.
func (m *Rent591HomeMutation) Contact() (r string, exists bool) {
	v := m.contact
	if v == nil {
		return
	}
	return *v, true
}

// OldContact returns the old "contact" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldContact(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContact is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContact requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContact: %w", err)
	}
	return oldValue.Contact, nil
}

// ResetContact resets all changes to the "contact" field.
func (m *Rent591HomeMutation) ResetContact() {
	m.contact = nil
}

// SetRefreshTime sets the "refresh_time" field.
func (m *Rent591HomeMutation) SetRefreshTime(s string) {
	m.refresh_time = &s
}

// RefreshTime returns the value of the "refresh_time" field in the mutation.
func (m *Rent591HomeMutation) RefreshTime() (r string, exists bool) {
	v := m.refresh_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshTime returns the old "refresh_time" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldRefreshTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshTime: %w", err)
	}
	return oldValue.RefreshTime, nil
}

// ResetRefreshTime resets all changes to the "refresh_time" field.
func (m *Rent591HomeMutation) ResetRefreshTime() {
	m.refresh_time = nil
}

// SetYesterdayHit sets the "yesterday_hit" field.
func (m *Rent591HomeMutation) SetYesterdayHit(i int) {
	m.yesterday_hit = &i
	m.addyesterday_hit = nil
}

// YesterdayHit returns the value of the "yesterday_hit" field in the mutation.
func (m *Rent591HomeMutation) YesterdayHit() (r int, exists bool) {
	v := m.yesterday_hit
	if v == nil {
		return
	}
	return *v, true
}

// OldYesterdayHit returns the old "yesterday_hit" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldYesterdayHit(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYesterdayHit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYesterdayHit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYesterdayHit: %w", err)
	}
	return oldValue.YesterdayHit, nil
}

// AddYesterdayHit adds i to the "yesterday_hit" field.
func (m *Rent591HomeMutation) AddYesterdayHit(i int) {
	if m.addyesterday_hit != nil {
		*m.addyesterday_hit += i
	} else {
		m.addyesterday_hit = &i
	}
}

// AddedYesterdayHit returns the value that was added to the "yesterday_hit" field in this mutation.
func (m *Rent591HomeMutation) AddedYesterdayHit() (r int, exists bool) {
	v := m.addyesterday_hit
	if v == nil {
		return
	}
	return *v, true
}

// ResetYesterdayHit resets all changes to the "yesterday_hit" field.
func (m *Rent591HomeMutation) ResetYesterdayHit() {
	m.yesterday_hit = nil
	m.addyesterday_hit = nil
}

// SetIsVip sets the "is_vip" field.
func (m *Rent591HomeMutation) SetIsVip(i int) {
	m.is_vip = &i
	m.addis_vip = nil
}

// IsVip returns the value of the "is_vip" field in the mutation.
func (m *Rent591HomeMutation) IsVip() (r int, exists bool) {
	v := m.is_vip
	if v == nil {
		return
	}
	return *v, true
}

// OldIsVip returns the old "is_vip" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldIsVip(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsVip is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsVip requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsVip: %w", err)
	}
	return oldValue.IsVip, nil
}

// AddIsVip adds i to the "is_vip" field.
func (m *Rent591HomeMutation) AddIsVip(i int) {
	if m.addis_vip != nil {
		*m.addis_vip += i
	} else {
		m.addis_vip = &i
	}
}

// AddedIsVip returns the value that was added to the "is_vip" field in this mutation.
func (m *Rent591HomeMutation) AddedIsVip() (r int, exists bool) {
	v := m.addis_vip
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsVip resets all changes to the "is_vip" field.
func (m *Rent591HomeMutation) ResetIsVip() {
	m.is_vip = nil
	m.addis_vip = nil
}

// SetIsCombine sets the "is_combine" field.
func (m *Rent591HomeMutation) SetIsCombine(i int) {
	m.is_combine = &i
	m.addis_combine = nil
}

// IsCombine returns the value of the "is_combine" field in the mutation.
func (m *Rent591HomeMutation) IsCombine() (r int, exists bool) {
	v := m.is_combine
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCombine returns the old "is_combine" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldIsCombine(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCombine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCombine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCombine: %w", err)
	}
	return oldValue.IsCombine, nil
}

// AddIsCombine adds i to the "is_combine" field.
func (m *Rent591HomeMutation) AddIsCombine(i int) {
	if m.addis_combine != nil {
		*m.addis_combine += i
	} else {
		m.addis_combine = &i
	}
}

// AddedIsCombine returns the value that was added to the "is_combine" field in this mutation.
func (m *Rent591HomeMutation) AddedIsCombine() (r int, exists bool) {
	v := m.addis_combine
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsCombine resets all changes to the "is_combine" field.
func (m *Rent591HomeMutation) ResetIsCombine() {
	m.is_combine = nil
	m.addis_combine = nil
}

// SetHurry sets the "hurry" field.
func (m *Rent591HomeMutation) SetHurry(i int) {
	m.hurry = &i
	m.addhurry = nil
}

// Hurry returns the value of the "hurry" field in the mutation.
func (m *Rent591HomeMutation) Hurry() (r int, exists bool) {
	v := m.hurry
	if v == nil {
		return
	}
	return *v, true
}

// OldHurry returns the old "hurry" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldHurry(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHurry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHurry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHurry: %w", err)
	}
	return oldValue.Hurry, nil
}

// AddHurry adds i to the "hurry" field.
func (m *Rent591HomeMutation) AddHurry(i int) {
	if m.addhurry != nil {
		*m.addhurry += i
	} else {
		m.addhurry = &i
	}
}

// AddedHurry returns the value that was added to the "hurry" field in this mutation.
func (m *Rent591HomeMutation) AddedHurry() (r int, exists bool) {
	v := m.addhurry
	if v == nil {
		return
	}
	return *v, true
}

// ResetHurry resets all changes to the "hurry" field.
func (m *Rent591HomeMutation) ResetHurry() {
	m.hurry = nil
	m.addhurry = nil
}

// SetIsSocial sets the "is_social" field.
func (m *Rent591HomeMutation) SetIsSocial(i int) {
	m.is_social = &i
	m.addis_social = nil
}

// IsSocial returns the value of the "is_social" field in the mutation.
func (m *Rent591HomeMutation) IsSocial() (r int, exists bool) {
	v := m.is_social
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSocial returns the old "is_social" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldIsSocial(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSocial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSocial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSocial: %w", err)
	}
	return oldValue.IsSocial, nil
}

// AddIsSocial adds i to the "is_social" field.
func (m *Rent591HomeMutation) AddIsSocial(i int) {
	if m.addis_social != nil {
		*m.addis_social += i
	} else {
		m.addis_social = &i
	}
}

// AddedIsSocial returns the value that was added to the "is_social" field in this mutation.
func (m *Rent591HomeMutation) AddedIsSocial() (r int, exists bool) {
	v := m.addis_social
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsSocial resets all changes to the "is_social" field.
func (m *Rent591HomeMutation) ResetIsSocial() {
	m.is_social = nil
	m.addis_social = nil
}

// SetDiscountPriceStr sets the "discount_price_str" field.
func (m *Rent591HomeMutation) SetDiscountPriceStr(s string) {
	m.discount_price_str = &s
}

// DiscountPriceStr returns the value of the "discount_price_str" field in the mutation.
func (m *Rent591HomeMutation) DiscountPriceStr() (r string, exists bool) {
	v := m.discount_price_str
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountPriceStr returns the old "discount_price_str" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldDiscountPriceStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountPriceStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountPriceStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountPriceStr: %w", err)
	}
	return oldValue.DiscountPriceStr, nil
}

// ResetDiscountPriceStr resets all changes to the "discount_price_str" field.
func (m *Rent591HomeMutation) ResetDiscountPriceStr() {
	m.discount_price_str = nil
}

// SetCasesID sets the "cases_id" field.
func (m *Rent591HomeMutation) SetCasesID(i int) {
	m.cases_id = &i
	m.addcases_id = nil
}

// CasesID returns the value of the "cases_id" field in the mutation.
func (m *Rent591HomeMutation) CasesID() (r int, exists bool) {
	v := m.cases_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCasesID returns the old "cases_id" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldCasesID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCasesID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCasesID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCasesID: %w", err)
	}
	return oldValue.CasesID, nil
}

// AddCasesID adds i to the "cases_id" field.
func (m *Rent591HomeMutation) AddCasesID(i int) {
	if m.addcases_id != nil {
		*m.addcases_id += i
	} else {
		m.addcases_id = &i
	}
}

// AddedCasesID returns the value that was added to the "cases_id" field in this mutation.
func (m *Rent591HomeMutation) AddedCasesID() (r int, exists bool) {
	v := m.addcases_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCasesID resets all changes to the "cases_id" field.
func (m *Rent591HomeMutation) ResetCasesID() {
	m.cases_id = nil
	m.addcases_id = nil
}

// SetIsVideo sets the "is_video" field.
func (m *Rent591HomeMutation) SetIsVideo(i int) {
	m.is_video = &i
	m.addis_video = nil
}

// IsVideo returns the value of the "is_video" field in the mutation.
func (m *Rent591HomeMutation) IsVideo() (r int, exists bool) {
	v := m.is_video
	if v == nil {
		return
	}
	return *v, true
}

// OldIsVideo returns the old "is_video" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldIsVideo(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsVideo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsVideo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsVideo: %w", err)
	}
	return oldValue.IsVideo, nil
}

// AddIsVideo adds i to the "is_video" field.
func (m *Rent591HomeMutation) AddIsVideo(i int) {
	if m.addis_video != nil {
		*m.addis_video += i
	} else {
		m.addis_video = &i
	}
}

// AddedIsVideo returns the value that was added to the "is_video" field in this mutation.
func (m *Rent591HomeMutation) AddedIsVideo() (r int, exists bool) {
	v := m.addis_video
	if v == nil {
		return
	}
	return *v, true
}

// ResetIsVideo resets all changes to the "is_video" field.
func (m *Rent591HomeMutation) ResetIsVideo() {
	m.is_video = nil
	m.addis_video = nil
}

// SetPreferred sets the "preferred" field.
func (m *Rent591HomeMutation) SetPreferred(i int) {
	m.preferred = &i
	m.addpreferred = nil
}

// Preferred returns the value of the "preferred" field in the mutation.
func (m *Rent591HomeMutation) Preferred() (r int, exists bool) {
	v := m.preferred
	if v == nil {
		return
	}
	return *v, true
}

// OldPreferred returns the old "preferred" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldPreferred(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPreferred is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPreferred requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPreferred: %w", err)
	}
	return oldValue.Preferred, nil
}

// AddPreferred adds i to the "preferred" field.
func (m *Rent591HomeMutation) AddPreferred(i int) {
	if m.addpreferred != nil {
		*m.addpreferred += i
	} else {
		m.addpreferred = &i
	}
}

// AddedPreferred returns the value that was added to the "preferred" field in this mutation.
func (m *Rent591HomeMutation) AddedPreferred() (r int, exists bool) {
	v := m.addpreferred
	if v == nil {
		return
	}
	return *v, true
}

// ResetPreferred resets all changes to the "preferred" field.
func (m *Rent591HomeMutation) ResetPreferred() {
	m.preferred = nil
	m.addpreferred = nil
}

// SetCid sets the "cid" field.
func (m *Rent591HomeMutation) SetCid(i int) {
	m.cid = &i
	m.addcid = nil
}

// Cid returns the value of the "cid" field in the mutation.
func (m *Rent591HomeMutation) Cid() (r int, exists bool) {
	v := m.cid
	if v == nil {
		return
	}
	return *v, true
}

// OldCid returns the old "cid" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldCid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCid: %w", err)
	}
	return oldValue.Cid, nil
}

// AddCid adds i to the "cid" field.
func (m *Rent591HomeMutation) AddCid(i int) {
	if m.addcid != nil {
		*m.addcid += i
	} else {
		m.addcid = &i
	}
}

// AddedCid returns the value that was added to the "cid" field in this mutation.
func (m *Rent591HomeMutation) AddedCid() (r int, exists bool) {
	v := m.addcid
	if v == nil {
		return
	}
	return *v, true
}

// ResetCid resets all changes to the "cid" field.
func (m *Rent591HomeMutation) ResetCid() {
	m.cid = nil
	m.addcid = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *Rent591HomeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *Rent591HomeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *Rent591HomeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *Rent591HomeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *Rent591HomeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Rent591Home entity.
// If the Rent591Home object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *Rent591HomeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddRent591homeTagIDs adds the "rent591home_tags" edge to the Rent591HomeTag entity by ids.
func (m *Rent591HomeMutation) AddRent591homeTagIDs(ids ...int) {
	if m.rent591home_tags == nil {
		m.rent591home_tags = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_tags[ids[i]] = struct{}{}
	}
}

// ClearRent591homeTags clears the "rent591home_tags" edge to the Rent591HomeTag entity.
func (m *Rent591HomeMutation) ClearRent591homeTags() {
	m.clearedrent591home_tags = true
}

// Rent591homeTagsCleared reports if the "rent591home_tags" edge to the Rent591HomeTag entity was cleared.
func (m *Rent591HomeMutation) Rent591homeTagsCleared() bool {
	return m.clearedrent591home_tags
}

// RemoveRent591homeTagIDs removes the "rent591home_tags" edge to the Rent591HomeTag entity by IDs.
func (m *Rent591HomeMutation) RemoveRent591homeTagIDs(ids ...int) {
	if m.removedrent591home_tags == nil {
		m.removedrent591home_tags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_tags, ids[i])
		m.removedrent591home_tags[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeTags returns the removed IDs of the "rent591home_tags" edge to the Rent591HomeTag entity.
func (m *Rent591HomeMutation) RemovedRent591homeTagsIDs() (ids []int) {
	for id := range m.removedrent591home_tags {
		ids = append(ids, id)
	}
	return
}

// Rent591homeTagsIDs returns the "rent591home_tags" edge IDs in the mutation.
func (m *Rent591HomeMutation) Rent591homeTagsIDs() (ids []int) {
	for id := range m.rent591home_tags {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeTags resets all changes to the "rent591home_tags" edge.
func (m *Rent591HomeMutation) ResetRent591homeTags() {
	m.rent591home_tags = nil
	m.clearedrent591home_tags = false
	m.removedrent591home_tags = nil
}

// SetRent591homeSurroundingsID sets the "rent591home_surroundings" edge to the Rent591HomeSurrounding entity by id.
func (m *Rent591HomeMutation) SetRent591homeSurroundingsID(id int) {
	m.rent591home_surroundings = &id
}

// ClearRent591homeSurroundings clears the "rent591home_surroundings" edge to the Rent591HomeSurrounding entity.
func (m *Rent591HomeMutation) ClearRent591homeSurroundings() {
	m.clearedrent591home_surroundings = true
}

// Rent591homeSurroundingsCleared reports if the "rent591home_surroundings" edge to the Rent591HomeSurrounding entity was cleared.
func (m *Rent591HomeMutation) Rent591homeSurroundingsCleared() bool {
	return m.clearedrent591home_surroundings
}

// Rent591homeSurroundingsID returns the "rent591home_surroundings" edge ID in the mutation.
func (m *Rent591HomeMutation) Rent591homeSurroundingsID() (id int, exists bool) {
	if m.rent591home_surroundings != nil {
		return *m.rent591home_surroundings, true
	}
	return
}

// Rent591homeSurroundingsIDs returns the "rent591home_surroundings" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// Rent591homeSurroundingsID instead. It exists only for internal usage by the builders.
func (m *Rent591HomeMutation) Rent591homeSurroundingsIDs() (ids []int) {
	if id := m.rent591home_surroundings; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRent591homeSurroundings resets all changes to the "rent591home_surroundings" edge.
func (m *Rent591HomeMutation) ResetRent591homeSurroundings() {
	m.rent591home_surroundings = nil
	m.clearedrent591home_surroundings = false
}

// SetRent591homeDetailsID sets the "rent591home_details" edge to the Rent591HomeDetail entity by id.
func (m *Rent591HomeMutation) SetRent591homeDetailsID(id int) {
	m.rent591home_details = &id
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeMutation) ClearRent591homeDetails() {
	m.clearedrent591home_details = true
}

// Rent591homeDetailsCleared reports if the "rent591home_details" edge to the Rent591HomeDetail entity was cleared.
func (m *Rent591HomeMutation) Rent591homeDetailsCleared() bool {
	return m.clearedrent591home_details
}

// Rent591homeDetailsID returns the "rent591home_details" edge ID in the mutation.
func (m *Rent591HomeMutation) Rent591homeDetailsID() (id int, exists bool) {
	if m.rent591home_details != nil {
		return *m.rent591home_details, true
	}
	return
}

// Rent591homeDetailsIDs returns the "rent591home_details" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// Rent591homeDetailsID instead. It exists only for internal usage by the builders.
func (m *Rent591HomeMutation) Rent591homeDetailsIDs() (ids []int) {
	if id := m.rent591home_details; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRent591homeDetails resets all changes to the "rent591home_details" edge.
func (m *Rent591HomeMutation) ResetRent591homeDetails() {
	m.rent591home_details = nil
	m.clearedrent591home_details = false
}

// Where appends a list predicates to the Rent591HomeMutation builder.
func (m *Rent591HomeMutation) Where(ps ...predicate.Rent591Home) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591Home, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591Home).
func (m *Rent591HomeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeMutation) Fields() []string {
	fields := make([]string, 0, 30)
	if m.title != nil {
		fields = append(fields, rent591home.FieldTitle)
	}
	if m._type != nil {
		fields = append(fields, rent591home.FieldType)
	}
	if m.post_id != nil {
		fields = append(fields, rent591home.FieldPostID)
	}
	if m.kind_name != nil {
		fields = append(fields, rent591home.FieldKindName)
	}
	if m.room_str != nil {
		fields = append(fields, rent591home.FieldRoomStr)
	}
	if m.floor_str != nil {
		fields = append(fields, rent591home.FieldFloorStr)
	}
	if m.community != nil {
		fields = append(fields, rent591home.FieldCommunity)
	}
	if m.price != nil {
		fields = append(fields, rent591home.FieldPrice)
	}
	if m.price_unit != nil {
		fields = append(fields, rent591home.FieldPriceUnit)
	}
	if m.photo_list != nil {
		fields = append(fields, rent591home.FieldPhotoList)
	}
	if m.region_name != nil {
		fields = append(fields, rent591home.FieldRegionName)
	}
	if m.section_name != nil {
		fields = append(fields, rent591home.FieldSectionName)
	}
	if m.street_name != nil {
		fields = append(fields, rent591home.FieldStreetName)
	}
	if m.location != nil {
		fields = append(fields, rent591home.FieldLocation)
	}
	if m.area != nil {
		fields = append(fields, rent591home.FieldArea)
	}
	if m.role_name != nil {
		fields = append(fields, rent591home.FieldRoleName)
	}
	if m.contact != nil {
		fields = append(fields, rent591home.FieldContact)
	}
	if m.refresh_time != nil {
		fields = append(fields, rent591home.FieldRefreshTime)
	}
	if m.yesterday_hit != nil {
		fields = append(fields, rent591home.FieldYesterdayHit)
	}
	if m.is_vip != nil {
		fields = append(fields, rent591home.FieldIsVip)
	}
	if m.is_combine != nil {
		fields = append(fields, rent591home.FieldIsCombine)
	}
	if m.hurry != nil {
		fields = append(fields, rent591home.FieldHurry)
	}
	if m.is_social != nil {
		fields = append(fields, rent591home.FieldIsSocial)
	}
	if m.discount_price_str != nil {
		fields = append(fields, rent591home.FieldDiscountPriceStr)
	}
	if m.cases_id != nil {
		fields = append(fields, rent591home.FieldCasesID)
	}
	if m.is_video != nil {
		fields = append(fields, rent591home.FieldIsVideo)
	}
	if m.preferred != nil {
		fields = append(fields, rent591home.FieldPreferred)
	}
	if m.cid != nil {
		fields = append(fields, rent591home.FieldCid)
	}
	if m.created_at != nil {
		fields = append(fields, rent591home.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, rent591home.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591home.FieldTitle:
		return m.Title()
	case rent591home.FieldType:
		return m.GetType()
	case rent591home.FieldPostID:
		return m.PostID()
	case rent591home.FieldKindName:
		return m.KindName()
	case rent591home.FieldRoomStr:
		return m.RoomStr()
	case rent591home.FieldFloorStr:
		return m.FloorStr()
	case rent591home.FieldCommunity:
		return m.Community()
	case rent591home.FieldPrice:
		return m.Price()
	case rent591home.FieldPriceUnit:
		return m.PriceUnit()
	case rent591home.FieldPhotoList:
		return m.PhotoList()
	case rent591home.FieldRegionName:
		return m.RegionName()
	case rent591home.FieldSectionName:
		return m.SectionName()
	case rent591home.FieldStreetName:
		return m.StreetName()
	case rent591home.FieldLocation:
		return m.Location()
	case rent591home.FieldArea:
		return m.Area()
	case rent591home.FieldRoleName:
		return m.RoleName()
	case rent591home.FieldContact:
		return m.Contact()
	case rent591home.FieldRefreshTime:
		return m.RefreshTime()
	case rent591home.FieldYesterdayHit:
		return m.YesterdayHit()
	case rent591home.FieldIsVip:
		return m.IsVip()
	case rent591home.FieldIsCombine:
		return m.IsCombine()
	case rent591home.FieldHurry:
		return m.Hurry()
	case rent591home.FieldIsSocial:
		return m.IsSocial()
	case rent591home.FieldDiscountPriceStr:
		return m.DiscountPriceStr()
	case rent591home.FieldCasesID:
		return m.CasesID()
	case rent591home.FieldIsVideo:
		return m.IsVideo()
	case rent591home.FieldPreferred:
		return m.Preferred()
	case rent591home.FieldCid:
		return m.Cid()
	case rent591home.FieldCreatedAt:
		return m.CreatedAt()
	case rent591home.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591home.FieldTitle:
		return m.OldTitle(ctx)
	case rent591home.FieldType:
		return m.OldType(ctx)
	case rent591home.FieldPostID:
		return m.OldPostID(ctx)
	case rent591home.FieldKindName:
		return m.OldKindName(ctx)
	case rent591home.FieldRoomStr:
		return m.OldRoomStr(ctx)
	case rent591home.FieldFloorStr:
		return m.OldFloorStr(ctx)
	case rent591home.FieldCommunity:
		return m.OldCommunity(ctx)
	case rent591home.FieldPrice:
		return m.OldPrice(ctx)
	case rent591home.FieldPriceUnit:
		return m.OldPriceUnit(ctx)
	case rent591home.FieldPhotoList:
		return m.OldPhotoList(ctx)
	case rent591home.FieldRegionName:
		return m.OldRegionName(ctx)
	case rent591home.FieldSectionName:
		return m.OldSectionName(ctx)
	case rent591home.FieldStreetName:
		return m.OldStreetName(ctx)
	case rent591home.FieldLocation:
		return m.OldLocation(ctx)
	case rent591home.FieldArea:
		return m.OldArea(ctx)
	case rent591home.FieldRoleName:
		return m.OldRoleName(ctx)
	case rent591home.FieldContact:
		return m.OldContact(ctx)
	case rent591home.FieldRefreshTime:
		return m.OldRefreshTime(ctx)
	case rent591home.FieldYesterdayHit:
		return m.OldYesterdayHit(ctx)
	case rent591home.FieldIsVip:
		return m.OldIsVip(ctx)
	case rent591home.FieldIsCombine:
		return m.OldIsCombine(ctx)
	case rent591home.FieldHurry:
		return m.OldHurry(ctx)
	case rent591home.FieldIsSocial:
		return m.OldIsSocial(ctx)
	case rent591home.FieldDiscountPriceStr:
		return m.OldDiscountPriceStr(ctx)
	case rent591home.FieldCasesID:
		return m.OldCasesID(ctx)
	case rent591home.FieldIsVideo:
		return m.OldIsVideo(ctx)
	case rent591home.FieldPreferred:
		return m.OldPreferred(ctx)
	case rent591home.FieldCid:
		return m.OldCid(ctx)
	case rent591home.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case rent591home.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591Home field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591home.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case rent591home.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case rent591home.FieldPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostID(v)
		return nil
	case rent591home.FieldKindName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKindName(v)
		return nil
	case rent591home.FieldRoomStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomStr(v)
		return nil
	case rent591home.FieldFloorStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFloorStr(v)
		return nil
	case rent591home.FieldCommunity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommunity(v)
		return nil
	case rent591home.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case rent591home.FieldPriceUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnit(v)
		return nil
	case rent591home.FieldPhotoList:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoList(v)
		return nil
	case rent591home.FieldRegionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegionName(v)
		return nil
	case rent591home.FieldSectionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSectionName(v)
		return nil
	case rent591home.FieldStreetName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStreetName(v)
		return nil
	case rent591home.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case rent591home.FieldArea:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArea(v)
		return nil
	case rent591home.FieldRoleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleName(v)
		return nil
	case rent591home.FieldContact:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContact(v)
		return nil
	case rent591home.FieldRefreshTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshTime(v)
		return nil
	case rent591home.FieldYesterdayHit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYesterdayHit(v)
		return nil
	case rent591home.FieldIsVip:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsVip(v)
		return nil
	case rent591home.FieldIsCombine:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCombine(v)
		return nil
	case rent591home.FieldHurry:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHurry(v)
		return nil
	case rent591home.FieldIsSocial:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSocial(v)
		return nil
	case rent591home.FieldDiscountPriceStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountPriceStr(v)
		return nil
	case rent591home.FieldCasesID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCasesID(v)
		return nil
	case rent591home.FieldIsVideo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsVideo(v)
		return nil
	case rent591home.FieldPreferred:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPreferred(v)
		return nil
	case rent591home.FieldCid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCid(v)
		return nil
	case rent591home.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case rent591home.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591Home field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, rent591home.FieldType)
	}
	if m.addpost_id != nil {
		fields = append(fields, rent591home.FieldPostID)
	}
	if m.addprice != nil {
		fields = append(fields, rent591home.FieldPrice)
	}
	if m.addyesterday_hit != nil {
		fields = append(fields, rent591home.FieldYesterdayHit)
	}
	if m.addis_vip != nil {
		fields = append(fields, rent591home.FieldIsVip)
	}
	if m.addis_combine != nil {
		fields = append(fields, rent591home.FieldIsCombine)
	}
	if m.addhurry != nil {
		fields = append(fields, rent591home.FieldHurry)
	}
	if m.addis_social != nil {
		fields = append(fields, rent591home.FieldIsSocial)
	}
	if m.addcases_id != nil {
		fields = append(fields, rent591home.FieldCasesID)
	}
	if m.addis_video != nil {
		fields = append(fields, rent591home.FieldIsVideo)
	}
	if m.addpreferred != nil {
		fields = append(fields, rent591home.FieldPreferred)
	}
	if m.addcid != nil {
		fields = append(fields, rent591home.FieldCid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rent591home.FieldType:
		return m.AddedType()
	case rent591home.FieldPostID:
		return m.AddedPostID()
	case rent591home.FieldPrice:
		return m.AddedPrice()
	case rent591home.FieldYesterdayHit:
		return m.AddedYesterdayHit()
	case rent591home.FieldIsVip:
		return m.AddedIsVip()
	case rent591home.FieldIsCombine:
		return m.AddedIsCombine()
	case rent591home.FieldHurry:
		return m.AddedHurry()
	case rent591home.FieldIsSocial:
		return m.AddedIsSocial()
	case rent591home.FieldCasesID:
		return m.AddedCasesID()
	case rent591home.FieldIsVideo:
		return m.AddedIsVideo()
	case rent591home.FieldPreferred:
		return m.AddedPreferred()
	case rent591home.FieldCid:
		return m.AddedCid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rent591home.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case rent591home.FieldPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPostID(v)
		return nil
	case rent591home.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case rent591home.FieldYesterdayHit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYesterdayHit(v)
		return nil
	case rent591home.FieldIsVip:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsVip(v)
		return nil
	case rent591home.FieldIsCombine:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsCombine(v)
		return nil
	case rent591home.FieldHurry:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHurry(v)
		return nil
	case rent591home.FieldIsSocial:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsSocial(v)
		return nil
	case rent591home.FieldCasesID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCasesID(v)
		return nil
	case rent591home.FieldIsVideo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsVideo(v)
		return nil
	case rent591home.FieldPreferred:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPreferred(v)
		return nil
	case rent591home.FieldCid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCid(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591Home numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(rent591home.FieldPhotoList) {
		fields = append(fields, rent591home.FieldPhotoList)
	}
	if m.FieldCleared(rent591home.FieldRegionName) {
		fields = append(fields, rent591home.FieldRegionName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeMutation) ClearField(name string) error {
	switch name {
	case rent591home.FieldPhotoList:
		m.ClearPhotoList()
		return nil
	case rent591home.FieldRegionName:
		m.ClearRegionName()
		return nil
	}
	return fmt.Errorf("unknown Rent591Home nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeMutation) ResetField(name string) error {
	switch name {
	case rent591home.FieldTitle:
		m.ResetTitle()
		return nil
	case rent591home.FieldType:
		m.ResetType()
		return nil
	case rent591home.FieldPostID:
		m.ResetPostID()
		return nil
	case rent591home.FieldKindName:
		m.ResetKindName()
		return nil
	case rent591home.FieldRoomStr:
		m.ResetRoomStr()
		return nil
	case rent591home.FieldFloorStr:
		m.ResetFloorStr()
		return nil
	case rent591home.FieldCommunity:
		m.ResetCommunity()
		return nil
	case rent591home.FieldPrice:
		m.ResetPrice()
		return nil
	case rent591home.FieldPriceUnit:
		m.ResetPriceUnit()
		return nil
	case rent591home.FieldPhotoList:
		m.ResetPhotoList()
		return nil
	case rent591home.FieldRegionName:
		m.ResetRegionName()
		return nil
	case rent591home.FieldSectionName:
		m.ResetSectionName()
		return nil
	case rent591home.FieldStreetName:
		m.ResetStreetName()
		return nil
	case rent591home.FieldLocation:
		m.ResetLocation()
		return nil
	case rent591home.FieldArea:
		m.ResetArea()
		return nil
	case rent591home.FieldRoleName:
		m.ResetRoleName()
		return nil
	case rent591home.FieldContact:
		m.ResetContact()
		return nil
	case rent591home.FieldRefreshTime:
		m.ResetRefreshTime()
		return nil
	case rent591home.FieldYesterdayHit:
		m.ResetYesterdayHit()
		return nil
	case rent591home.FieldIsVip:
		m.ResetIsVip()
		return nil
	case rent591home.FieldIsCombine:
		m.ResetIsCombine()
		return nil
	case rent591home.FieldHurry:
		m.ResetHurry()
		return nil
	case rent591home.FieldIsSocial:
		m.ResetIsSocial()
		return nil
	case rent591home.FieldDiscountPriceStr:
		m.ResetDiscountPriceStr()
		return nil
	case rent591home.FieldCasesID:
		m.ResetCasesID()
		return nil
	case rent591home.FieldIsVideo:
		m.ResetIsVideo()
		return nil
	case rent591home.FieldPreferred:
		m.ResetPreferred()
		return nil
	case rent591home.FieldCid:
		m.ResetCid()
		return nil
	case rent591home.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case rent591home.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Rent591Home field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.rent591home_tags != nil {
		edges = append(edges, rent591home.EdgeRent591homeTags)
	}
	if m.rent591home_surroundings != nil {
		edges = append(edges, rent591home.EdgeRent591homeSurroundings)
	}
	if m.rent591home_details != nil {
		edges = append(edges, rent591home.EdgeRent591homeDetails)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591home.EdgeRent591homeTags:
		ids := make([]ent.Value, 0, len(m.rent591home_tags))
		for id := range m.rent591home_tags {
			ids = append(ids, id)
		}
		return ids
	case rent591home.EdgeRent591homeSurroundings:
		if id := m.rent591home_surroundings; id != nil {
			return []ent.Value{*id}
		}
	case rent591home.EdgeRent591homeDetails:
		if id := m.rent591home_details; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedrent591home_tags != nil {
		edges = append(edges, rent591home.EdgeRent591homeTags)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591home.EdgeRent591homeTags:
		ids := make([]ent.Value, 0, len(m.removedrent591home_tags))
		for id := range m.removedrent591home_tags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedrent591home_tags {
		edges = append(edges, rent591home.EdgeRent591homeTags)
	}
	if m.clearedrent591home_surroundings {
		edges = append(edges, rent591home.EdgeRent591homeSurroundings)
	}
	if m.clearedrent591home_details {
		edges = append(edges, rent591home.EdgeRent591homeDetails)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591home.EdgeRent591homeTags:
		return m.clearedrent591home_tags
	case rent591home.EdgeRent591homeSurroundings:
		return m.clearedrent591home_surroundings
	case rent591home.EdgeRent591homeDetails:
		return m.clearedrent591home_details
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeMutation) ClearEdge(name string) error {
	switch name {
	case rent591home.EdgeRent591homeSurroundings:
		m.ClearRent591homeSurroundings()
		return nil
	case rent591home.EdgeRent591homeDetails:
		m.ClearRent591homeDetails()
		return nil
	}
	return fmt.Errorf("unknown Rent591Home unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeMutation) ResetEdge(name string) error {
	switch name {
	case rent591home.EdgeRent591homeTags:
		m.ResetRent591homeTags()
		return nil
	case rent591home.EdgeRent591homeSurroundings:
		m.ResetRent591homeSurroundings()
		return nil
	case rent591home.EdgeRent591homeDetails:
		m.ResetRent591homeDetails()
		return nil
	}
	return fmt.Errorf("unknown Rent591Home edge %s", name)
}

// Rent591HomeDetailMutation represents an operation that mutates the Rent591HomeDetail nodes in the graph.
type Rent591HomeDetailMutation struct {
	config
	op                                        Op
	typ                                       string
	id                                        *int
	title                                     *string
	deposit                                   *string
	kind                                      *int
	addkind                                   *int
	relieved                                  *int
	addrelieved                               *int
	region_id                                 *int
	addregion_id                              *int
	section_id                                *int
	addsection_id                             *int
	deal_text                                 *string
	deal_time                                 *int
	adddeal_time                              *int
	price                                     *int
	addprice                                  *int
	price_unit                                *string
	created_at                                *time.Time
	updated_at                                *time.Time
	clearedFields                             map[string]struct{}
	rent591homes                              *int
	clearedrent591homes                       bool
	rent591home_detail_breadcrumbs            map[int]struct{}
	removedrent591home_detail_breadcrumbs     map[int]struct{}
	clearedrent591home_detail_breadcrumbs     bool
	rent591home_detail_shareinfos             map[int]struct{}
	removedrent591home_detail_shareinfos      map[int]struct{}
	clearedrent591home_detail_shareinfos      bool
	rent591home_detail_browses                map[int]struct{}
	removedrent591home_detail_browses         map[int]struct{}
	clearedrent591home_detail_browses         bool
	rent591home_detail_tags                   map[int]struct{}
	removedrent591home_detail_tags            map[int]struct{}
	clearedrent591home_detail_tags            bool
	rent591home_detail_navdatas               map[int]struct{}
	removedrent591home_detail_navdatas        map[int]struct{}
	clearedrent591home_detail_navdatas        bool
	rent591home_detail_infos                  map[int]struct{}
	removedrent591home_detail_infos           map[int]struct{}
	clearedrent591home_detail_infos           bool
	rent591home_detail_publishs               map[int]struct{}
	removedrent591home_detail_publishs        map[int]struct{}
	clearedrent591home_detail_publishs        bool
	rent591home_detail_position_rounds        *int
	clearedrent591home_detail_position_rounds bool
	done                                      bool
	oldValue                                  func(context.Context) (*Rent591HomeDetail, error)
	predicates                                []predicate.Rent591HomeDetail
}

var _ ent.Mutation = (*Rent591HomeDetailMutation)(nil)

// rent591homedetailOption allows management of the mutation configuration using functional options.
type rent591homedetailOption func(*Rent591HomeDetailMutation)

// newRent591HomeDetailMutation creates new mutation for the Rent591HomeDetail entity.
func newRent591HomeDetailMutation(c config, op Op, opts ...rent591homedetailOption) *Rent591HomeDetailMutation {
	m := &Rent591HomeDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeDetailID sets the ID field of the mutation.
func withRent591HomeDetailID(id int) rent591homedetailOption {
	return func(m *Rent591HomeDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeDetail
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeDetail sets the old Rent591HomeDetail of the mutation.
func withRent591HomeDetail(node *Rent591HomeDetail) rent591homedetailOption {
	return func(m *Rent591HomeDetailMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeDetailMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeDetailMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *Rent591HomeDetailMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *Rent591HomeDetailMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *Rent591HomeDetailMutation) ResetTitle() {
	m.title = nil
}

// SetDeposit sets the "deposit" field.
func (m *Rent591HomeDetailMutation) SetDeposit(s string) {
	m.deposit = &s
}

// Deposit returns the value of the "deposit" field in the mutation.
func (m *Rent591HomeDetailMutation) Deposit() (r string, exists bool) {
	v := m.deposit
	if v == nil {
		return
	}
	return *v, true
}

// OldDeposit returns the old "deposit" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldDeposit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeposit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeposit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeposit: %w", err)
	}
	return oldValue.Deposit, nil
}

// ResetDeposit resets all changes to the "deposit" field.
func (m *Rent591HomeDetailMutation) ResetDeposit() {
	m.deposit = nil
}

// SetKind sets the "kind" field.
func (m *Rent591HomeDetailMutation) SetKind(i int) {
	m.kind = &i
	m.addkind = nil
}

// Kind returns the value of the "kind" field in the mutation.
func (m *Rent591HomeDetailMutation) Kind() (r int, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldKind(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// AddKind adds i to the "kind" field.
func (m *Rent591HomeDetailMutation) AddKind(i int) {
	if m.addkind != nil {
		*m.addkind += i
	} else {
		m.addkind = &i
	}
}

// AddedKind returns the value that was added to the "kind" field in this mutation.
func (m *Rent591HomeDetailMutation) AddedKind() (r int, exists bool) {
	v := m.addkind
	if v == nil {
		return
	}
	return *v, true
}

// ResetKind resets all changes to the "kind" field.
func (m *Rent591HomeDetailMutation) ResetKind() {
	m.kind = nil
	m.addkind = nil
}

// SetRelieved sets the "relieved" field.
func (m *Rent591HomeDetailMutation) SetRelieved(i int) {
	m.relieved = &i
	m.addrelieved = nil
}

// Relieved returns the value of the "relieved" field in the mutation.
func (m *Rent591HomeDetailMutation) Relieved() (r int, exists bool) {
	v := m.relieved
	if v == nil {
		return
	}
	return *v, true
}

// OldRelieved returns the old "relieved" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldRelieved(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelieved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelieved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelieved: %w", err)
	}
	return oldValue.Relieved, nil
}

// AddRelieved adds i to the "relieved" field.
func (m *Rent591HomeDetailMutation) AddRelieved(i int) {
	if m.addrelieved != nil {
		*m.addrelieved += i
	} else {
		m.addrelieved = &i
	}
}

// AddedRelieved returns the value that was added to the "relieved" field in this mutation.
func (m *Rent591HomeDetailMutation) AddedRelieved() (r int, exists bool) {
	v := m.addrelieved
	if v == nil {
		return
	}
	return *v, true
}

// ResetRelieved resets all changes to the "relieved" field.
func (m *Rent591HomeDetailMutation) ResetRelieved() {
	m.relieved = nil
	m.addrelieved = nil
}

// SetRegionID sets the "region_id" field.
func (m *Rent591HomeDetailMutation) SetRegionID(i int) {
	m.region_id = &i
	m.addregion_id = nil
}

// RegionID returns the value of the "region_id" field in the mutation.
func (m *Rent591HomeDetailMutation) RegionID() (r int, exists bool) {
	v := m.region_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRegionID returns the old "region_id" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldRegionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegionID: %w", err)
	}
	return oldValue.RegionID, nil
}

// AddRegionID adds i to the "region_id" field.
func (m *Rent591HomeDetailMutation) AddRegionID(i int) {
	if m.addregion_id != nil {
		*m.addregion_id += i
	} else {
		m.addregion_id = &i
	}
}

// AddedRegionID returns the value that was added to the "region_id" field in this mutation.
func (m *Rent591HomeDetailMutation) AddedRegionID() (r int, exists bool) {
	v := m.addregion_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRegionID resets all changes to the "region_id" field.
func (m *Rent591HomeDetailMutation) ResetRegionID() {
	m.region_id = nil
	m.addregion_id = nil
}

// SetSectionID sets the "section_id" field.
func (m *Rent591HomeDetailMutation) SetSectionID(i int) {
	m.section_id = &i
	m.addsection_id = nil
}

// SectionID returns the value of the "section_id" field in the mutation.
func (m *Rent591HomeDetailMutation) SectionID() (r int, exists bool) {
	v := m.section_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSectionID returns the old "section_id" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldSectionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSectionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSectionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSectionID: %w", err)
	}
	return oldValue.SectionID, nil
}

// AddSectionID adds i to the "section_id" field.
func (m *Rent591HomeDetailMutation) AddSectionID(i int) {
	if m.addsection_id != nil {
		*m.addsection_id += i
	} else {
		m.addsection_id = &i
	}
}

// AddedSectionID returns the value that was added to the "section_id" field in this mutation.
func (m *Rent591HomeDetailMutation) AddedSectionID() (r int, exists bool) {
	v := m.addsection_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSectionID resets all changes to the "section_id" field.
func (m *Rent591HomeDetailMutation) ResetSectionID() {
	m.section_id = nil
	m.addsection_id = nil
}

// SetDealText sets the "deal_text" field.
func (m *Rent591HomeDetailMutation) SetDealText(s string) {
	m.deal_text = &s
}

// DealText returns the value of the "deal_text" field in the mutation.
func (m *Rent591HomeDetailMutation) DealText() (r string, exists bool) {
	v := m.deal_text
	if v == nil {
		return
	}
	return *v, true
}

// OldDealText returns the old "deal_text" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldDealText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDealText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDealText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDealText: %w", err)
	}
	return oldValue.DealText, nil
}

// ClearDealText clears the value of the "deal_text" field.
func (m *Rent591HomeDetailMutation) ClearDealText() {
	m.deal_text = nil
	m.clearedFields[rent591homedetail.FieldDealText] = struct{}{}
}

// DealTextCleared returns if the "deal_text" field was cleared in this mutation.
func (m *Rent591HomeDetailMutation) DealTextCleared() bool {
	_, ok := m.clearedFields[rent591homedetail.FieldDealText]
	return ok
}

// ResetDealText resets all changes to the "deal_text" field.
func (m *Rent591HomeDetailMutation) ResetDealText() {
	m.deal_text = nil
	delete(m.clearedFields, rent591homedetail.FieldDealText)
}

// SetDealTime sets the "deal_time" field.
func (m *Rent591HomeDetailMutation) SetDealTime(i int) {
	m.deal_time = &i
	m.adddeal_time = nil
}

// DealTime returns the value of the "deal_time" field in the mutation.
func (m *Rent591HomeDetailMutation) DealTime() (r int, exists bool) {
	v := m.deal_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDealTime returns the old "deal_time" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldDealTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDealTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDealTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDealTime: %w", err)
	}
	return oldValue.DealTime, nil
}

// AddDealTime adds i to the "deal_time" field.
func (m *Rent591HomeDetailMutation) AddDealTime(i int) {
	if m.adddeal_time != nil {
		*m.adddeal_time += i
	} else {
		m.adddeal_time = &i
	}
}

// AddedDealTime returns the value that was added to the "deal_time" field in this mutation.
func (m *Rent591HomeDetailMutation) AddedDealTime() (r int, exists bool) {
	v := m.adddeal_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetDealTime resets all changes to the "deal_time" field.
func (m *Rent591HomeDetailMutation) ResetDealTime() {
	m.deal_time = nil
	m.adddeal_time = nil
}

// SetPrice sets the "price" field.
func (m *Rent591HomeDetailMutation) SetPrice(i int) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *Rent591HomeDetailMutation) Price() (r int, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *Rent591HomeDetailMutation) AddPrice(i int) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *Rent591HomeDetailMutation) AddedPrice() (r int, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *Rent591HomeDetailMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetPriceUnit sets the "price_unit" field.
func (m *Rent591HomeDetailMutation) SetPriceUnit(s string) {
	m.price_unit = &s
}

// PriceUnit returns the value of the "price_unit" field in the mutation.
func (m *Rent591HomeDetailMutation) PriceUnit() (r string, exists bool) {
	v := m.price_unit
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceUnit returns the old "price_unit" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldPriceUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriceUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriceUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceUnit: %w", err)
	}
	return oldValue.PriceUnit, nil
}

// ResetPriceUnit resets all changes to the "price_unit" field.
func (m *Rent591HomeDetailMutation) ResetPriceUnit() {
	m.price_unit = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *Rent591HomeDetailMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *Rent591HomeDetailMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *Rent591HomeDetailMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *Rent591HomeDetailMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *Rent591HomeDetailMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Rent591HomeDetail entity.
// If the Rent591HomeDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *Rent591HomeDetailMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetRent591homesID sets the "rent591homes" edge to the Rent591Home entity by id.
func (m *Rent591HomeDetailMutation) SetRent591homesID(id int) {
	m.rent591homes = &id
}

// ClearRent591homes clears the "rent591homes" edge to the Rent591Home entity.
func (m *Rent591HomeDetailMutation) ClearRent591homes() {
	m.clearedrent591homes = true
}

// Rent591homesCleared reports if the "rent591homes" edge to the Rent591Home entity was cleared.
func (m *Rent591HomeDetailMutation) Rent591homesCleared() bool {
	return m.clearedrent591homes
}

// Rent591homesID returns the "rent591homes" edge ID in the mutation.
func (m *Rent591HomeDetailMutation) Rent591homesID() (id int, exists bool) {
	if m.rent591homes != nil {
		return *m.rent591homes, true
	}
	return
}

// Rent591homesIDs returns the "rent591homes" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// Rent591homesID instead. It exists only for internal usage by the builders.
func (m *Rent591HomeDetailMutation) Rent591homesIDs() (ids []int) {
	if id := m.rent591homes; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRent591homes resets all changes to the "rent591homes" edge.
func (m *Rent591HomeDetailMutation) ResetRent591homes() {
	m.rent591homes = nil
	m.clearedrent591homes = false
}

// AddRent591homeDetailBreadcrumbIDs adds the "rent591home_detail_breadcrumbs" edge to the Rent591HomeDetailBreadcrumb entity by ids.
func (m *Rent591HomeDetailMutation) AddRent591homeDetailBreadcrumbIDs(ids ...int) {
	if m.rent591home_detail_breadcrumbs == nil {
		m.rent591home_detail_breadcrumbs = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_detail_breadcrumbs[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetailBreadcrumbs clears the "rent591home_detail_breadcrumbs" edge to the Rent591HomeDetailBreadcrumb entity.
func (m *Rent591HomeDetailMutation) ClearRent591homeDetailBreadcrumbs() {
	m.clearedrent591home_detail_breadcrumbs = true
}

// Rent591homeDetailBreadcrumbsCleared reports if the "rent591home_detail_breadcrumbs" edge to the Rent591HomeDetailBreadcrumb entity was cleared.
func (m *Rent591HomeDetailMutation) Rent591homeDetailBreadcrumbsCleared() bool {
	return m.clearedrent591home_detail_breadcrumbs
}

// RemoveRent591homeDetailBreadcrumbIDs removes the "rent591home_detail_breadcrumbs" edge to the Rent591HomeDetailBreadcrumb entity by IDs.
func (m *Rent591HomeDetailMutation) RemoveRent591homeDetailBreadcrumbIDs(ids ...int) {
	if m.removedrent591home_detail_breadcrumbs == nil {
		m.removedrent591home_detail_breadcrumbs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_detail_breadcrumbs, ids[i])
		m.removedrent591home_detail_breadcrumbs[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetailBreadcrumbs returns the removed IDs of the "rent591home_detail_breadcrumbs" edge to the Rent591HomeDetailBreadcrumb entity.
func (m *Rent591HomeDetailMutation) RemovedRent591homeDetailBreadcrumbsIDs() (ids []int) {
	for id := range m.removedrent591home_detail_breadcrumbs {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailBreadcrumbsIDs returns the "rent591home_detail_breadcrumbs" edge IDs in the mutation.
func (m *Rent591HomeDetailMutation) Rent591homeDetailBreadcrumbsIDs() (ids []int) {
	for id := range m.rent591home_detail_breadcrumbs {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetailBreadcrumbs resets all changes to the "rent591home_detail_breadcrumbs" edge.
func (m *Rent591HomeDetailMutation) ResetRent591homeDetailBreadcrumbs() {
	m.rent591home_detail_breadcrumbs = nil
	m.clearedrent591home_detail_breadcrumbs = false
	m.removedrent591home_detail_breadcrumbs = nil
}

// AddRent591homeDetailShareinfoIDs adds the "rent591home_detail_shareinfos" edge to the Rent591HomeDetailShareInfo entity by ids.
func (m *Rent591HomeDetailMutation) AddRent591homeDetailShareinfoIDs(ids ...int) {
	if m.rent591home_detail_shareinfos == nil {
		m.rent591home_detail_shareinfos = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_detail_shareinfos[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetailShareinfos clears the "rent591home_detail_shareinfos" edge to the Rent591HomeDetailShareInfo entity.
func (m *Rent591HomeDetailMutation) ClearRent591homeDetailShareinfos() {
	m.clearedrent591home_detail_shareinfos = true
}

// Rent591homeDetailShareinfosCleared reports if the "rent591home_detail_shareinfos" edge to the Rent591HomeDetailShareInfo entity was cleared.
func (m *Rent591HomeDetailMutation) Rent591homeDetailShareinfosCleared() bool {
	return m.clearedrent591home_detail_shareinfos
}

// RemoveRent591homeDetailShareinfoIDs removes the "rent591home_detail_shareinfos" edge to the Rent591HomeDetailShareInfo entity by IDs.
func (m *Rent591HomeDetailMutation) RemoveRent591homeDetailShareinfoIDs(ids ...int) {
	if m.removedrent591home_detail_shareinfos == nil {
		m.removedrent591home_detail_shareinfos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_detail_shareinfos, ids[i])
		m.removedrent591home_detail_shareinfos[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetailShareinfos returns the removed IDs of the "rent591home_detail_shareinfos" edge to the Rent591HomeDetailShareInfo entity.
func (m *Rent591HomeDetailMutation) RemovedRent591homeDetailShareinfosIDs() (ids []int) {
	for id := range m.removedrent591home_detail_shareinfos {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailShareinfosIDs returns the "rent591home_detail_shareinfos" edge IDs in the mutation.
func (m *Rent591HomeDetailMutation) Rent591homeDetailShareinfosIDs() (ids []int) {
	for id := range m.rent591home_detail_shareinfos {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetailShareinfos resets all changes to the "rent591home_detail_shareinfos" edge.
func (m *Rent591HomeDetailMutation) ResetRent591homeDetailShareinfos() {
	m.rent591home_detail_shareinfos = nil
	m.clearedrent591home_detail_shareinfos = false
	m.removedrent591home_detail_shareinfos = nil
}

// AddRent591homeDetailBrowseIDs adds the "rent591home_detail_browses" edge to the Rent591HomeDetailBrowse entity by ids.
func (m *Rent591HomeDetailMutation) AddRent591homeDetailBrowseIDs(ids ...int) {
	if m.rent591home_detail_browses == nil {
		m.rent591home_detail_browses = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_detail_browses[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetailBrowses clears the "rent591home_detail_browses" edge to the Rent591HomeDetailBrowse entity.
func (m *Rent591HomeDetailMutation) ClearRent591homeDetailBrowses() {
	m.clearedrent591home_detail_browses = true
}

// Rent591homeDetailBrowsesCleared reports if the "rent591home_detail_browses" edge to the Rent591HomeDetailBrowse entity was cleared.
func (m *Rent591HomeDetailMutation) Rent591homeDetailBrowsesCleared() bool {
	return m.clearedrent591home_detail_browses
}

// RemoveRent591homeDetailBrowseIDs removes the "rent591home_detail_browses" edge to the Rent591HomeDetailBrowse entity by IDs.
func (m *Rent591HomeDetailMutation) RemoveRent591homeDetailBrowseIDs(ids ...int) {
	if m.removedrent591home_detail_browses == nil {
		m.removedrent591home_detail_browses = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_detail_browses, ids[i])
		m.removedrent591home_detail_browses[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetailBrowses returns the removed IDs of the "rent591home_detail_browses" edge to the Rent591HomeDetailBrowse entity.
func (m *Rent591HomeDetailMutation) RemovedRent591homeDetailBrowsesIDs() (ids []int) {
	for id := range m.removedrent591home_detail_browses {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailBrowsesIDs returns the "rent591home_detail_browses" edge IDs in the mutation.
func (m *Rent591HomeDetailMutation) Rent591homeDetailBrowsesIDs() (ids []int) {
	for id := range m.rent591home_detail_browses {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetailBrowses resets all changes to the "rent591home_detail_browses" edge.
func (m *Rent591HomeDetailMutation) ResetRent591homeDetailBrowses() {
	m.rent591home_detail_browses = nil
	m.clearedrent591home_detail_browses = false
	m.removedrent591home_detail_browses = nil
}

// AddRent591homeDetailTagIDs adds the "rent591home_detail_tags" edge to the Rent591HomeDetailTag entity by ids.
func (m *Rent591HomeDetailMutation) AddRent591homeDetailTagIDs(ids ...int) {
	if m.rent591home_detail_tags == nil {
		m.rent591home_detail_tags = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_detail_tags[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetailTags clears the "rent591home_detail_tags" edge to the Rent591HomeDetailTag entity.
func (m *Rent591HomeDetailMutation) ClearRent591homeDetailTags() {
	m.clearedrent591home_detail_tags = true
}

// Rent591homeDetailTagsCleared reports if the "rent591home_detail_tags" edge to the Rent591HomeDetailTag entity was cleared.
func (m *Rent591HomeDetailMutation) Rent591homeDetailTagsCleared() bool {
	return m.clearedrent591home_detail_tags
}

// RemoveRent591homeDetailTagIDs removes the "rent591home_detail_tags" edge to the Rent591HomeDetailTag entity by IDs.
func (m *Rent591HomeDetailMutation) RemoveRent591homeDetailTagIDs(ids ...int) {
	if m.removedrent591home_detail_tags == nil {
		m.removedrent591home_detail_tags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_detail_tags, ids[i])
		m.removedrent591home_detail_tags[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetailTags returns the removed IDs of the "rent591home_detail_tags" edge to the Rent591HomeDetailTag entity.
func (m *Rent591HomeDetailMutation) RemovedRent591homeDetailTagsIDs() (ids []int) {
	for id := range m.removedrent591home_detail_tags {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailTagsIDs returns the "rent591home_detail_tags" edge IDs in the mutation.
func (m *Rent591HomeDetailMutation) Rent591homeDetailTagsIDs() (ids []int) {
	for id := range m.rent591home_detail_tags {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetailTags resets all changes to the "rent591home_detail_tags" edge.
func (m *Rent591HomeDetailMutation) ResetRent591homeDetailTags() {
	m.rent591home_detail_tags = nil
	m.clearedrent591home_detail_tags = false
	m.removedrent591home_detail_tags = nil
}

// AddRent591homeDetailNavdataIDs adds the "rent591home_detail_navdatas" edge to the Rent591HomeDetailNavData entity by ids.
func (m *Rent591HomeDetailMutation) AddRent591homeDetailNavdataIDs(ids ...int) {
	if m.rent591home_detail_navdatas == nil {
		m.rent591home_detail_navdatas = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_detail_navdatas[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetailNavdatas clears the "rent591home_detail_navdatas" edge to the Rent591HomeDetailNavData entity.
func (m *Rent591HomeDetailMutation) ClearRent591homeDetailNavdatas() {
	m.clearedrent591home_detail_navdatas = true
}

// Rent591homeDetailNavdatasCleared reports if the "rent591home_detail_navdatas" edge to the Rent591HomeDetailNavData entity was cleared.
func (m *Rent591HomeDetailMutation) Rent591homeDetailNavdatasCleared() bool {
	return m.clearedrent591home_detail_navdatas
}

// RemoveRent591homeDetailNavdataIDs removes the "rent591home_detail_navdatas" edge to the Rent591HomeDetailNavData entity by IDs.
func (m *Rent591HomeDetailMutation) RemoveRent591homeDetailNavdataIDs(ids ...int) {
	if m.removedrent591home_detail_navdatas == nil {
		m.removedrent591home_detail_navdatas = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_detail_navdatas, ids[i])
		m.removedrent591home_detail_navdatas[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetailNavdatas returns the removed IDs of the "rent591home_detail_navdatas" edge to the Rent591HomeDetailNavData entity.
func (m *Rent591HomeDetailMutation) RemovedRent591homeDetailNavdatasIDs() (ids []int) {
	for id := range m.removedrent591home_detail_navdatas {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailNavdatasIDs returns the "rent591home_detail_navdatas" edge IDs in the mutation.
func (m *Rent591HomeDetailMutation) Rent591homeDetailNavdatasIDs() (ids []int) {
	for id := range m.rent591home_detail_navdatas {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetailNavdatas resets all changes to the "rent591home_detail_navdatas" edge.
func (m *Rent591HomeDetailMutation) ResetRent591homeDetailNavdatas() {
	m.rent591home_detail_navdatas = nil
	m.clearedrent591home_detail_navdatas = false
	m.removedrent591home_detail_navdatas = nil
}

// AddRent591homeDetailInfoIDs adds the "rent591home_detail_infos" edge to the Rent591HomeDetailInfo entity by ids.
func (m *Rent591HomeDetailMutation) AddRent591homeDetailInfoIDs(ids ...int) {
	if m.rent591home_detail_infos == nil {
		m.rent591home_detail_infos = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_detail_infos[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetailInfos clears the "rent591home_detail_infos" edge to the Rent591HomeDetailInfo entity.
func (m *Rent591HomeDetailMutation) ClearRent591homeDetailInfos() {
	m.clearedrent591home_detail_infos = true
}

// Rent591homeDetailInfosCleared reports if the "rent591home_detail_infos" edge to the Rent591HomeDetailInfo entity was cleared.
func (m *Rent591HomeDetailMutation) Rent591homeDetailInfosCleared() bool {
	return m.clearedrent591home_detail_infos
}

// RemoveRent591homeDetailInfoIDs removes the "rent591home_detail_infos" edge to the Rent591HomeDetailInfo entity by IDs.
func (m *Rent591HomeDetailMutation) RemoveRent591homeDetailInfoIDs(ids ...int) {
	if m.removedrent591home_detail_infos == nil {
		m.removedrent591home_detail_infos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_detail_infos, ids[i])
		m.removedrent591home_detail_infos[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetailInfos returns the removed IDs of the "rent591home_detail_infos" edge to the Rent591HomeDetailInfo entity.
func (m *Rent591HomeDetailMutation) RemovedRent591homeDetailInfosIDs() (ids []int) {
	for id := range m.removedrent591home_detail_infos {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailInfosIDs returns the "rent591home_detail_infos" edge IDs in the mutation.
func (m *Rent591HomeDetailMutation) Rent591homeDetailInfosIDs() (ids []int) {
	for id := range m.rent591home_detail_infos {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetailInfos resets all changes to the "rent591home_detail_infos" edge.
func (m *Rent591HomeDetailMutation) ResetRent591homeDetailInfos() {
	m.rent591home_detail_infos = nil
	m.clearedrent591home_detail_infos = false
	m.removedrent591home_detail_infos = nil
}

// AddRent591homeDetailPublishIDs adds the "rent591home_detail_publishs" edge to the Rent591HomeDetailPublish entity by ids.
func (m *Rent591HomeDetailMutation) AddRent591homeDetailPublishIDs(ids ...int) {
	if m.rent591home_detail_publishs == nil {
		m.rent591home_detail_publishs = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_detail_publishs[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetailPublishs clears the "rent591home_detail_publishs" edge to the Rent591HomeDetailPublish entity.
func (m *Rent591HomeDetailMutation) ClearRent591homeDetailPublishs() {
	m.clearedrent591home_detail_publishs = true
}

// Rent591homeDetailPublishsCleared reports if the "rent591home_detail_publishs" edge to the Rent591HomeDetailPublish entity was cleared.
func (m *Rent591HomeDetailMutation) Rent591homeDetailPublishsCleared() bool {
	return m.clearedrent591home_detail_publishs
}

// RemoveRent591homeDetailPublishIDs removes the "rent591home_detail_publishs" edge to the Rent591HomeDetailPublish entity by IDs.
func (m *Rent591HomeDetailMutation) RemoveRent591homeDetailPublishIDs(ids ...int) {
	if m.removedrent591home_detail_publishs == nil {
		m.removedrent591home_detail_publishs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_detail_publishs, ids[i])
		m.removedrent591home_detail_publishs[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetailPublishs returns the removed IDs of the "rent591home_detail_publishs" edge to the Rent591HomeDetailPublish entity.
func (m *Rent591HomeDetailMutation) RemovedRent591homeDetailPublishsIDs() (ids []int) {
	for id := range m.removedrent591home_detail_publishs {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailPublishsIDs returns the "rent591home_detail_publishs" edge IDs in the mutation.
func (m *Rent591HomeDetailMutation) Rent591homeDetailPublishsIDs() (ids []int) {
	for id := range m.rent591home_detail_publishs {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetailPublishs resets all changes to the "rent591home_detail_publishs" edge.
func (m *Rent591HomeDetailMutation) ResetRent591homeDetailPublishs() {
	m.rent591home_detail_publishs = nil
	m.clearedrent591home_detail_publishs = false
	m.removedrent591home_detail_publishs = nil
}

// SetRent591homeDetailPositionRoundsID sets the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity by id.
func (m *Rent591HomeDetailMutation) SetRent591homeDetailPositionRoundsID(id int) {
	m.rent591home_detail_position_rounds = &id
}

// ClearRent591homeDetailPositionRounds clears the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity.
func (m *Rent591HomeDetailMutation) ClearRent591homeDetailPositionRounds() {
	m.clearedrent591home_detail_position_rounds = true
}

// Rent591homeDetailPositionRoundsCleared reports if the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity was cleared.
func (m *Rent591HomeDetailMutation) Rent591homeDetailPositionRoundsCleared() bool {
	return m.clearedrent591home_detail_position_rounds
}

// Rent591homeDetailPositionRoundsID returns the "rent591home_detail_position_rounds" edge ID in the mutation.
func (m *Rent591HomeDetailMutation) Rent591homeDetailPositionRoundsID() (id int, exists bool) {
	if m.rent591home_detail_position_rounds != nil {
		return *m.rent591home_detail_position_rounds, true
	}
	return
}

// Rent591homeDetailPositionRoundsIDs returns the "rent591home_detail_position_rounds" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// Rent591homeDetailPositionRoundsID instead. It exists only for internal usage by the builders.
func (m *Rent591HomeDetailMutation) Rent591homeDetailPositionRoundsIDs() (ids []int) {
	if id := m.rent591home_detail_position_rounds; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRent591homeDetailPositionRounds resets all changes to the "rent591home_detail_position_rounds" edge.
func (m *Rent591HomeDetailMutation) ResetRent591homeDetailPositionRounds() {
	m.rent591home_detail_position_rounds = nil
	m.clearedrent591home_detail_position_rounds = false
}

// Where appends a list predicates to the Rent591HomeDetailMutation builder.
func (m *Rent591HomeDetailMutation) Where(ps ...predicate.Rent591HomeDetail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeDetailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeDetailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeDetail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeDetailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeDetailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeDetail).
func (m *Rent591HomeDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeDetailMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.title != nil {
		fields = append(fields, rent591homedetail.FieldTitle)
	}
	if m.deposit != nil {
		fields = append(fields, rent591homedetail.FieldDeposit)
	}
	if m.kind != nil {
		fields = append(fields, rent591homedetail.FieldKind)
	}
	if m.relieved != nil {
		fields = append(fields, rent591homedetail.FieldRelieved)
	}
	if m.region_id != nil {
		fields = append(fields, rent591homedetail.FieldRegionID)
	}
	if m.section_id != nil {
		fields = append(fields, rent591homedetail.FieldSectionID)
	}
	if m.deal_text != nil {
		fields = append(fields, rent591homedetail.FieldDealText)
	}
	if m.deal_time != nil {
		fields = append(fields, rent591homedetail.FieldDealTime)
	}
	if m.price != nil {
		fields = append(fields, rent591homedetail.FieldPrice)
	}
	if m.price_unit != nil {
		fields = append(fields, rent591homedetail.FieldPriceUnit)
	}
	if m.created_at != nil {
		fields = append(fields, rent591homedetail.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, rent591homedetail.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeDetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetail.FieldTitle:
		return m.Title()
	case rent591homedetail.FieldDeposit:
		return m.Deposit()
	case rent591homedetail.FieldKind:
		return m.Kind()
	case rent591homedetail.FieldRelieved:
		return m.Relieved()
	case rent591homedetail.FieldRegionID:
		return m.RegionID()
	case rent591homedetail.FieldSectionID:
		return m.SectionID()
	case rent591homedetail.FieldDealText:
		return m.DealText()
	case rent591homedetail.FieldDealTime:
		return m.DealTime()
	case rent591homedetail.FieldPrice:
		return m.Price()
	case rent591homedetail.FieldPriceUnit:
		return m.PriceUnit()
	case rent591homedetail.FieldCreatedAt:
		return m.CreatedAt()
	case rent591homedetail.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homedetail.FieldTitle:
		return m.OldTitle(ctx)
	case rent591homedetail.FieldDeposit:
		return m.OldDeposit(ctx)
	case rent591homedetail.FieldKind:
		return m.OldKind(ctx)
	case rent591homedetail.FieldRelieved:
		return m.OldRelieved(ctx)
	case rent591homedetail.FieldRegionID:
		return m.OldRegionID(ctx)
	case rent591homedetail.FieldSectionID:
		return m.OldSectionID(ctx)
	case rent591homedetail.FieldDealText:
		return m.OldDealText(ctx)
	case rent591homedetail.FieldDealTime:
		return m.OldDealTime(ctx)
	case rent591homedetail.FieldPrice:
		return m.OldPrice(ctx)
	case rent591homedetail.FieldPriceUnit:
		return m.OldPriceUnit(ctx)
	case rent591homedetail.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case rent591homedetail.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homedetail.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case rent591homedetail.FieldDeposit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeposit(v)
		return nil
	case rent591homedetail.FieldKind:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case rent591homedetail.FieldRelieved:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelieved(v)
		return nil
	case rent591homedetail.FieldRegionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegionID(v)
		return nil
	case rent591homedetail.FieldSectionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSectionID(v)
		return nil
	case rent591homedetail.FieldDealText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDealText(v)
		return nil
	case rent591homedetail.FieldDealTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDealTime(v)
		return nil
	case rent591homedetail.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case rent591homedetail.FieldPriceUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceUnit(v)
		return nil
	case rent591homedetail.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case rent591homedetail.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeDetailMutation) AddedFields() []string {
	var fields []string
	if m.addkind != nil {
		fields = append(fields, rent591homedetail.FieldKind)
	}
	if m.addrelieved != nil {
		fields = append(fields, rent591homedetail.FieldRelieved)
	}
	if m.addregion_id != nil {
		fields = append(fields, rent591homedetail.FieldRegionID)
	}
	if m.addsection_id != nil {
		fields = append(fields, rent591homedetail.FieldSectionID)
	}
	if m.adddeal_time != nil {
		fields = append(fields, rent591homedetail.FieldDealTime)
	}
	if m.addprice != nil {
		fields = append(fields, rent591homedetail.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeDetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetail.FieldKind:
		return m.AddedKind()
	case rent591homedetail.FieldRelieved:
		return m.AddedRelieved()
	case rent591homedetail.FieldRegionID:
		return m.AddedRegionID()
	case rent591homedetail.FieldSectionID:
		return m.AddedSectionID()
	case rent591homedetail.FieldDealTime:
		return m.AddedDealTime()
	case rent591homedetail.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rent591homedetail.FieldKind:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKind(v)
		return nil
	case rent591homedetail.FieldRelieved:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRelieved(v)
		return nil
	case rent591homedetail.FieldRegionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRegionID(v)
		return nil
	case rent591homedetail.FieldSectionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSectionID(v)
		return nil
	case rent591homedetail.FieldDealTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDealTime(v)
		return nil
	case rent591homedetail.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeDetailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(rent591homedetail.FieldDealText) {
		fields = append(fields, rent591homedetail.FieldDealText)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeDetailMutation) ClearField(name string) error {
	switch name {
	case rent591homedetail.FieldDealText:
		m.ClearDealText()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeDetailMutation) ResetField(name string) error {
	switch name {
	case rent591homedetail.FieldTitle:
		m.ResetTitle()
		return nil
	case rent591homedetail.FieldDeposit:
		m.ResetDeposit()
		return nil
	case rent591homedetail.FieldKind:
		m.ResetKind()
		return nil
	case rent591homedetail.FieldRelieved:
		m.ResetRelieved()
		return nil
	case rent591homedetail.FieldRegionID:
		m.ResetRegionID()
		return nil
	case rent591homedetail.FieldSectionID:
		m.ResetSectionID()
		return nil
	case rent591homedetail.FieldDealText:
		m.ResetDealText()
		return nil
	case rent591homedetail.FieldDealTime:
		m.ResetDealTime()
		return nil
	case rent591homedetail.FieldPrice:
		m.ResetPrice()
		return nil
	case rent591homedetail.FieldPriceUnit:
		m.ResetPriceUnit()
		return nil
	case rent591homedetail.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case rent591homedetail.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 9)
	if m.rent591homes != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homes)
	}
	if m.rent591home_detail_breadcrumbs != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailBreadcrumbs)
	}
	if m.rent591home_detail_shareinfos != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailShareinfos)
	}
	if m.rent591home_detail_browses != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailBrowses)
	}
	if m.rent591home_detail_tags != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailTags)
	}
	if m.rent591home_detail_navdatas != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailNavdatas)
	}
	if m.rent591home_detail_infos != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailInfos)
	}
	if m.rent591home_detail_publishs != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailPublishs)
	}
	if m.rent591home_detail_position_rounds != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailPositionRounds)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeDetailMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetail.EdgeRent591homes:
		if id := m.rent591homes; id != nil {
			return []ent.Value{*id}
		}
	case rent591homedetail.EdgeRent591homeDetailBreadcrumbs:
		ids := make([]ent.Value, 0, len(m.rent591home_detail_breadcrumbs))
		for id := range m.rent591home_detail_breadcrumbs {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailShareinfos:
		ids := make([]ent.Value, 0, len(m.rent591home_detail_shareinfos))
		for id := range m.rent591home_detail_shareinfos {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailBrowses:
		ids := make([]ent.Value, 0, len(m.rent591home_detail_browses))
		for id := range m.rent591home_detail_browses {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailTags:
		ids := make([]ent.Value, 0, len(m.rent591home_detail_tags))
		for id := range m.rent591home_detail_tags {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailNavdatas:
		ids := make([]ent.Value, 0, len(m.rent591home_detail_navdatas))
		for id := range m.rent591home_detail_navdatas {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailInfos:
		ids := make([]ent.Value, 0, len(m.rent591home_detail_infos))
		for id := range m.rent591home_detail_infos {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailPublishs:
		ids := make([]ent.Value, 0, len(m.rent591home_detail_publishs))
		for id := range m.rent591home_detail_publishs {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailPositionRounds:
		if id := m.rent591home_detail_position_rounds; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 9)
	if m.removedrent591home_detail_breadcrumbs != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailBreadcrumbs)
	}
	if m.removedrent591home_detail_shareinfos != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailShareinfos)
	}
	if m.removedrent591home_detail_browses != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailBrowses)
	}
	if m.removedrent591home_detail_tags != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailTags)
	}
	if m.removedrent591home_detail_navdatas != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailNavdatas)
	}
	if m.removedrent591home_detail_infos != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailInfos)
	}
	if m.removedrent591home_detail_publishs != nil {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailPublishs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeDetailMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetail.EdgeRent591homeDetailBreadcrumbs:
		ids := make([]ent.Value, 0, len(m.removedrent591home_detail_breadcrumbs))
		for id := range m.removedrent591home_detail_breadcrumbs {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailShareinfos:
		ids := make([]ent.Value, 0, len(m.removedrent591home_detail_shareinfos))
		for id := range m.removedrent591home_detail_shareinfos {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailBrowses:
		ids := make([]ent.Value, 0, len(m.removedrent591home_detail_browses))
		for id := range m.removedrent591home_detail_browses {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailTags:
		ids := make([]ent.Value, 0, len(m.removedrent591home_detail_tags))
		for id := range m.removedrent591home_detail_tags {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailNavdatas:
		ids := make([]ent.Value, 0, len(m.removedrent591home_detail_navdatas))
		for id := range m.removedrent591home_detail_navdatas {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailInfos:
		ids := make([]ent.Value, 0, len(m.removedrent591home_detail_infos))
		for id := range m.removedrent591home_detail_infos {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetail.EdgeRent591homeDetailPublishs:
		ids := make([]ent.Value, 0, len(m.removedrent591home_detail_publishs))
		for id := range m.removedrent591home_detail_publishs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 9)
	if m.clearedrent591homes {
		edges = append(edges, rent591homedetail.EdgeRent591homes)
	}
	if m.clearedrent591home_detail_breadcrumbs {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailBreadcrumbs)
	}
	if m.clearedrent591home_detail_shareinfos {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailShareinfos)
	}
	if m.clearedrent591home_detail_browses {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailBrowses)
	}
	if m.clearedrent591home_detail_tags {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailTags)
	}
	if m.clearedrent591home_detail_navdatas {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailNavdatas)
	}
	if m.clearedrent591home_detail_infos {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailInfos)
	}
	if m.clearedrent591home_detail_publishs {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailPublishs)
	}
	if m.clearedrent591home_detail_position_rounds {
		edges = append(edges, rent591homedetail.EdgeRent591homeDetailPositionRounds)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeDetailMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homedetail.EdgeRent591homes:
		return m.clearedrent591homes
	case rent591homedetail.EdgeRent591homeDetailBreadcrumbs:
		return m.clearedrent591home_detail_breadcrumbs
	case rent591homedetail.EdgeRent591homeDetailShareinfos:
		return m.clearedrent591home_detail_shareinfos
	case rent591homedetail.EdgeRent591homeDetailBrowses:
		return m.clearedrent591home_detail_browses
	case rent591homedetail.EdgeRent591homeDetailTags:
		return m.clearedrent591home_detail_tags
	case rent591homedetail.EdgeRent591homeDetailNavdatas:
		return m.clearedrent591home_detail_navdatas
	case rent591homedetail.EdgeRent591homeDetailInfos:
		return m.clearedrent591home_detail_infos
	case rent591homedetail.EdgeRent591homeDetailPublishs:
		return m.clearedrent591home_detail_publishs
	case rent591homedetail.EdgeRent591homeDetailPositionRounds:
		return m.clearedrent591home_detail_position_rounds
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeDetailMutation) ClearEdge(name string) error {
	switch name {
	case rent591homedetail.EdgeRent591homes:
		m.ClearRent591homes()
		return nil
	case rent591homedetail.EdgeRent591homeDetailPositionRounds:
		m.ClearRent591homeDetailPositionRounds()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeDetailMutation) ResetEdge(name string) error {
	switch name {
	case rent591homedetail.EdgeRent591homes:
		m.ResetRent591homes()
		return nil
	case rent591homedetail.EdgeRent591homeDetailBreadcrumbs:
		m.ResetRent591homeDetailBreadcrumbs()
		return nil
	case rent591homedetail.EdgeRent591homeDetailShareinfos:
		m.ResetRent591homeDetailShareinfos()
		return nil
	case rent591homedetail.EdgeRent591homeDetailBrowses:
		m.ResetRent591homeDetailBrowses()
		return nil
	case rent591homedetail.EdgeRent591homeDetailTags:
		m.ResetRent591homeDetailTags()
		return nil
	case rent591homedetail.EdgeRent591homeDetailNavdatas:
		m.ResetRent591homeDetailNavdatas()
		return nil
	case rent591homedetail.EdgeRent591homeDetailInfos:
		m.ResetRent591homeDetailInfos()
		return nil
	case rent591homedetail.EdgeRent591homeDetailPublishs:
		m.ResetRent591homeDetailPublishs()
		return nil
	case rent591homedetail.EdgeRent591homeDetailPositionRounds:
		m.ResetRent591homeDetailPositionRounds()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetail edge %s", name)
}

// Rent591HomeDetailBreadcrumbMutation represents an operation that mutates the Rent591HomeDetailBreadcrumb nodes in the graph.
type Rent591HomeDetailBreadcrumbMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	name                       *string
	post_id                    *int
	addpost_id                 *int
	query                      *string
	link                       *string
	clearedFields              map[string]struct{}
	rent591home_details        map[int]struct{}
	removedrent591home_details map[int]struct{}
	clearedrent591home_details bool
	done                       bool
	oldValue                   func(context.Context) (*Rent591HomeDetailBreadcrumb, error)
	predicates                 []predicate.Rent591HomeDetailBreadcrumb
}

var _ ent.Mutation = (*Rent591HomeDetailBreadcrumbMutation)(nil)

// rent591homedetailbreadcrumbOption allows management of the mutation configuration using functional options.
type rent591homedetailbreadcrumbOption func(*Rent591HomeDetailBreadcrumbMutation)

// newRent591HomeDetailBreadcrumbMutation creates new mutation for the Rent591HomeDetailBreadcrumb entity.
func newRent591HomeDetailBreadcrumbMutation(c config, op Op, opts ...rent591homedetailbreadcrumbOption) *Rent591HomeDetailBreadcrumbMutation {
	m := &Rent591HomeDetailBreadcrumbMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeDetailBreadcrumb,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeDetailBreadcrumbID sets the ID field of the mutation.
func withRent591HomeDetailBreadcrumbID(id int) rent591homedetailbreadcrumbOption {
	return func(m *Rent591HomeDetailBreadcrumbMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeDetailBreadcrumb
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeDetailBreadcrumb, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeDetailBreadcrumb.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeDetailBreadcrumb sets the old Rent591HomeDetailBreadcrumb of the mutation.
func withRent591HomeDetailBreadcrumb(node *Rent591HomeDetailBreadcrumb) rent591homedetailbreadcrumbOption {
	return func(m *Rent591HomeDetailBreadcrumbMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeDetailBreadcrumb, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeDetailBreadcrumbMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeDetailBreadcrumbMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeDetailBreadcrumbMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeDetailBreadcrumb.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *Rent591HomeDetailBreadcrumbMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Rent591HomeDetailBreadcrumb entity.
// If the Rent591HomeDetailBreadcrumb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailBreadcrumbMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *Rent591HomeDetailBreadcrumbMutation) ResetName() {
	m.name = nil
}

// SetPostID sets the "post_id" field.
func (m *Rent591HomeDetailBreadcrumbMutation) SetPostID(i int) {
	m.post_id = &i
	m.addpost_id = nil
}

// PostID returns the value of the "post_id" field in the mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) PostID() (r int, exists bool) {
	v := m.post_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPostID returns the old "post_id" field's value of the Rent591HomeDetailBreadcrumb entity.
// If the Rent591HomeDetailBreadcrumb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailBreadcrumbMutation) OldPostID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostID: %w", err)
	}
	return oldValue.PostID, nil
}

// AddPostID adds i to the "post_id" field.
func (m *Rent591HomeDetailBreadcrumbMutation) AddPostID(i int) {
	if m.addpost_id != nil {
		*m.addpost_id += i
	} else {
		m.addpost_id = &i
	}
}

// AddedPostID returns the value that was added to the "post_id" field in this mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) AddedPostID() (r int, exists bool) {
	v := m.addpost_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPostID resets all changes to the "post_id" field.
func (m *Rent591HomeDetailBreadcrumbMutation) ResetPostID() {
	m.post_id = nil
	m.addpost_id = nil
}

// SetQuery sets the "query" field.
func (m *Rent591HomeDetailBreadcrumbMutation) SetQuery(s string) {
	m.query = &s
}

// Query returns the value of the "query" field in the mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) Query() (r string, exists bool) {
	v := m.query
	if v == nil {
		return
	}
	return *v, true
}

// OldQuery returns the old "query" field's value of the Rent591HomeDetailBreadcrumb entity.
// If the Rent591HomeDetailBreadcrumb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailBreadcrumbMutation) OldQuery(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuery is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuery requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuery: %w", err)
	}
	return oldValue.Query, nil
}

// ResetQuery resets all changes to the "query" field.
func (m *Rent591HomeDetailBreadcrumbMutation) ResetQuery() {
	m.query = nil
}

// SetLink sets the "link" field.
func (m *Rent591HomeDetailBreadcrumbMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the Rent591HomeDetailBreadcrumb entity.
// If the Rent591HomeDetailBreadcrumb object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailBreadcrumbMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *Rent591HomeDetailBreadcrumbMutation) ResetLink() {
	m.link = nil
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by ids.
func (m *Rent591HomeDetailBreadcrumbMutation) AddRent591homeDetailIDs(ids ...int) {
	if m.rent591home_details == nil {
		m.rent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_details[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailBreadcrumbMutation) ClearRent591homeDetails() {
	m.clearedrent591home_details = true
}

// Rent591homeDetailsCleared reports if the "rent591home_details" edge to the Rent591HomeDetail entity was cleared.
func (m *Rent591HomeDetailBreadcrumbMutation) Rent591homeDetailsCleared() bool {
	return m.clearedrent591home_details
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (m *Rent591HomeDetailBreadcrumbMutation) RemoveRent591homeDetailIDs(ids ...int) {
	if m.removedrent591home_details == nil {
		m.removedrent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_details, ids[i])
		m.removedrent591home_details[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetails returns the removed IDs of the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailBreadcrumbMutation) RemovedRent591homeDetailsIDs() (ids []int) {
	for id := range m.removedrent591home_details {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailsIDs returns the "rent591home_details" edge IDs in the mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) Rent591homeDetailsIDs() (ids []int) {
	for id := range m.rent591home_details {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetails resets all changes to the "rent591home_details" edge.
func (m *Rent591HomeDetailBreadcrumbMutation) ResetRent591homeDetails() {
	m.rent591home_details = nil
	m.clearedrent591home_details = false
	m.removedrent591home_details = nil
}

// Where appends a list predicates to the Rent591HomeDetailBreadcrumbMutation builder.
func (m *Rent591HomeDetailBreadcrumbMutation) Where(ps ...predicate.Rent591HomeDetailBreadcrumb) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeDetailBreadcrumbMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeDetailBreadcrumbMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeDetailBreadcrumb, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeDetailBreadcrumbMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeDetailBreadcrumbMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeDetailBreadcrumb).
func (m *Rent591HomeDetailBreadcrumbMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeDetailBreadcrumbMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, rent591homedetailbreadcrumb.FieldName)
	}
	if m.post_id != nil {
		fields = append(fields, rent591homedetailbreadcrumb.FieldPostID)
	}
	if m.query != nil {
		fields = append(fields, rent591homedetailbreadcrumb.FieldQuery)
	}
	if m.link != nil {
		fields = append(fields, rent591homedetailbreadcrumb.FieldLink)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeDetailBreadcrumbMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailbreadcrumb.FieldName:
		return m.Name()
	case rent591homedetailbreadcrumb.FieldPostID:
		return m.PostID()
	case rent591homedetailbreadcrumb.FieldQuery:
		return m.Query()
	case rent591homedetailbreadcrumb.FieldLink:
		return m.Link()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeDetailBreadcrumbMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homedetailbreadcrumb.FieldName:
		return m.OldName(ctx)
	case rent591homedetailbreadcrumb.FieldPostID:
		return m.OldPostID(ctx)
	case rent591homedetailbreadcrumb.FieldQuery:
		return m.OldQuery(ctx)
	case rent591homedetailbreadcrumb.FieldLink:
		return m.OldLink(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeDetailBreadcrumb field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailBreadcrumbMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailbreadcrumb.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rent591homedetailbreadcrumb.FieldPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostID(v)
		return nil
	case rent591homedetailbreadcrumb.FieldQuery:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuery(v)
		return nil
	case rent591homedetailbreadcrumb.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailBreadcrumb field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) AddedFields() []string {
	var fields []string
	if m.addpost_id != nil {
		fields = append(fields, rent591homedetailbreadcrumb.FieldPostID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeDetailBreadcrumbMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailbreadcrumb.FieldPostID:
		return m.AddedPostID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailBreadcrumbMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailbreadcrumb.FieldPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPostID(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailBreadcrumb numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeDetailBreadcrumbMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeDetailBreadcrumb nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeDetailBreadcrumbMutation) ResetField(name string) error {
	switch name {
	case rent591homedetailbreadcrumb.FieldName:
		m.ResetName()
		return nil
	case rent591homedetailbreadcrumb.FieldPostID:
		m.ResetPostID()
		return nil
	case rent591homedetailbreadcrumb.FieldQuery:
		m.ResetQuery()
		return nil
	case rent591homedetailbreadcrumb.FieldLink:
		m.ResetLink()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailBreadcrumb field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rent591home_details != nil {
		edges = append(edges, rent591homedetailbreadcrumb.EdgeRent591homeDetails)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailbreadcrumb.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.rent591home_details))
		for id := range m.rent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrent591home_details != nil {
		edges = append(edges, rent591homedetailbreadcrumb.EdgeRent591homeDetails)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailbreadcrumb.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.removedrent591home_details))
		for id := range m.removedrent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrent591home_details {
		edges = append(edges, rent591homedetailbreadcrumb.EdgeRent591homeDetails)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeDetailBreadcrumbMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homedetailbreadcrumb.EdgeRent591homeDetails:
		return m.clearedrent591home_details
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeDetailBreadcrumbMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailBreadcrumb unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeDetailBreadcrumbMutation) ResetEdge(name string) error {
	switch name {
	case rent591homedetailbreadcrumb.EdgeRent591homeDetails:
		m.ResetRent591homeDetails()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailBreadcrumb edge %s", name)
}

// Rent591HomeDetailBrowseMutation represents an operation that mutates the Rent591HomeDetailBrowse nodes in the graph.
type Rent591HomeDetailBrowseMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	pc                         *int
	addpc                      *int
	mobile                     *int
	addmobile                  *int
	clearedFields              map[string]struct{}
	rent591home_details        map[int]struct{}
	removedrent591home_details map[int]struct{}
	clearedrent591home_details bool
	done                       bool
	oldValue                   func(context.Context) (*Rent591HomeDetailBrowse, error)
	predicates                 []predicate.Rent591HomeDetailBrowse
}

var _ ent.Mutation = (*Rent591HomeDetailBrowseMutation)(nil)

// rent591homedetailbrowseOption allows management of the mutation configuration using functional options.
type rent591homedetailbrowseOption func(*Rent591HomeDetailBrowseMutation)

// newRent591HomeDetailBrowseMutation creates new mutation for the Rent591HomeDetailBrowse entity.
func newRent591HomeDetailBrowseMutation(c config, op Op, opts ...rent591homedetailbrowseOption) *Rent591HomeDetailBrowseMutation {
	m := &Rent591HomeDetailBrowseMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeDetailBrowse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeDetailBrowseID sets the ID field of the mutation.
func withRent591HomeDetailBrowseID(id int) rent591homedetailbrowseOption {
	return func(m *Rent591HomeDetailBrowseMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeDetailBrowse
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeDetailBrowse, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeDetailBrowse.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeDetailBrowse sets the old Rent591HomeDetailBrowse of the mutation.
func withRent591HomeDetailBrowse(node *Rent591HomeDetailBrowse) rent591homedetailbrowseOption {
	return func(m *Rent591HomeDetailBrowseMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeDetailBrowse, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeDetailBrowseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeDetailBrowseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeDetailBrowseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeDetailBrowseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeDetailBrowse.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPc sets the "pc" field.
func (m *Rent591HomeDetailBrowseMutation) SetPc(i int) {
	m.pc = &i
	m.addpc = nil
}

// Pc returns the value of the "pc" field in the mutation.
func (m *Rent591HomeDetailBrowseMutation) Pc() (r int, exists bool) {
	v := m.pc
	if v == nil {
		return
	}
	return *v, true
}

// OldPc returns the old "pc" field's value of the Rent591HomeDetailBrowse entity.
// If the Rent591HomeDetailBrowse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailBrowseMutation) OldPc(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPc: %w", err)
	}
	return oldValue.Pc, nil
}

// AddPc adds i to the "pc" field.
func (m *Rent591HomeDetailBrowseMutation) AddPc(i int) {
	if m.addpc != nil {
		*m.addpc += i
	} else {
		m.addpc = &i
	}
}

// AddedPc returns the value that was added to the "pc" field in this mutation.
func (m *Rent591HomeDetailBrowseMutation) AddedPc() (r int, exists bool) {
	v := m.addpc
	if v == nil {
		return
	}
	return *v, true
}

// ResetPc resets all changes to the "pc" field.
func (m *Rent591HomeDetailBrowseMutation) ResetPc() {
	m.pc = nil
	m.addpc = nil
}

// SetMobile sets the "mobile" field.
func (m *Rent591HomeDetailBrowseMutation) SetMobile(i int) {
	m.mobile = &i
	m.addmobile = nil
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *Rent591HomeDetailBrowseMutation) Mobile() (r int, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the Rent591HomeDetailBrowse entity.
// If the Rent591HomeDetailBrowse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailBrowseMutation) OldMobile(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// AddMobile adds i to the "mobile" field.
func (m *Rent591HomeDetailBrowseMutation) AddMobile(i int) {
	if m.addmobile != nil {
		*m.addmobile += i
	} else {
		m.addmobile = &i
	}
}

// AddedMobile returns the value that was added to the "mobile" field in this mutation.
func (m *Rent591HomeDetailBrowseMutation) AddedMobile() (r int, exists bool) {
	v := m.addmobile
	if v == nil {
		return
	}
	return *v, true
}

// ResetMobile resets all changes to the "mobile" field.
func (m *Rent591HomeDetailBrowseMutation) ResetMobile() {
	m.mobile = nil
	m.addmobile = nil
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by ids.
func (m *Rent591HomeDetailBrowseMutation) AddRent591homeDetailIDs(ids ...int) {
	if m.rent591home_details == nil {
		m.rent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_details[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailBrowseMutation) ClearRent591homeDetails() {
	m.clearedrent591home_details = true
}

// Rent591homeDetailsCleared reports if the "rent591home_details" edge to the Rent591HomeDetail entity was cleared.
func (m *Rent591HomeDetailBrowseMutation) Rent591homeDetailsCleared() bool {
	return m.clearedrent591home_details
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (m *Rent591HomeDetailBrowseMutation) RemoveRent591homeDetailIDs(ids ...int) {
	if m.removedrent591home_details == nil {
		m.removedrent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_details, ids[i])
		m.removedrent591home_details[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetails returns the removed IDs of the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailBrowseMutation) RemovedRent591homeDetailsIDs() (ids []int) {
	for id := range m.removedrent591home_details {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailsIDs returns the "rent591home_details" edge IDs in the mutation.
func (m *Rent591HomeDetailBrowseMutation) Rent591homeDetailsIDs() (ids []int) {
	for id := range m.rent591home_details {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetails resets all changes to the "rent591home_details" edge.
func (m *Rent591HomeDetailBrowseMutation) ResetRent591homeDetails() {
	m.rent591home_details = nil
	m.clearedrent591home_details = false
	m.removedrent591home_details = nil
}

// Where appends a list predicates to the Rent591HomeDetailBrowseMutation builder.
func (m *Rent591HomeDetailBrowseMutation) Where(ps ...predicate.Rent591HomeDetailBrowse) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeDetailBrowseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeDetailBrowseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeDetailBrowse, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeDetailBrowseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeDetailBrowseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeDetailBrowse).
func (m *Rent591HomeDetailBrowseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeDetailBrowseMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.pc != nil {
		fields = append(fields, rent591homedetailbrowse.FieldPc)
	}
	if m.mobile != nil {
		fields = append(fields, rent591homedetailbrowse.FieldMobile)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeDetailBrowseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailbrowse.FieldPc:
		return m.Pc()
	case rent591homedetailbrowse.FieldMobile:
		return m.Mobile()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeDetailBrowseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homedetailbrowse.FieldPc:
		return m.OldPc(ctx)
	case rent591homedetailbrowse.FieldMobile:
		return m.OldMobile(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeDetailBrowse field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailBrowseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailbrowse.FieldPc:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPc(v)
		return nil
	case rent591homedetailbrowse.FieldMobile:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailBrowse field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeDetailBrowseMutation) AddedFields() []string {
	var fields []string
	if m.addpc != nil {
		fields = append(fields, rent591homedetailbrowse.FieldPc)
	}
	if m.addmobile != nil {
		fields = append(fields, rent591homedetailbrowse.FieldMobile)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeDetailBrowseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailbrowse.FieldPc:
		return m.AddedPc()
	case rent591homedetailbrowse.FieldMobile:
		return m.AddedMobile()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailBrowseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailbrowse.FieldPc:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPc(v)
		return nil
	case rent591homedetailbrowse.FieldMobile:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMobile(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailBrowse numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeDetailBrowseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeDetailBrowseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeDetailBrowseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeDetailBrowse nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeDetailBrowseMutation) ResetField(name string) error {
	switch name {
	case rent591homedetailbrowse.FieldPc:
		m.ResetPc()
		return nil
	case rent591homedetailbrowse.FieldMobile:
		m.ResetMobile()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailBrowse field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeDetailBrowseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rent591home_details != nil {
		edges = append(edges, rent591homedetailbrowse.EdgeRent591homeDetails)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeDetailBrowseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailbrowse.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.rent591home_details))
		for id := range m.rent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeDetailBrowseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrent591home_details != nil {
		edges = append(edges, rent591homedetailbrowse.EdgeRent591homeDetails)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeDetailBrowseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailbrowse.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.removedrent591home_details))
		for id := range m.removedrent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeDetailBrowseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrent591home_details {
		edges = append(edges, rent591homedetailbrowse.EdgeRent591homeDetails)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeDetailBrowseMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homedetailbrowse.EdgeRent591homeDetails:
		return m.clearedrent591home_details
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeDetailBrowseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailBrowse unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeDetailBrowseMutation) ResetEdge(name string) error {
	switch name {
	case rent591homedetailbrowse.EdgeRent591homeDetails:
		m.ResetRent591homeDetails()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailBrowse edge %s", name)
}

// Rent591HomeDetailInfoMutation represents an operation that mutates the Rent591HomeDetailInfo nodes in the graph.
type Rent591HomeDetailInfoMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	name                       *string
	value                      *string
	key                        *int
	addkey                     *int
	clearedFields              map[string]struct{}
	rent591home_details        map[int]struct{}
	removedrent591home_details map[int]struct{}
	clearedrent591home_details bool
	done                       bool
	oldValue                   func(context.Context) (*Rent591HomeDetailInfo, error)
	predicates                 []predicate.Rent591HomeDetailInfo
}

var _ ent.Mutation = (*Rent591HomeDetailInfoMutation)(nil)

// rent591homedetailinfoOption allows management of the mutation configuration using functional options.
type rent591homedetailinfoOption func(*Rent591HomeDetailInfoMutation)

// newRent591HomeDetailInfoMutation creates new mutation for the Rent591HomeDetailInfo entity.
func newRent591HomeDetailInfoMutation(c config, op Op, opts ...rent591homedetailinfoOption) *Rent591HomeDetailInfoMutation {
	m := &Rent591HomeDetailInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeDetailInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeDetailInfoID sets the ID field of the mutation.
func withRent591HomeDetailInfoID(id int) rent591homedetailinfoOption {
	return func(m *Rent591HomeDetailInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeDetailInfo
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeDetailInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeDetailInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeDetailInfo sets the old Rent591HomeDetailInfo of the mutation.
func withRent591HomeDetailInfo(node *Rent591HomeDetailInfo) rent591homedetailinfoOption {
	return func(m *Rent591HomeDetailInfoMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeDetailInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeDetailInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeDetailInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeDetailInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeDetailInfoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeDetailInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *Rent591HomeDetailInfoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *Rent591HomeDetailInfoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Rent591HomeDetailInfo entity.
// If the Rent591HomeDetailInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailInfoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *Rent591HomeDetailInfoMutation) ResetName() {
	m.name = nil
}

// SetValue sets the "value" field.
func (m *Rent591HomeDetailInfoMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *Rent591HomeDetailInfoMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Rent591HomeDetailInfo entity.
// If the Rent591HomeDetailInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailInfoMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *Rent591HomeDetailInfoMutation) ResetValue() {
	m.value = nil
}

// SetKey sets the "key" field.
func (m *Rent591HomeDetailInfoMutation) SetKey(i int) {
	m.key = &i
	m.addkey = nil
}

// Key returns the value of the "key" field in the mutation.
func (m *Rent591HomeDetailInfoMutation) Key() (r int, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Rent591HomeDetailInfo entity.
// If the Rent591HomeDetailInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailInfoMutation) OldKey(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// AddKey adds i to the "key" field.
func (m *Rent591HomeDetailInfoMutation) AddKey(i int) {
	if m.addkey != nil {
		*m.addkey += i
	} else {
		m.addkey = &i
	}
}

// AddedKey returns the value that was added to the "key" field in this mutation.
func (m *Rent591HomeDetailInfoMutation) AddedKey() (r int, exists bool) {
	v := m.addkey
	if v == nil {
		return
	}
	return *v, true
}

// ResetKey resets all changes to the "key" field.
func (m *Rent591HomeDetailInfoMutation) ResetKey() {
	m.key = nil
	m.addkey = nil
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by ids.
func (m *Rent591HomeDetailInfoMutation) AddRent591homeDetailIDs(ids ...int) {
	if m.rent591home_details == nil {
		m.rent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_details[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailInfoMutation) ClearRent591homeDetails() {
	m.clearedrent591home_details = true
}

// Rent591homeDetailsCleared reports if the "rent591home_details" edge to the Rent591HomeDetail entity was cleared.
func (m *Rent591HomeDetailInfoMutation) Rent591homeDetailsCleared() bool {
	return m.clearedrent591home_details
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (m *Rent591HomeDetailInfoMutation) RemoveRent591homeDetailIDs(ids ...int) {
	if m.removedrent591home_details == nil {
		m.removedrent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_details, ids[i])
		m.removedrent591home_details[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetails returns the removed IDs of the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailInfoMutation) RemovedRent591homeDetailsIDs() (ids []int) {
	for id := range m.removedrent591home_details {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailsIDs returns the "rent591home_details" edge IDs in the mutation.
func (m *Rent591HomeDetailInfoMutation) Rent591homeDetailsIDs() (ids []int) {
	for id := range m.rent591home_details {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetails resets all changes to the "rent591home_details" edge.
func (m *Rent591HomeDetailInfoMutation) ResetRent591homeDetails() {
	m.rent591home_details = nil
	m.clearedrent591home_details = false
	m.removedrent591home_details = nil
}

// Where appends a list predicates to the Rent591HomeDetailInfoMutation builder.
func (m *Rent591HomeDetailInfoMutation) Where(ps ...predicate.Rent591HomeDetailInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeDetailInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeDetailInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeDetailInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeDetailInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeDetailInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeDetailInfo).
func (m *Rent591HomeDetailInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeDetailInfoMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, rent591homedetailinfo.FieldName)
	}
	if m.value != nil {
		fields = append(fields, rent591homedetailinfo.FieldValue)
	}
	if m.key != nil {
		fields = append(fields, rent591homedetailinfo.FieldKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeDetailInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailinfo.FieldName:
		return m.Name()
	case rent591homedetailinfo.FieldValue:
		return m.Value()
	case rent591homedetailinfo.FieldKey:
		return m.Key()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeDetailInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homedetailinfo.FieldName:
		return m.OldName(ctx)
	case rent591homedetailinfo.FieldValue:
		return m.OldValue(ctx)
	case rent591homedetailinfo.FieldKey:
		return m.OldKey(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeDetailInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailinfo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rent591homedetailinfo.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case rent591homedetailinfo.FieldKey:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeDetailInfoMutation) AddedFields() []string {
	var fields []string
	if m.addkey != nil {
		fields = append(fields, rent591homedetailinfo.FieldKey)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeDetailInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailinfo.FieldKey:
		return m.AddedKey()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailinfo.FieldKey:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddKey(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeDetailInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeDetailInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeDetailInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeDetailInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeDetailInfoMutation) ResetField(name string) error {
	switch name {
	case rent591homedetailinfo.FieldName:
		m.ResetName()
		return nil
	case rent591homedetailinfo.FieldValue:
		m.ResetValue()
		return nil
	case rent591homedetailinfo.FieldKey:
		m.ResetKey()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeDetailInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rent591home_details != nil {
		edges = append(edges, rent591homedetailinfo.EdgeRent591homeDetails)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeDetailInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailinfo.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.rent591home_details))
		for id := range m.rent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeDetailInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrent591home_details != nil {
		edges = append(edges, rent591homedetailinfo.EdgeRent591homeDetails)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeDetailInfoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailinfo.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.removedrent591home_details))
		for id := range m.removedrent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeDetailInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrent591home_details {
		edges = append(edges, rent591homedetailinfo.EdgeRent591homeDetails)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeDetailInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homedetailinfo.EdgeRent591homeDetails:
		return m.clearedrent591home_details
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeDetailInfoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeDetailInfoMutation) ResetEdge(name string) error {
	switch name {
	case rent591homedetailinfo.EdgeRent591homeDetails:
		m.ResetRent591homeDetails()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailInfo edge %s", name)
}

// Rent591HomeDetailNavDataMutation represents an operation that mutates the Rent591HomeDetailNavData nodes in the graph.
type Rent591HomeDetailNavDataMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	title                      *string
	key                        *string
	active                     *int
	addactive                  *int
	clearedFields              map[string]struct{}
	rent591home_details        map[int]struct{}
	removedrent591home_details map[int]struct{}
	clearedrent591home_details bool
	done                       bool
	oldValue                   func(context.Context) (*Rent591HomeDetailNavData, error)
	predicates                 []predicate.Rent591HomeDetailNavData
}

var _ ent.Mutation = (*Rent591HomeDetailNavDataMutation)(nil)

// rent591homedetailnavdataOption allows management of the mutation configuration using functional options.
type rent591homedetailnavdataOption func(*Rent591HomeDetailNavDataMutation)

// newRent591HomeDetailNavDataMutation creates new mutation for the Rent591HomeDetailNavData entity.
func newRent591HomeDetailNavDataMutation(c config, op Op, opts ...rent591homedetailnavdataOption) *Rent591HomeDetailNavDataMutation {
	m := &Rent591HomeDetailNavDataMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeDetailNavData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeDetailNavDataID sets the ID field of the mutation.
func withRent591HomeDetailNavDataID(id int) rent591homedetailnavdataOption {
	return func(m *Rent591HomeDetailNavDataMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeDetailNavData
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeDetailNavData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeDetailNavData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeDetailNavData sets the old Rent591HomeDetailNavData of the mutation.
func withRent591HomeDetailNavData(node *Rent591HomeDetailNavData) rent591homedetailnavdataOption {
	return func(m *Rent591HomeDetailNavDataMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeDetailNavData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeDetailNavDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeDetailNavDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeDetailNavDataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeDetailNavDataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeDetailNavData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *Rent591HomeDetailNavDataMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *Rent591HomeDetailNavDataMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Rent591HomeDetailNavData entity.
// If the Rent591HomeDetailNavData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailNavDataMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *Rent591HomeDetailNavDataMutation) ResetTitle() {
	m.title = nil
}

// SetKey sets the "key" field.
func (m *Rent591HomeDetailNavDataMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *Rent591HomeDetailNavDataMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Rent591HomeDetailNavData entity.
// If the Rent591HomeDetailNavData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailNavDataMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *Rent591HomeDetailNavDataMutation) ResetKey() {
	m.key = nil
}

// SetActive sets the "active" field.
func (m *Rent591HomeDetailNavDataMutation) SetActive(i int) {
	m.active = &i
	m.addactive = nil
}

// Active returns the value of the "active" field in the mutation.
func (m *Rent591HomeDetailNavDataMutation) Active() (r int, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Rent591HomeDetailNavData entity.
// If the Rent591HomeDetailNavData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailNavDataMutation) OldActive(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// AddActive adds i to the "active" field.
func (m *Rent591HomeDetailNavDataMutation) AddActive(i int) {
	if m.addactive != nil {
		*m.addactive += i
	} else {
		m.addactive = &i
	}
}

// AddedActive returns the value that was added to the "active" field in this mutation.
func (m *Rent591HomeDetailNavDataMutation) AddedActive() (r int, exists bool) {
	v := m.addactive
	if v == nil {
		return
	}
	return *v, true
}

// ResetActive resets all changes to the "active" field.
func (m *Rent591HomeDetailNavDataMutation) ResetActive() {
	m.active = nil
	m.addactive = nil
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by ids.
func (m *Rent591HomeDetailNavDataMutation) AddRent591homeDetailIDs(ids ...int) {
	if m.rent591home_details == nil {
		m.rent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_details[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailNavDataMutation) ClearRent591homeDetails() {
	m.clearedrent591home_details = true
}

// Rent591homeDetailsCleared reports if the "rent591home_details" edge to the Rent591HomeDetail entity was cleared.
func (m *Rent591HomeDetailNavDataMutation) Rent591homeDetailsCleared() bool {
	return m.clearedrent591home_details
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (m *Rent591HomeDetailNavDataMutation) RemoveRent591homeDetailIDs(ids ...int) {
	if m.removedrent591home_details == nil {
		m.removedrent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_details, ids[i])
		m.removedrent591home_details[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetails returns the removed IDs of the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailNavDataMutation) RemovedRent591homeDetailsIDs() (ids []int) {
	for id := range m.removedrent591home_details {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailsIDs returns the "rent591home_details" edge IDs in the mutation.
func (m *Rent591HomeDetailNavDataMutation) Rent591homeDetailsIDs() (ids []int) {
	for id := range m.rent591home_details {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetails resets all changes to the "rent591home_details" edge.
func (m *Rent591HomeDetailNavDataMutation) ResetRent591homeDetails() {
	m.rent591home_details = nil
	m.clearedrent591home_details = false
	m.removedrent591home_details = nil
}

// Where appends a list predicates to the Rent591HomeDetailNavDataMutation builder.
func (m *Rent591HomeDetailNavDataMutation) Where(ps ...predicate.Rent591HomeDetailNavData) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeDetailNavDataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeDetailNavDataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeDetailNavData, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeDetailNavDataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeDetailNavDataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeDetailNavData).
func (m *Rent591HomeDetailNavDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeDetailNavDataMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.title != nil {
		fields = append(fields, rent591homedetailnavdata.FieldTitle)
	}
	if m.key != nil {
		fields = append(fields, rent591homedetailnavdata.FieldKey)
	}
	if m.active != nil {
		fields = append(fields, rent591homedetailnavdata.FieldActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeDetailNavDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailnavdata.FieldTitle:
		return m.Title()
	case rent591homedetailnavdata.FieldKey:
		return m.Key()
	case rent591homedetailnavdata.FieldActive:
		return m.Active()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeDetailNavDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homedetailnavdata.FieldTitle:
		return m.OldTitle(ctx)
	case rent591homedetailnavdata.FieldKey:
		return m.OldKey(ctx)
	case rent591homedetailnavdata.FieldActive:
		return m.OldActive(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeDetailNavData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailNavDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailnavdata.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case rent591homedetailnavdata.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case rent591homedetailnavdata.FieldActive:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailNavData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeDetailNavDataMutation) AddedFields() []string {
	var fields []string
	if m.addactive != nil {
		fields = append(fields, rent591homedetailnavdata.FieldActive)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeDetailNavDataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailnavdata.FieldActive:
		return m.AddedActive()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailNavDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailnavdata.FieldActive:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActive(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailNavData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeDetailNavDataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeDetailNavDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeDetailNavDataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeDetailNavData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeDetailNavDataMutation) ResetField(name string) error {
	switch name {
	case rent591homedetailnavdata.FieldTitle:
		m.ResetTitle()
		return nil
	case rent591homedetailnavdata.FieldKey:
		m.ResetKey()
		return nil
	case rent591homedetailnavdata.FieldActive:
		m.ResetActive()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailNavData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeDetailNavDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rent591home_details != nil {
		edges = append(edges, rent591homedetailnavdata.EdgeRent591homeDetails)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeDetailNavDataMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailnavdata.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.rent591home_details))
		for id := range m.rent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeDetailNavDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrent591home_details != nil {
		edges = append(edges, rent591homedetailnavdata.EdgeRent591homeDetails)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeDetailNavDataMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailnavdata.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.removedrent591home_details))
		for id := range m.removedrent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeDetailNavDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrent591home_details {
		edges = append(edges, rent591homedetailnavdata.EdgeRent591homeDetails)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeDetailNavDataMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homedetailnavdata.EdgeRent591homeDetails:
		return m.clearedrent591home_details
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeDetailNavDataMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailNavData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeDetailNavDataMutation) ResetEdge(name string) error {
	switch name {
	case rent591homedetailnavdata.EdgeRent591homeDetails:
		m.ResetRent591homeDetails()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailNavData edge %s", name)
}

// Rent591HomeDetailPositionRoundMutation represents an operation that mutates the Rent591HomeDetailPositionRound nodes in the graph.
type Rent591HomeDetailPositionRoundMutation struct {
	config
	op                                             Op
	typ                                            string
	id                                             *int
	title                                          *string
	key                                            *string
	active                                         *int
	addactive                                      *int
	community_name                                 *string
	community_id                                   *int
	addcommunity_id                                *int
	address                                        *string
	lat                                            *float64
	addlat                                         *float64
	lng                                            *float64
	addlng                                         *float64
	clearedFields                                  map[string]struct{}
	rent591home_details                            *int
	clearedrent591home_details                     bool
	rent591home_detail_position_round_datas        map[int]struct{}
	removedrent591home_detail_position_round_datas map[int]struct{}
	clearedrent591home_detail_position_round_datas bool
	done                                           bool
	oldValue                                       func(context.Context) (*Rent591HomeDetailPositionRound, error)
	predicates                                     []predicate.Rent591HomeDetailPositionRound
}

var _ ent.Mutation = (*Rent591HomeDetailPositionRoundMutation)(nil)

// rent591homedetailpositionroundOption allows management of the mutation configuration using functional options.
type rent591homedetailpositionroundOption func(*Rent591HomeDetailPositionRoundMutation)

// newRent591HomeDetailPositionRoundMutation creates new mutation for the Rent591HomeDetailPositionRound entity.
func newRent591HomeDetailPositionRoundMutation(c config, op Op, opts ...rent591homedetailpositionroundOption) *Rent591HomeDetailPositionRoundMutation {
	m := &Rent591HomeDetailPositionRoundMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeDetailPositionRound,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeDetailPositionRoundID sets the ID field of the mutation.
func withRent591HomeDetailPositionRoundID(id int) rent591homedetailpositionroundOption {
	return func(m *Rent591HomeDetailPositionRoundMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeDetailPositionRound
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeDetailPositionRound, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeDetailPositionRound.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeDetailPositionRound sets the old Rent591HomeDetailPositionRound of the mutation.
func withRent591HomeDetailPositionRound(node *Rent591HomeDetailPositionRound) rent591homedetailpositionroundOption {
	return func(m *Rent591HomeDetailPositionRoundMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeDetailPositionRound, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeDetailPositionRoundMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeDetailPositionRoundMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeDetailPositionRoundMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeDetailPositionRoundMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeDetailPositionRound.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *Rent591HomeDetailPositionRoundMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *Rent591HomeDetailPositionRoundMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Rent591HomeDetailPositionRound entity.
// If the Rent591HomeDetailPositionRound object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *Rent591HomeDetailPositionRoundMutation) ResetTitle() {
	m.title = nil
}

// SetKey sets the "key" field.
func (m *Rent591HomeDetailPositionRoundMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *Rent591HomeDetailPositionRoundMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Rent591HomeDetailPositionRound entity.
// If the Rent591HomeDetailPositionRound object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *Rent591HomeDetailPositionRoundMutation) ResetKey() {
	m.key = nil
}

// SetActive sets the "active" field.
func (m *Rent591HomeDetailPositionRoundMutation) SetActive(i int) {
	m.active = &i
	m.addactive = nil
}

// Active returns the value of the "active" field in the mutation.
func (m *Rent591HomeDetailPositionRoundMutation) Active() (r int, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Rent591HomeDetailPositionRound entity.
// If the Rent591HomeDetailPositionRound object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundMutation) OldActive(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// AddActive adds i to the "active" field.
func (m *Rent591HomeDetailPositionRoundMutation) AddActive(i int) {
	if m.addactive != nil {
		*m.addactive += i
	} else {
		m.addactive = &i
	}
}

// AddedActive returns the value that was added to the "active" field in this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) AddedActive() (r int, exists bool) {
	v := m.addactive
	if v == nil {
		return
	}
	return *v, true
}

// ResetActive resets all changes to the "active" field.
func (m *Rent591HomeDetailPositionRoundMutation) ResetActive() {
	m.active = nil
	m.addactive = nil
}

// SetCommunityName sets the "community_name" field.
func (m *Rent591HomeDetailPositionRoundMutation) SetCommunityName(s string) {
	m.community_name = &s
}

// CommunityName returns the value of the "community_name" field in the mutation.
func (m *Rent591HomeDetailPositionRoundMutation) CommunityName() (r string, exists bool) {
	v := m.community_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCommunityName returns the old "community_name" field's value of the Rent591HomeDetailPositionRound entity.
// If the Rent591HomeDetailPositionRound object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundMutation) OldCommunityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommunityName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommunityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommunityName: %w", err)
	}
	return oldValue.CommunityName, nil
}

// ResetCommunityName resets all changes to the "community_name" field.
func (m *Rent591HomeDetailPositionRoundMutation) ResetCommunityName() {
	m.community_name = nil
}

// SetCommunityID sets the "community_id" field.
func (m *Rent591HomeDetailPositionRoundMutation) SetCommunityID(i int) {
	m.community_id = &i
	m.addcommunity_id = nil
}

// CommunityID returns the value of the "community_id" field in the mutation.
func (m *Rent591HomeDetailPositionRoundMutation) CommunityID() (r int, exists bool) {
	v := m.community_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCommunityID returns the old "community_id" field's value of the Rent591HomeDetailPositionRound entity.
// If the Rent591HomeDetailPositionRound object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundMutation) OldCommunityID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommunityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommunityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommunityID: %w", err)
	}
	return oldValue.CommunityID, nil
}

// AddCommunityID adds i to the "community_id" field.
func (m *Rent591HomeDetailPositionRoundMutation) AddCommunityID(i int) {
	if m.addcommunity_id != nil {
		*m.addcommunity_id += i
	} else {
		m.addcommunity_id = &i
	}
}

// AddedCommunityID returns the value that was added to the "community_id" field in this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) AddedCommunityID() (r int, exists bool) {
	v := m.addcommunity_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCommunityID resets all changes to the "community_id" field.
func (m *Rent591HomeDetailPositionRoundMutation) ResetCommunityID() {
	m.community_id = nil
	m.addcommunity_id = nil
}

// SetAddress sets the "address" field.
func (m *Rent591HomeDetailPositionRoundMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *Rent591HomeDetailPositionRoundMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Rent591HomeDetailPositionRound entity.
// If the Rent591HomeDetailPositionRound object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *Rent591HomeDetailPositionRoundMutation) ResetAddress() {
	m.address = nil
}

// SetLat sets the "lat" field.
func (m *Rent591HomeDetailPositionRoundMutation) SetLat(f float64) {
	m.lat = &f
	m.addlat = nil
}

// Lat returns the value of the "lat" field in the mutation.
func (m *Rent591HomeDetailPositionRoundMutation) Lat() (r float64, exists bool) {
	v := m.lat
	if v == nil {
		return
	}
	return *v, true
}

// OldLat returns the old "lat" field's value of the Rent591HomeDetailPositionRound entity.
// If the Rent591HomeDetailPositionRound object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundMutation) OldLat(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLat: %w", err)
	}
	return oldValue.Lat, nil
}

// AddLat adds f to the "lat" field.
func (m *Rent591HomeDetailPositionRoundMutation) AddLat(f float64) {
	if m.addlat != nil {
		*m.addlat += f
	} else {
		m.addlat = &f
	}
}

// AddedLat returns the value that was added to the "lat" field in this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) AddedLat() (r float64, exists bool) {
	v := m.addlat
	if v == nil {
		return
	}
	return *v, true
}

// ResetLat resets all changes to the "lat" field.
func (m *Rent591HomeDetailPositionRoundMutation) ResetLat() {
	m.lat = nil
	m.addlat = nil
}

// SetLng sets the "lng" field.
func (m *Rent591HomeDetailPositionRoundMutation) SetLng(f float64) {
	m.lng = &f
	m.addlng = nil
}

// Lng returns the value of the "lng" field in the mutation.
func (m *Rent591HomeDetailPositionRoundMutation) Lng() (r float64, exists bool) {
	v := m.lng
	if v == nil {
		return
	}
	return *v, true
}

// OldLng returns the old "lng" field's value of the Rent591HomeDetailPositionRound entity.
// If the Rent591HomeDetailPositionRound object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundMutation) OldLng(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLng is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLng requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLng: %w", err)
	}
	return oldValue.Lng, nil
}

// AddLng adds f to the "lng" field.
func (m *Rent591HomeDetailPositionRoundMutation) AddLng(f float64) {
	if m.addlng != nil {
		*m.addlng += f
	} else {
		m.addlng = &f
	}
}

// AddedLng returns the value that was added to the "lng" field in this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) AddedLng() (r float64, exists bool) {
	v := m.addlng
	if v == nil {
		return
	}
	return *v, true
}

// ResetLng resets all changes to the "lng" field.
func (m *Rent591HomeDetailPositionRoundMutation) ResetLng() {
	m.lng = nil
	m.addlng = nil
}

// SetRent591homeDetailsID sets the "rent591home_details" edge to the Rent591HomeDetail entity by id.
func (m *Rent591HomeDetailPositionRoundMutation) SetRent591homeDetailsID(id int) {
	m.rent591home_details = &id
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailPositionRoundMutation) ClearRent591homeDetails() {
	m.clearedrent591home_details = true
}

// Rent591homeDetailsCleared reports if the "rent591home_details" edge to the Rent591HomeDetail entity was cleared.
func (m *Rent591HomeDetailPositionRoundMutation) Rent591homeDetailsCleared() bool {
	return m.clearedrent591home_details
}

// Rent591homeDetailsID returns the "rent591home_details" edge ID in the mutation.
func (m *Rent591HomeDetailPositionRoundMutation) Rent591homeDetailsID() (id int, exists bool) {
	if m.rent591home_details != nil {
		return *m.rent591home_details, true
	}
	return
}

// Rent591homeDetailsIDs returns the "rent591home_details" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// Rent591homeDetailsID instead. It exists only for internal usage by the builders.
func (m *Rent591HomeDetailPositionRoundMutation) Rent591homeDetailsIDs() (ids []int) {
	if id := m.rent591home_details; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRent591homeDetails resets all changes to the "rent591home_details" edge.
func (m *Rent591HomeDetailPositionRoundMutation) ResetRent591homeDetails() {
	m.rent591home_details = nil
	m.clearedrent591home_details = false
}

// AddRent591homeDetailPositionRoundDataIDs adds the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity by ids.
func (m *Rent591HomeDetailPositionRoundMutation) AddRent591homeDetailPositionRoundDataIDs(ids ...int) {
	if m.rent591home_detail_position_round_datas == nil {
		m.rent591home_detail_position_round_datas = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_detail_position_round_datas[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetailPositionRoundDatas clears the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity.
func (m *Rent591HomeDetailPositionRoundMutation) ClearRent591homeDetailPositionRoundDatas() {
	m.clearedrent591home_detail_position_round_datas = true
}

// Rent591homeDetailPositionRoundDatasCleared reports if the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity was cleared.
func (m *Rent591HomeDetailPositionRoundMutation) Rent591homeDetailPositionRoundDatasCleared() bool {
	return m.clearedrent591home_detail_position_round_datas
}

// RemoveRent591homeDetailPositionRoundDataIDs removes the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity by IDs.
func (m *Rent591HomeDetailPositionRoundMutation) RemoveRent591homeDetailPositionRoundDataIDs(ids ...int) {
	if m.removedrent591home_detail_position_round_datas == nil {
		m.removedrent591home_detail_position_round_datas = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_detail_position_round_datas, ids[i])
		m.removedrent591home_detail_position_round_datas[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetailPositionRoundDatas returns the removed IDs of the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity.
func (m *Rent591HomeDetailPositionRoundMutation) RemovedRent591homeDetailPositionRoundDatasIDs() (ids []int) {
	for id := range m.removedrent591home_detail_position_round_datas {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailPositionRoundDatasIDs returns the "rent591home_detail_position_round_datas" edge IDs in the mutation.
func (m *Rent591HomeDetailPositionRoundMutation) Rent591homeDetailPositionRoundDatasIDs() (ids []int) {
	for id := range m.rent591home_detail_position_round_datas {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetailPositionRoundDatas resets all changes to the "rent591home_detail_position_round_datas" edge.
func (m *Rent591HomeDetailPositionRoundMutation) ResetRent591homeDetailPositionRoundDatas() {
	m.rent591home_detail_position_round_datas = nil
	m.clearedrent591home_detail_position_round_datas = false
	m.removedrent591home_detail_position_round_datas = nil
}

// Where appends a list predicates to the Rent591HomeDetailPositionRoundMutation builder.
func (m *Rent591HomeDetailPositionRoundMutation) Where(ps ...predicate.Rent591HomeDetailPositionRound) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeDetailPositionRoundMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeDetailPositionRoundMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeDetailPositionRound, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeDetailPositionRoundMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeDetailPositionRoundMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeDetailPositionRound).
func (m *Rent591HomeDetailPositionRoundMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeDetailPositionRoundMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.title != nil {
		fields = append(fields, rent591homedetailpositionround.FieldTitle)
	}
	if m.key != nil {
		fields = append(fields, rent591homedetailpositionround.FieldKey)
	}
	if m.active != nil {
		fields = append(fields, rent591homedetailpositionround.FieldActive)
	}
	if m.community_name != nil {
		fields = append(fields, rent591homedetailpositionround.FieldCommunityName)
	}
	if m.community_id != nil {
		fields = append(fields, rent591homedetailpositionround.FieldCommunityID)
	}
	if m.address != nil {
		fields = append(fields, rent591homedetailpositionround.FieldAddress)
	}
	if m.lat != nil {
		fields = append(fields, rent591homedetailpositionround.FieldLat)
	}
	if m.lng != nil {
		fields = append(fields, rent591homedetailpositionround.FieldLng)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeDetailPositionRoundMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailpositionround.FieldTitle:
		return m.Title()
	case rent591homedetailpositionround.FieldKey:
		return m.Key()
	case rent591homedetailpositionround.FieldActive:
		return m.Active()
	case rent591homedetailpositionround.FieldCommunityName:
		return m.CommunityName()
	case rent591homedetailpositionround.FieldCommunityID:
		return m.CommunityID()
	case rent591homedetailpositionround.FieldAddress:
		return m.Address()
	case rent591homedetailpositionround.FieldLat:
		return m.Lat()
	case rent591homedetailpositionround.FieldLng:
		return m.Lng()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeDetailPositionRoundMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homedetailpositionround.FieldTitle:
		return m.OldTitle(ctx)
	case rent591homedetailpositionround.FieldKey:
		return m.OldKey(ctx)
	case rent591homedetailpositionround.FieldActive:
		return m.OldActive(ctx)
	case rent591homedetailpositionround.FieldCommunityName:
		return m.OldCommunityName(ctx)
	case rent591homedetailpositionround.FieldCommunityID:
		return m.OldCommunityID(ctx)
	case rent591homedetailpositionround.FieldAddress:
		return m.OldAddress(ctx)
	case rent591homedetailpositionround.FieldLat:
		return m.OldLat(ctx)
	case rent591homedetailpositionround.FieldLng:
		return m.OldLng(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeDetailPositionRound field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailPositionRoundMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailpositionround.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case rent591homedetailpositionround.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case rent591homedetailpositionround.FieldActive:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case rent591homedetailpositionround.FieldCommunityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommunityName(v)
		return nil
	case rent591homedetailpositionround.FieldCommunityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommunityID(v)
		return nil
	case rent591homedetailpositionround.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case rent591homedetailpositionround.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLat(v)
		return nil
	case rent591homedetailpositionround.FieldLng:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLng(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRound field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) AddedFields() []string {
	var fields []string
	if m.addactive != nil {
		fields = append(fields, rent591homedetailpositionround.FieldActive)
	}
	if m.addcommunity_id != nil {
		fields = append(fields, rent591homedetailpositionround.FieldCommunityID)
	}
	if m.addlat != nil {
		fields = append(fields, rent591homedetailpositionround.FieldLat)
	}
	if m.addlng != nil {
		fields = append(fields, rent591homedetailpositionround.FieldLng)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeDetailPositionRoundMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailpositionround.FieldActive:
		return m.AddedActive()
	case rent591homedetailpositionround.FieldCommunityID:
		return m.AddedCommunityID()
	case rent591homedetailpositionround.FieldLat:
		return m.AddedLat()
	case rent591homedetailpositionround.FieldLng:
		return m.AddedLng()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailPositionRoundMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailpositionround.FieldActive:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActive(v)
		return nil
	case rent591homedetailpositionround.FieldCommunityID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCommunityID(v)
		return nil
	case rent591homedetailpositionround.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLat(v)
		return nil
	case rent591homedetailpositionround.FieldLng:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLng(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRound numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeDetailPositionRoundMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeDetailPositionRound nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundMutation) ResetField(name string) error {
	switch name {
	case rent591homedetailpositionround.FieldTitle:
		m.ResetTitle()
		return nil
	case rent591homedetailpositionround.FieldKey:
		m.ResetKey()
		return nil
	case rent591homedetailpositionround.FieldActive:
		m.ResetActive()
		return nil
	case rent591homedetailpositionround.FieldCommunityName:
		m.ResetCommunityName()
		return nil
	case rent591homedetailpositionround.FieldCommunityID:
		m.ResetCommunityID()
		return nil
	case rent591homedetailpositionround.FieldAddress:
		m.ResetAddress()
		return nil
	case rent591homedetailpositionround.FieldLat:
		m.ResetLat()
		return nil
	case rent591homedetailpositionround.FieldLng:
		m.ResetLng()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRound field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.rent591home_details != nil {
		edges = append(edges, rent591homedetailpositionround.EdgeRent591homeDetails)
	}
	if m.rent591home_detail_position_round_datas != nil {
		edges = append(edges, rent591homedetailpositionround.EdgeRent591homeDetailPositionRoundDatas)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailpositionround.EdgeRent591homeDetails:
		if id := m.rent591home_details; id != nil {
			return []ent.Value{*id}
		}
	case rent591homedetailpositionround.EdgeRent591homeDetailPositionRoundDatas:
		ids := make([]ent.Value, 0, len(m.rent591home_detail_position_round_datas))
		for id := range m.rent591home_detail_position_round_datas {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrent591home_detail_position_round_datas != nil {
		edges = append(edges, rent591homedetailpositionround.EdgeRent591homeDetailPositionRoundDatas)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailpositionround.EdgeRent591homeDetailPositionRoundDatas:
		ids := make([]ent.Value, 0, len(m.removedrent591home_detail_position_round_datas))
		for id := range m.removedrent591home_detail_position_round_datas {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrent591home_details {
		edges = append(edges, rent591homedetailpositionround.EdgeRent591homeDetails)
	}
	if m.clearedrent591home_detail_position_round_datas {
		edges = append(edges, rent591homedetailpositionround.EdgeRent591homeDetailPositionRoundDatas)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeDetailPositionRoundMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homedetailpositionround.EdgeRent591homeDetails:
		return m.clearedrent591home_details
	case rent591homedetailpositionround.EdgeRent591homeDetailPositionRoundDatas:
		return m.clearedrent591home_detail_position_round_datas
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundMutation) ClearEdge(name string) error {
	switch name {
	case rent591homedetailpositionround.EdgeRent591homeDetails:
		m.ClearRent591homeDetails()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRound unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundMutation) ResetEdge(name string) error {
	switch name {
	case rent591homedetailpositionround.EdgeRent591homeDetails:
		m.ResetRent591homeDetails()
		return nil
	case rent591homedetailpositionround.EdgeRent591homeDetailPositionRoundDatas:
		m.ResetRent591homeDetailPositionRoundDatas()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRound edge %s", name)
}

// Rent591HomeDetailPositionRoundDataMutation represents an operation that mutates the Rent591HomeDetailPositionRoundData nodes in the graph.
type Rent591HomeDetailPositionRoundDataMutation struct {
	config
	op                                                      Op
	typ                                                     string
	id                                                      *int
	name                                                    *string
	key                                                     *string
	clearedFields                                           map[string]struct{}
	rent591home_detail_position_rounds                      map[int]struct{}
	removedrent591home_detail_position_rounds               map[int]struct{}
	clearedrent591home_detail_position_rounds               bool
	rent591home_detail_position_round_data_childrens        map[int]struct{}
	removedrent591home_detail_position_round_data_childrens map[int]struct{}
	clearedrent591home_detail_position_round_data_childrens bool
	done                                                    bool
	oldValue                                                func(context.Context) (*Rent591HomeDetailPositionRoundData, error)
	predicates                                              []predicate.Rent591HomeDetailPositionRoundData
}

var _ ent.Mutation = (*Rent591HomeDetailPositionRoundDataMutation)(nil)

// rent591homedetailpositionrounddataOption allows management of the mutation configuration using functional options.
type rent591homedetailpositionrounddataOption func(*Rent591HomeDetailPositionRoundDataMutation)

// newRent591HomeDetailPositionRoundDataMutation creates new mutation for the Rent591HomeDetailPositionRoundData entity.
func newRent591HomeDetailPositionRoundDataMutation(c config, op Op, opts ...rent591homedetailpositionrounddataOption) *Rent591HomeDetailPositionRoundDataMutation {
	m := &Rent591HomeDetailPositionRoundDataMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeDetailPositionRoundData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeDetailPositionRoundDataID sets the ID field of the mutation.
func withRent591HomeDetailPositionRoundDataID(id int) rent591homedetailpositionrounddataOption {
	return func(m *Rent591HomeDetailPositionRoundDataMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeDetailPositionRoundData
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeDetailPositionRoundData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeDetailPositionRoundData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeDetailPositionRoundData sets the old Rent591HomeDetailPositionRoundData of the mutation.
func withRent591HomeDetailPositionRoundData(node *Rent591HomeDetailPositionRoundData) rent591homedetailpositionrounddataOption {
	return func(m *Rent591HomeDetailPositionRoundDataMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeDetailPositionRoundData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeDetailPositionRoundDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeDetailPositionRoundDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeDetailPositionRoundDataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeDetailPositionRoundData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *Rent591HomeDetailPositionRoundDataMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Rent591HomeDetailPositionRoundData entity.
// If the Rent591HomeDetailPositionRoundData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundDataMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *Rent591HomeDetailPositionRoundDataMutation) ResetName() {
	m.name = nil
}

// SetKey sets the "key" field.
func (m *Rent591HomeDetailPositionRoundDataMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Rent591HomeDetailPositionRoundData entity.
// If the Rent591HomeDetailPositionRoundData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundDataMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *Rent591HomeDetailPositionRoundDataMutation) ResetKey() {
	m.key = nil
}

// AddRent591homeDetailPositionRoundIDs adds the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity by ids.
func (m *Rent591HomeDetailPositionRoundDataMutation) AddRent591homeDetailPositionRoundIDs(ids ...int) {
	if m.rent591home_detail_position_rounds == nil {
		m.rent591home_detail_position_rounds = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_detail_position_rounds[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetailPositionRounds clears the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity.
func (m *Rent591HomeDetailPositionRoundDataMutation) ClearRent591homeDetailPositionRounds() {
	m.clearedrent591home_detail_position_rounds = true
}

// Rent591homeDetailPositionRoundsCleared reports if the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity was cleared.
func (m *Rent591HomeDetailPositionRoundDataMutation) Rent591homeDetailPositionRoundsCleared() bool {
	return m.clearedrent591home_detail_position_rounds
}

// RemoveRent591homeDetailPositionRoundIDs removes the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity by IDs.
func (m *Rent591HomeDetailPositionRoundDataMutation) RemoveRent591homeDetailPositionRoundIDs(ids ...int) {
	if m.removedrent591home_detail_position_rounds == nil {
		m.removedrent591home_detail_position_rounds = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_detail_position_rounds, ids[i])
		m.removedrent591home_detail_position_rounds[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetailPositionRounds returns the removed IDs of the "rent591home_detail_position_rounds" edge to the Rent591HomeDetailPositionRound entity.
func (m *Rent591HomeDetailPositionRoundDataMutation) RemovedRent591homeDetailPositionRoundsIDs() (ids []int) {
	for id := range m.removedrent591home_detail_position_rounds {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailPositionRoundsIDs returns the "rent591home_detail_position_rounds" edge IDs in the mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) Rent591homeDetailPositionRoundsIDs() (ids []int) {
	for id := range m.rent591home_detail_position_rounds {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetailPositionRounds resets all changes to the "rent591home_detail_position_rounds" edge.
func (m *Rent591HomeDetailPositionRoundDataMutation) ResetRent591homeDetailPositionRounds() {
	m.rent591home_detail_position_rounds = nil
	m.clearedrent591home_detail_position_rounds = false
	m.removedrent591home_detail_position_rounds = nil
}

// AddRent591homeDetailPositionRoundDataChildrenIDs adds the "rent591home_detail_position_round_data_childrens" edge to the Rent591HomeDetailPositionRoundDataChildren entity by ids.
func (m *Rent591HomeDetailPositionRoundDataMutation) AddRent591homeDetailPositionRoundDataChildrenIDs(ids ...int) {
	if m.rent591home_detail_position_round_data_childrens == nil {
		m.rent591home_detail_position_round_data_childrens = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_detail_position_round_data_childrens[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetailPositionRoundDataChildrens clears the "rent591home_detail_position_round_data_childrens" edge to the Rent591HomeDetailPositionRoundDataChildren entity.
func (m *Rent591HomeDetailPositionRoundDataMutation) ClearRent591homeDetailPositionRoundDataChildrens() {
	m.clearedrent591home_detail_position_round_data_childrens = true
}

// Rent591homeDetailPositionRoundDataChildrensCleared reports if the "rent591home_detail_position_round_data_childrens" edge to the Rent591HomeDetailPositionRoundDataChildren entity was cleared.
func (m *Rent591HomeDetailPositionRoundDataMutation) Rent591homeDetailPositionRoundDataChildrensCleared() bool {
	return m.clearedrent591home_detail_position_round_data_childrens
}

// RemoveRent591homeDetailPositionRoundDataChildrenIDs removes the "rent591home_detail_position_round_data_childrens" edge to the Rent591HomeDetailPositionRoundDataChildren entity by IDs.
func (m *Rent591HomeDetailPositionRoundDataMutation) RemoveRent591homeDetailPositionRoundDataChildrenIDs(ids ...int) {
	if m.removedrent591home_detail_position_round_data_childrens == nil {
		m.removedrent591home_detail_position_round_data_childrens = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_detail_position_round_data_childrens, ids[i])
		m.removedrent591home_detail_position_round_data_childrens[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetailPositionRoundDataChildrens returns the removed IDs of the "rent591home_detail_position_round_data_childrens" edge to the Rent591HomeDetailPositionRoundDataChildren entity.
func (m *Rent591HomeDetailPositionRoundDataMutation) RemovedRent591homeDetailPositionRoundDataChildrensIDs() (ids []int) {
	for id := range m.removedrent591home_detail_position_round_data_childrens {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailPositionRoundDataChildrensIDs returns the "rent591home_detail_position_round_data_childrens" edge IDs in the mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) Rent591homeDetailPositionRoundDataChildrensIDs() (ids []int) {
	for id := range m.rent591home_detail_position_round_data_childrens {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetailPositionRoundDataChildrens resets all changes to the "rent591home_detail_position_round_data_childrens" edge.
func (m *Rent591HomeDetailPositionRoundDataMutation) ResetRent591homeDetailPositionRoundDataChildrens() {
	m.rent591home_detail_position_round_data_childrens = nil
	m.clearedrent591home_detail_position_round_data_childrens = false
	m.removedrent591home_detail_position_round_data_childrens = nil
}

// Where appends a list predicates to the Rent591HomeDetailPositionRoundDataMutation builder.
func (m *Rent591HomeDetailPositionRoundDataMutation) Where(ps ...predicate.Rent591HomeDetailPositionRoundData) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeDetailPositionRoundDataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeDetailPositionRoundDataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeDetailPositionRoundData, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeDetailPositionRoundDataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeDetailPositionRoundDataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeDetailPositionRoundData).
func (m *Rent591HomeDetailPositionRoundDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeDetailPositionRoundDataMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, rent591homedetailpositionrounddata.FieldName)
	}
	if m.key != nil {
		fields = append(fields, rent591homedetailpositionrounddata.FieldKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeDetailPositionRoundDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailpositionrounddata.FieldName:
		return m.Name()
	case rent591homedetailpositionrounddata.FieldKey:
		return m.Key()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeDetailPositionRoundDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homedetailpositionrounddata.FieldName:
		return m.OldName(ctx)
	case rent591homedetailpositionrounddata.FieldKey:
		return m.OldKey(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeDetailPositionRoundData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailPositionRoundDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailpositionrounddata.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rent591homedetailpositionrounddata.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeDetailPositionRoundDataMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailPositionRoundDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundDataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundDataMutation) ResetField(name string) error {
	switch name {
	case rent591homedetailpositionrounddata.FieldName:
		m.ResetName()
		return nil
	case rent591homedetailpositionrounddata.FieldKey:
		m.ResetKey()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.rent591home_detail_position_rounds != nil {
		edges = append(edges, rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRounds)
	}
	if m.rent591home_detail_position_round_data_childrens != nil {
		edges = append(edges, rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRoundDataChildrens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRounds:
		ids := make([]ent.Value, 0, len(m.rent591home_detail_position_rounds))
		for id := range m.rent591home_detail_position_rounds {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRoundDataChildrens:
		ids := make([]ent.Value, 0, len(m.rent591home_detail_position_round_data_childrens))
		for id := range m.rent591home_detail_position_round_data_childrens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrent591home_detail_position_rounds != nil {
		edges = append(edges, rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRounds)
	}
	if m.removedrent591home_detail_position_round_data_childrens != nil {
		edges = append(edges, rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRoundDataChildrens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRounds:
		ids := make([]ent.Value, 0, len(m.removedrent591home_detail_position_rounds))
		for id := range m.removedrent591home_detail_position_rounds {
			ids = append(ids, id)
		}
		return ids
	case rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRoundDataChildrens:
		ids := make([]ent.Value, 0, len(m.removedrent591home_detail_position_round_data_childrens))
		for id := range m.removedrent591home_detail_position_round_data_childrens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrent591home_detail_position_rounds {
		edges = append(edges, rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRounds)
	}
	if m.clearedrent591home_detail_position_round_data_childrens {
		edges = append(edges, rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRoundDataChildrens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeDetailPositionRoundDataMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRounds:
		return m.clearedrent591home_detail_position_rounds
	case rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRoundDataChildrens:
		return m.clearedrent591home_detail_position_round_data_childrens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundDataMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundDataMutation) ResetEdge(name string) error {
	switch name {
	case rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRounds:
		m.ResetRent591homeDetailPositionRounds()
		return nil
	case rent591homedetailpositionrounddata.EdgeRent591homeDetailPositionRoundDataChildrens:
		m.ResetRent591homeDetailPositionRoundDataChildrens()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundData edge %s", name)
}

// Rent591HomeDetailPositionRoundDataChildrenMutation represents an operation that mutates the Rent591HomeDetailPositionRoundDataChildren nodes in the graph.
type Rent591HomeDetailPositionRoundDataChildrenMutation struct {
	config
	op                                             Op
	typ                                            string
	id                                             *int
	name                                           *string
	key                                            *string
	clearedFields                                  map[string]struct{}
	rent591home_detail_position_round_datas        map[int]struct{}
	removedrent591home_detail_position_round_datas map[int]struct{}
	clearedrent591home_detail_position_round_datas bool
	done                                           bool
	oldValue                                       func(context.Context) (*Rent591HomeDetailPositionRoundDataChildren, error)
	predicates                                     []predicate.Rent591HomeDetailPositionRoundDataChildren
}

var _ ent.Mutation = (*Rent591HomeDetailPositionRoundDataChildrenMutation)(nil)

// rent591homedetailpositionrounddatachildrenOption allows management of the mutation configuration using functional options.
type rent591homedetailpositionrounddatachildrenOption func(*Rent591HomeDetailPositionRoundDataChildrenMutation)

// newRent591HomeDetailPositionRoundDataChildrenMutation creates new mutation for the Rent591HomeDetailPositionRoundDataChildren entity.
func newRent591HomeDetailPositionRoundDataChildrenMutation(c config, op Op, opts ...rent591homedetailpositionrounddatachildrenOption) *Rent591HomeDetailPositionRoundDataChildrenMutation {
	m := &Rent591HomeDetailPositionRoundDataChildrenMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeDetailPositionRoundDataChildren,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeDetailPositionRoundDataChildrenID sets the ID field of the mutation.
func withRent591HomeDetailPositionRoundDataChildrenID(id int) rent591homedetailpositionrounddatachildrenOption {
	return func(m *Rent591HomeDetailPositionRoundDataChildrenMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeDetailPositionRoundDataChildren
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeDetailPositionRoundDataChildren, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeDetailPositionRoundDataChildren.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeDetailPositionRoundDataChildren sets the old Rent591HomeDetailPositionRoundDataChildren of the mutation.
func withRent591HomeDetailPositionRoundDataChildren(node *Rent591HomeDetailPositionRoundDataChildren) rent591homedetailpositionrounddatachildrenOption {
	return func(m *Rent591HomeDetailPositionRoundDataChildrenMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeDetailPositionRoundDataChildren, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeDetailPositionRoundDataChildrenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeDetailPositionRoundDataChildrenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeDetailPositionRoundDataChildren.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Rent591HomeDetailPositionRoundDataChildren entity.
// If the Rent591HomeDetailPositionRoundDataChildren object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) ResetName() {
	m.name = nil
}

// SetKey sets the "key" field.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Rent591HomeDetailPositionRoundDataChildren entity.
// If the Rent591HomeDetailPositionRoundDataChildren object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) ResetKey() {
	m.key = nil
}

// AddRent591homeDetailPositionRoundDataIDs adds the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity by ids.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) AddRent591homeDetailPositionRoundDataIDs(ids ...int) {
	if m.rent591home_detail_position_round_datas == nil {
		m.rent591home_detail_position_round_datas = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_detail_position_round_datas[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetailPositionRoundDatas clears the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) ClearRent591homeDetailPositionRoundDatas() {
	m.clearedrent591home_detail_position_round_datas = true
}

// Rent591homeDetailPositionRoundDatasCleared reports if the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity was cleared.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) Rent591homeDetailPositionRoundDatasCleared() bool {
	return m.clearedrent591home_detail_position_round_datas
}

// RemoveRent591homeDetailPositionRoundDataIDs removes the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity by IDs.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) RemoveRent591homeDetailPositionRoundDataIDs(ids ...int) {
	if m.removedrent591home_detail_position_round_datas == nil {
		m.removedrent591home_detail_position_round_datas = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_detail_position_round_datas, ids[i])
		m.removedrent591home_detail_position_round_datas[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetailPositionRoundDatas returns the removed IDs of the "rent591home_detail_position_round_datas" edge to the Rent591HomeDetailPositionRoundData entity.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) RemovedRent591homeDetailPositionRoundDatasIDs() (ids []int) {
	for id := range m.removedrent591home_detail_position_round_datas {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailPositionRoundDatasIDs returns the "rent591home_detail_position_round_datas" edge IDs in the mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) Rent591homeDetailPositionRoundDatasIDs() (ids []int) {
	for id := range m.rent591home_detail_position_round_datas {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetailPositionRoundDatas resets all changes to the "rent591home_detail_position_round_datas" edge.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) ResetRent591homeDetailPositionRoundDatas() {
	m.rent591home_detail_position_round_datas = nil
	m.clearedrent591home_detail_position_round_datas = false
	m.removedrent591home_detail_position_round_datas = nil
}

// Where appends a list predicates to the Rent591HomeDetailPositionRoundDataChildrenMutation builder.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) Where(ps ...predicate.Rent591HomeDetailPositionRoundDataChildren) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeDetailPositionRoundDataChildrenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeDetailPositionRoundDataChildren, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeDetailPositionRoundDataChildren).
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, rent591homedetailpositionrounddatachildren.FieldName)
	}
	if m.key != nil {
		fields = append(fields, rent591homedetailpositionrounddatachildren.FieldKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailpositionrounddatachildren.FieldName:
		return m.Name()
	case rent591homedetailpositionrounddatachildren.FieldKey:
		return m.Key()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homedetailpositionrounddatachildren.FieldName:
		return m.OldName(ctx)
	case rent591homedetailpositionrounddatachildren.FieldKey:
		return m.OldKey(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeDetailPositionRoundDataChildren field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailpositionrounddatachildren.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rent591homedetailpositionrounddatachildren.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundDataChildren field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundDataChildren numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundDataChildren nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) ResetField(name string) error {
	switch name {
	case rent591homedetailpositionrounddatachildren.FieldName:
		m.ResetName()
		return nil
	case rent591homedetailpositionrounddatachildren.FieldKey:
		m.ResetKey()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundDataChildren field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rent591home_detail_position_round_datas != nil {
		edges = append(edges, rent591homedetailpositionrounddatachildren.EdgeRent591homeDetailPositionRoundDatas)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailpositionrounddatachildren.EdgeRent591homeDetailPositionRoundDatas:
		ids := make([]ent.Value, 0, len(m.rent591home_detail_position_round_datas))
		for id := range m.rent591home_detail_position_round_datas {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrent591home_detail_position_round_datas != nil {
		edges = append(edges, rent591homedetailpositionrounddatachildren.EdgeRent591homeDetailPositionRoundDatas)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailpositionrounddatachildren.EdgeRent591homeDetailPositionRoundDatas:
		ids := make([]ent.Value, 0, len(m.removedrent591home_detail_position_round_datas))
		for id := range m.removedrent591home_detail_position_round_datas {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrent591home_detail_position_round_datas {
		edges = append(edges, rent591homedetailpositionrounddatachildren.EdgeRent591homeDetailPositionRoundDatas)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homedetailpositionrounddatachildren.EdgeRent591homeDetailPositionRoundDatas:
		return m.clearedrent591home_detail_position_round_datas
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundDataChildren unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeDetailPositionRoundDataChildrenMutation) ResetEdge(name string) error {
	switch name {
	case rent591homedetailpositionrounddatachildren.EdgeRent591homeDetailPositionRoundDatas:
		m.ResetRent591homeDetailPositionRoundDatas()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPositionRoundDataChildren edge %s", name)
}

// Rent591HomeDetailPublishMutation represents an operation that mutates the Rent591HomeDetailPublish nodes in the graph.
type Rent591HomeDetailPublishMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	post_id                    *int
	addpost_id                 *int
	name                       *string
	key                        *string
	post_time                  *string
	update_time                *string
	clearedFields              map[string]struct{}
	rent591home_details        map[int]struct{}
	removedrent591home_details map[int]struct{}
	clearedrent591home_details bool
	done                       bool
	oldValue                   func(context.Context) (*Rent591HomeDetailPublish, error)
	predicates                 []predicate.Rent591HomeDetailPublish
}

var _ ent.Mutation = (*Rent591HomeDetailPublishMutation)(nil)

// rent591homedetailpublishOption allows management of the mutation configuration using functional options.
type rent591homedetailpublishOption func(*Rent591HomeDetailPublishMutation)

// newRent591HomeDetailPublishMutation creates new mutation for the Rent591HomeDetailPublish entity.
func newRent591HomeDetailPublishMutation(c config, op Op, opts ...rent591homedetailpublishOption) *Rent591HomeDetailPublishMutation {
	m := &Rent591HomeDetailPublishMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeDetailPublish,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeDetailPublishID sets the ID field of the mutation.
func withRent591HomeDetailPublishID(id int) rent591homedetailpublishOption {
	return func(m *Rent591HomeDetailPublishMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeDetailPublish
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeDetailPublish, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeDetailPublish.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeDetailPublish sets the old Rent591HomeDetailPublish of the mutation.
func withRent591HomeDetailPublish(node *Rent591HomeDetailPublish) rent591homedetailpublishOption {
	return func(m *Rent591HomeDetailPublishMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeDetailPublish, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeDetailPublishMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeDetailPublishMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeDetailPublishMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeDetailPublishMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeDetailPublish.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPostID sets the "post_id" field.
func (m *Rent591HomeDetailPublishMutation) SetPostID(i int) {
	m.post_id = &i
	m.addpost_id = nil
}

// PostID returns the value of the "post_id" field in the mutation.
func (m *Rent591HomeDetailPublishMutation) PostID() (r int, exists bool) {
	v := m.post_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPostID returns the old "post_id" field's value of the Rent591HomeDetailPublish entity.
// If the Rent591HomeDetailPublish object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPublishMutation) OldPostID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostID: %w", err)
	}
	return oldValue.PostID, nil
}

// AddPostID adds i to the "post_id" field.
func (m *Rent591HomeDetailPublishMutation) AddPostID(i int) {
	if m.addpost_id != nil {
		*m.addpost_id += i
	} else {
		m.addpost_id = &i
	}
}

// AddedPostID returns the value that was added to the "post_id" field in this mutation.
func (m *Rent591HomeDetailPublishMutation) AddedPostID() (r int, exists bool) {
	v := m.addpost_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPostID resets all changes to the "post_id" field.
func (m *Rent591HomeDetailPublishMutation) ResetPostID() {
	m.post_id = nil
	m.addpost_id = nil
}

// SetName sets the "name" field.
func (m *Rent591HomeDetailPublishMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *Rent591HomeDetailPublishMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Rent591HomeDetailPublish entity.
// If the Rent591HomeDetailPublish object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPublishMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *Rent591HomeDetailPublishMutation) ResetName() {
	m.name = nil
}

// SetKey sets the "key" field.
func (m *Rent591HomeDetailPublishMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *Rent591HomeDetailPublishMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Rent591HomeDetailPublish entity.
// If the Rent591HomeDetailPublish object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPublishMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *Rent591HomeDetailPublishMutation) ResetKey() {
	m.key = nil
}

// SetPostTime sets the "post_time" field.
func (m *Rent591HomeDetailPublishMutation) SetPostTime(s string) {
	m.post_time = &s
}

// PostTime returns the value of the "post_time" field in the mutation.
func (m *Rent591HomeDetailPublishMutation) PostTime() (r string, exists bool) {
	v := m.post_time
	if v == nil {
		return
	}
	return *v, true
}

// OldPostTime returns the old "post_time" field's value of the Rent591HomeDetailPublish entity.
// If the Rent591HomeDetailPublish object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPublishMutation) OldPostTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostTime: %w", err)
	}
	return oldValue.PostTime, nil
}

// ResetPostTime resets all changes to the "post_time" field.
func (m *Rent591HomeDetailPublishMutation) ResetPostTime() {
	m.post_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *Rent591HomeDetailPublishMutation) SetUpdateTime(s string) {
	m.update_time = &s
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *Rent591HomeDetailPublishMutation) UpdateTime() (r string, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Rent591HomeDetailPublish entity.
// If the Rent591HomeDetailPublish object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailPublishMutation) OldUpdateTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *Rent591HomeDetailPublishMutation) ResetUpdateTime() {
	m.update_time = nil
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by ids.
func (m *Rent591HomeDetailPublishMutation) AddRent591homeDetailIDs(ids ...int) {
	if m.rent591home_details == nil {
		m.rent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_details[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailPublishMutation) ClearRent591homeDetails() {
	m.clearedrent591home_details = true
}

// Rent591homeDetailsCleared reports if the "rent591home_details" edge to the Rent591HomeDetail entity was cleared.
func (m *Rent591HomeDetailPublishMutation) Rent591homeDetailsCleared() bool {
	return m.clearedrent591home_details
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (m *Rent591HomeDetailPublishMutation) RemoveRent591homeDetailIDs(ids ...int) {
	if m.removedrent591home_details == nil {
		m.removedrent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_details, ids[i])
		m.removedrent591home_details[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetails returns the removed IDs of the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailPublishMutation) RemovedRent591homeDetailsIDs() (ids []int) {
	for id := range m.removedrent591home_details {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailsIDs returns the "rent591home_details" edge IDs in the mutation.
func (m *Rent591HomeDetailPublishMutation) Rent591homeDetailsIDs() (ids []int) {
	for id := range m.rent591home_details {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetails resets all changes to the "rent591home_details" edge.
func (m *Rent591HomeDetailPublishMutation) ResetRent591homeDetails() {
	m.rent591home_details = nil
	m.clearedrent591home_details = false
	m.removedrent591home_details = nil
}

// Where appends a list predicates to the Rent591HomeDetailPublishMutation builder.
func (m *Rent591HomeDetailPublishMutation) Where(ps ...predicate.Rent591HomeDetailPublish) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeDetailPublishMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeDetailPublishMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeDetailPublish, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeDetailPublishMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeDetailPublishMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeDetailPublish).
func (m *Rent591HomeDetailPublishMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeDetailPublishMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.post_id != nil {
		fields = append(fields, rent591homedetailpublish.FieldPostID)
	}
	if m.name != nil {
		fields = append(fields, rent591homedetailpublish.FieldName)
	}
	if m.key != nil {
		fields = append(fields, rent591homedetailpublish.FieldKey)
	}
	if m.post_time != nil {
		fields = append(fields, rent591homedetailpublish.FieldPostTime)
	}
	if m.update_time != nil {
		fields = append(fields, rent591homedetailpublish.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeDetailPublishMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailpublish.FieldPostID:
		return m.PostID()
	case rent591homedetailpublish.FieldName:
		return m.Name()
	case rent591homedetailpublish.FieldKey:
		return m.Key()
	case rent591homedetailpublish.FieldPostTime:
		return m.PostTime()
	case rent591homedetailpublish.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeDetailPublishMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homedetailpublish.FieldPostID:
		return m.OldPostID(ctx)
	case rent591homedetailpublish.FieldName:
		return m.OldName(ctx)
	case rent591homedetailpublish.FieldKey:
		return m.OldKey(ctx)
	case rent591homedetailpublish.FieldPostTime:
		return m.OldPostTime(ctx)
	case rent591homedetailpublish.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeDetailPublish field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailPublishMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailpublish.FieldPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostID(v)
		return nil
	case rent591homedetailpublish.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rent591homedetailpublish.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case rent591homedetailpublish.FieldPostTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostTime(v)
		return nil
	case rent591homedetailpublish.FieldUpdateTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPublish field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeDetailPublishMutation) AddedFields() []string {
	var fields []string
	if m.addpost_id != nil {
		fields = append(fields, rent591homedetailpublish.FieldPostID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeDetailPublishMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailpublish.FieldPostID:
		return m.AddedPostID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailPublishMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailpublish.FieldPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPostID(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPublish numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeDetailPublishMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeDetailPublishMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeDetailPublishMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeDetailPublish nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeDetailPublishMutation) ResetField(name string) error {
	switch name {
	case rent591homedetailpublish.FieldPostID:
		m.ResetPostID()
		return nil
	case rent591homedetailpublish.FieldName:
		m.ResetName()
		return nil
	case rent591homedetailpublish.FieldKey:
		m.ResetKey()
		return nil
	case rent591homedetailpublish.FieldPostTime:
		m.ResetPostTime()
		return nil
	case rent591homedetailpublish.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPublish field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeDetailPublishMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rent591home_details != nil {
		edges = append(edges, rent591homedetailpublish.EdgeRent591homeDetails)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeDetailPublishMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailpublish.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.rent591home_details))
		for id := range m.rent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeDetailPublishMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrent591home_details != nil {
		edges = append(edges, rent591homedetailpublish.EdgeRent591homeDetails)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeDetailPublishMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailpublish.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.removedrent591home_details))
		for id := range m.removedrent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeDetailPublishMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrent591home_details {
		edges = append(edges, rent591homedetailpublish.EdgeRent591homeDetails)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeDetailPublishMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homedetailpublish.EdgeRent591homeDetails:
		return m.clearedrent591home_details
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeDetailPublishMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailPublish unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeDetailPublishMutation) ResetEdge(name string) error {
	switch name {
	case rent591homedetailpublish.EdgeRent591homeDetails:
		m.ResetRent591homeDetails()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailPublish edge %s", name)
}

// Rent591HomeDetailShareInfoMutation represents an operation that mutates the Rent591HomeDetailShareInfo nodes in the graph.
type Rent591HomeDetailShareInfoMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	url                        *string
	_From                      *string
	title                      *string
	clearedFields              map[string]struct{}
	rent591home_details        map[int]struct{}
	removedrent591home_details map[int]struct{}
	clearedrent591home_details bool
	done                       bool
	oldValue                   func(context.Context) (*Rent591HomeDetailShareInfo, error)
	predicates                 []predicate.Rent591HomeDetailShareInfo
}

var _ ent.Mutation = (*Rent591HomeDetailShareInfoMutation)(nil)

// rent591homedetailshareinfoOption allows management of the mutation configuration using functional options.
type rent591homedetailshareinfoOption func(*Rent591HomeDetailShareInfoMutation)

// newRent591HomeDetailShareInfoMutation creates new mutation for the Rent591HomeDetailShareInfo entity.
func newRent591HomeDetailShareInfoMutation(c config, op Op, opts ...rent591homedetailshareinfoOption) *Rent591HomeDetailShareInfoMutation {
	m := &Rent591HomeDetailShareInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeDetailShareInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeDetailShareInfoID sets the ID field of the mutation.
func withRent591HomeDetailShareInfoID(id int) rent591homedetailshareinfoOption {
	return func(m *Rent591HomeDetailShareInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeDetailShareInfo
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeDetailShareInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeDetailShareInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeDetailShareInfo sets the old Rent591HomeDetailShareInfo of the mutation.
func withRent591HomeDetailShareInfo(node *Rent591HomeDetailShareInfo) rent591homedetailshareinfoOption {
	return func(m *Rent591HomeDetailShareInfoMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeDetailShareInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeDetailShareInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeDetailShareInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeDetailShareInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeDetailShareInfoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeDetailShareInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *Rent591HomeDetailShareInfoMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *Rent591HomeDetailShareInfoMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Rent591HomeDetailShareInfo entity.
// If the Rent591HomeDetailShareInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailShareInfoMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *Rent591HomeDetailShareInfoMutation) ResetURL() {
	m.url = nil
}

// SetFrom sets the "From" field.
func (m *Rent591HomeDetailShareInfoMutation) SetFrom(s string) {
	m._From = &s
}

// From returns the value of the "From" field in the mutation.
func (m *Rent591HomeDetailShareInfoMutation) From() (r string, exists bool) {
	v := m._From
	if v == nil {
		return
	}
	return *v, true
}

// OldFrom returns the old "From" field's value of the Rent591HomeDetailShareInfo entity.
// If the Rent591HomeDetailShareInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailShareInfoMutation) OldFrom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrom: %w", err)
	}
	return oldValue.From, nil
}

// ResetFrom resets all changes to the "From" field.
func (m *Rent591HomeDetailShareInfoMutation) ResetFrom() {
	m._From = nil
}

// SetTitle sets the "title" field.
func (m *Rent591HomeDetailShareInfoMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *Rent591HomeDetailShareInfoMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Rent591HomeDetailShareInfo entity.
// If the Rent591HomeDetailShareInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailShareInfoMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *Rent591HomeDetailShareInfoMutation) ResetTitle() {
	m.title = nil
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by ids.
func (m *Rent591HomeDetailShareInfoMutation) AddRent591homeDetailIDs(ids ...int) {
	if m.rent591home_details == nil {
		m.rent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_details[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailShareInfoMutation) ClearRent591homeDetails() {
	m.clearedrent591home_details = true
}

// Rent591homeDetailsCleared reports if the "rent591home_details" edge to the Rent591HomeDetail entity was cleared.
func (m *Rent591HomeDetailShareInfoMutation) Rent591homeDetailsCleared() bool {
	return m.clearedrent591home_details
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (m *Rent591HomeDetailShareInfoMutation) RemoveRent591homeDetailIDs(ids ...int) {
	if m.removedrent591home_details == nil {
		m.removedrent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_details, ids[i])
		m.removedrent591home_details[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetails returns the removed IDs of the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailShareInfoMutation) RemovedRent591homeDetailsIDs() (ids []int) {
	for id := range m.removedrent591home_details {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailsIDs returns the "rent591home_details" edge IDs in the mutation.
func (m *Rent591HomeDetailShareInfoMutation) Rent591homeDetailsIDs() (ids []int) {
	for id := range m.rent591home_details {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetails resets all changes to the "rent591home_details" edge.
func (m *Rent591HomeDetailShareInfoMutation) ResetRent591homeDetails() {
	m.rent591home_details = nil
	m.clearedrent591home_details = false
	m.removedrent591home_details = nil
}

// Where appends a list predicates to the Rent591HomeDetailShareInfoMutation builder.
func (m *Rent591HomeDetailShareInfoMutation) Where(ps ...predicate.Rent591HomeDetailShareInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeDetailShareInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeDetailShareInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeDetailShareInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeDetailShareInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeDetailShareInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeDetailShareInfo).
func (m *Rent591HomeDetailShareInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeDetailShareInfoMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.url != nil {
		fields = append(fields, rent591homedetailshareinfo.FieldURL)
	}
	if m._From != nil {
		fields = append(fields, rent591homedetailshareinfo.FieldFrom)
	}
	if m.title != nil {
		fields = append(fields, rent591homedetailshareinfo.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeDetailShareInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailshareinfo.FieldURL:
		return m.URL()
	case rent591homedetailshareinfo.FieldFrom:
		return m.From()
	case rent591homedetailshareinfo.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeDetailShareInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homedetailshareinfo.FieldURL:
		return m.OldURL(ctx)
	case rent591homedetailshareinfo.FieldFrom:
		return m.OldFrom(ctx)
	case rent591homedetailshareinfo.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeDetailShareInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailShareInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailshareinfo.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case rent591homedetailshareinfo.FieldFrom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrom(v)
		return nil
	case rent591homedetailshareinfo.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailShareInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeDetailShareInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeDetailShareInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailShareInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailShareInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeDetailShareInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeDetailShareInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeDetailShareInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeDetailShareInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeDetailShareInfoMutation) ResetField(name string) error {
	switch name {
	case rent591homedetailshareinfo.FieldURL:
		m.ResetURL()
		return nil
	case rent591homedetailshareinfo.FieldFrom:
		m.ResetFrom()
		return nil
	case rent591homedetailshareinfo.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailShareInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeDetailShareInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rent591home_details != nil {
		edges = append(edges, rent591homedetailshareinfo.EdgeRent591homeDetails)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeDetailShareInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailshareinfo.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.rent591home_details))
		for id := range m.rent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeDetailShareInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrent591home_details != nil {
		edges = append(edges, rent591homedetailshareinfo.EdgeRent591homeDetails)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeDetailShareInfoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailshareinfo.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.removedrent591home_details))
		for id := range m.removedrent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeDetailShareInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrent591home_details {
		edges = append(edges, rent591homedetailshareinfo.EdgeRent591homeDetails)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeDetailShareInfoMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homedetailshareinfo.EdgeRent591homeDetails:
		return m.clearedrent591home_details
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeDetailShareInfoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailShareInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeDetailShareInfoMutation) ResetEdge(name string) error {
	switch name {
	case rent591homedetailshareinfo.EdgeRent591homeDetails:
		m.ResetRent591homeDetails()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailShareInfo edge %s", name)
}

// Rent591HomeDetailTagMutation represents an operation that mutates the Rent591HomeDetailTag nodes in the graph.
type Rent591HomeDetailTagMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	post_id                    *int
	addpost_id                 *int
	value                      *string
	clearedFields              map[string]struct{}
	rent591home_details        map[int]struct{}
	removedrent591home_details map[int]struct{}
	clearedrent591home_details bool
	done                       bool
	oldValue                   func(context.Context) (*Rent591HomeDetailTag, error)
	predicates                 []predicate.Rent591HomeDetailTag
}

var _ ent.Mutation = (*Rent591HomeDetailTagMutation)(nil)

// rent591homedetailtagOption allows management of the mutation configuration using functional options.
type rent591homedetailtagOption func(*Rent591HomeDetailTagMutation)

// newRent591HomeDetailTagMutation creates new mutation for the Rent591HomeDetailTag entity.
func newRent591HomeDetailTagMutation(c config, op Op, opts ...rent591homedetailtagOption) *Rent591HomeDetailTagMutation {
	m := &Rent591HomeDetailTagMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeDetailTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeDetailTagID sets the ID field of the mutation.
func withRent591HomeDetailTagID(id int) rent591homedetailtagOption {
	return func(m *Rent591HomeDetailTagMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeDetailTag
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeDetailTag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeDetailTag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeDetailTag sets the old Rent591HomeDetailTag of the mutation.
func withRent591HomeDetailTag(node *Rent591HomeDetailTag) rent591homedetailtagOption {
	return func(m *Rent591HomeDetailTagMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeDetailTag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeDetailTagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeDetailTagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeDetailTagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeDetailTagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeDetailTag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPostID sets the "post_id" field.
func (m *Rent591HomeDetailTagMutation) SetPostID(i int) {
	m.post_id = &i
	m.addpost_id = nil
}

// PostID returns the value of the "post_id" field in the mutation.
func (m *Rent591HomeDetailTagMutation) PostID() (r int, exists bool) {
	v := m.post_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPostID returns the old "post_id" field's value of the Rent591HomeDetailTag entity.
// If the Rent591HomeDetailTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailTagMutation) OldPostID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPostID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPostID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostID: %w", err)
	}
	return oldValue.PostID, nil
}

// AddPostID adds i to the "post_id" field.
func (m *Rent591HomeDetailTagMutation) AddPostID(i int) {
	if m.addpost_id != nil {
		*m.addpost_id += i
	} else {
		m.addpost_id = &i
	}
}

// AddedPostID returns the value that was added to the "post_id" field in this mutation.
func (m *Rent591HomeDetailTagMutation) AddedPostID() (r int, exists bool) {
	v := m.addpost_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPostID resets all changes to the "post_id" field.
func (m *Rent591HomeDetailTagMutation) ResetPostID() {
	m.post_id = nil
	m.addpost_id = nil
}

// SetValue sets the "value" field.
func (m *Rent591HomeDetailTagMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *Rent591HomeDetailTagMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Rent591HomeDetailTag entity.
// If the Rent591HomeDetailTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeDetailTagMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *Rent591HomeDetailTagMutation) ResetValue() {
	m.value = nil
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by ids.
func (m *Rent591HomeDetailTagMutation) AddRent591homeDetailIDs(ids ...int) {
	if m.rent591home_details == nil {
		m.rent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591home_details[ids[i]] = struct{}{}
	}
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailTagMutation) ClearRent591homeDetails() {
	m.clearedrent591home_details = true
}

// Rent591homeDetailsCleared reports if the "rent591home_details" edge to the Rent591HomeDetail entity was cleared.
func (m *Rent591HomeDetailTagMutation) Rent591homeDetailsCleared() bool {
	return m.clearedrent591home_details
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (m *Rent591HomeDetailTagMutation) RemoveRent591homeDetailIDs(ids ...int) {
	if m.removedrent591home_details == nil {
		m.removedrent591home_details = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591home_details, ids[i])
		m.removedrent591home_details[ids[i]] = struct{}{}
	}
}

// RemovedRent591homeDetails returns the removed IDs of the "rent591home_details" edge to the Rent591HomeDetail entity.
func (m *Rent591HomeDetailTagMutation) RemovedRent591homeDetailsIDs() (ids []int) {
	for id := range m.removedrent591home_details {
		ids = append(ids, id)
	}
	return
}

// Rent591homeDetailsIDs returns the "rent591home_details" edge IDs in the mutation.
func (m *Rent591HomeDetailTagMutation) Rent591homeDetailsIDs() (ids []int) {
	for id := range m.rent591home_details {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homeDetails resets all changes to the "rent591home_details" edge.
func (m *Rent591HomeDetailTagMutation) ResetRent591homeDetails() {
	m.rent591home_details = nil
	m.clearedrent591home_details = false
	m.removedrent591home_details = nil
}

// Where appends a list predicates to the Rent591HomeDetailTagMutation builder.
func (m *Rent591HomeDetailTagMutation) Where(ps ...predicate.Rent591HomeDetailTag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeDetailTagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeDetailTagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeDetailTag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeDetailTagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeDetailTagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeDetailTag).
func (m *Rent591HomeDetailTagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeDetailTagMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.post_id != nil {
		fields = append(fields, rent591homedetailtag.FieldPostID)
	}
	if m.value != nil {
		fields = append(fields, rent591homedetailtag.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeDetailTagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailtag.FieldPostID:
		return m.PostID()
	case rent591homedetailtag.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeDetailTagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homedetailtag.FieldPostID:
		return m.OldPostID(ctx)
	case rent591homedetailtag.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeDetailTag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailTagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailtag.FieldPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostID(v)
		return nil
	case rent591homedetailtag.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailTag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeDetailTagMutation) AddedFields() []string {
	var fields []string
	if m.addpost_id != nil {
		fields = append(fields, rent591homedetailtag.FieldPostID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeDetailTagMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rent591homedetailtag.FieldPostID:
		return m.AddedPostID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeDetailTagMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rent591homedetailtag.FieldPostID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPostID(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailTag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeDetailTagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeDetailTagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeDetailTagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeDetailTag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeDetailTagMutation) ResetField(name string) error {
	switch name {
	case rent591homedetailtag.FieldPostID:
		m.ResetPostID()
		return nil
	case rent591homedetailtag.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailTag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeDetailTagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rent591home_details != nil {
		edges = append(edges, rent591homedetailtag.EdgeRent591homeDetails)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeDetailTagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailtag.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.rent591home_details))
		for id := range m.rent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeDetailTagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrent591home_details != nil {
		edges = append(edges, rent591homedetailtag.EdgeRent591homeDetails)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeDetailTagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591homedetailtag.EdgeRent591homeDetails:
		ids := make([]ent.Value, 0, len(m.removedrent591home_details))
		for id := range m.removedrent591home_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeDetailTagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrent591home_details {
		edges = append(edges, rent591homedetailtag.EdgeRent591homeDetails)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeDetailTagMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homedetailtag.EdgeRent591homeDetails:
		return m.clearedrent591home_details
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeDetailTagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeDetailTag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeDetailTagMutation) ResetEdge(name string) error {
	switch name {
	case rent591homedetailtag.EdgeRent591homeDetails:
		m.ResetRent591homeDetails()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeDetailTag edge %s", name)
}

// Rent591HomeSurroundingMutation represents an operation that mutates the Rent591HomeSurrounding nodes in the graph.
type Rent591HomeSurroundingMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_type               *string
	desc                *string
	distance            *string
	created_at          *time.Time
	clearedFields       map[string]struct{}
	rent591homes        *int
	clearedrent591homes bool
	done                bool
	oldValue            func(context.Context) (*Rent591HomeSurrounding, error)
	predicates          []predicate.Rent591HomeSurrounding
}

var _ ent.Mutation = (*Rent591HomeSurroundingMutation)(nil)

// rent591homesurroundingOption allows management of the mutation configuration using functional options.
type rent591homesurroundingOption func(*Rent591HomeSurroundingMutation)

// newRent591HomeSurroundingMutation creates new mutation for the Rent591HomeSurrounding entity.
func newRent591HomeSurroundingMutation(c config, op Op, opts ...rent591homesurroundingOption) *Rent591HomeSurroundingMutation {
	m := &Rent591HomeSurroundingMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeSurrounding,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeSurroundingID sets the ID field of the mutation.
func withRent591HomeSurroundingID(id int) rent591homesurroundingOption {
	return func(m *Rent591HomeSurroundingMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeSurrounding
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeSurrounding, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeSurrounding.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeSurrounding sets the old Rent591HomeSurrounding of the mutation.
func withRent591HomeSurrounding(node *Rent591HomeSurrounding) rent591homesurroundingOption {
	return func(m *Rent591HomeSurroundingMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeSurrounding, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeSurroundingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeSurroundingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeSurroundingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeSurroundingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeSurrounding.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *Rent591HomeSurroundingMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *Rent591HomeSurroundingMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Rent591HomeSurrounding entity.
// If the Rent591HomeSurrounding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeSurroundingMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *Rent591HomeSurroundingMutation) ResetType() {
	m._type = nil
}

// SetDesc sets the "desc" field.
func (m *Rent591HomeSurroundingMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *Rent591HomeSurroundingMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Rent591HomeSurrounding entity.
// If the Rent591HomeSurrounding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeSurroundingMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *Rent591HomeSurroundingMutation) ResetDesc() {
	m.desc = nil
}

// SetDistance sets the "distance" field.
func (m *Rent591HomeSurroundingMutation) SetDistance(s string) {
	m.distance = &s
}

// Distance returns the value of the "distance" field in the mutation.
func (m *Rent591HomeSurroundingMutation) Distance() (r string, exists bool) {
	v := m.distance
	if v == nil {
		return
	}
	return *v, true
}

// OldDistance returns the old "distance" field's value of the Rent591HomeSurrounding entity.
// If the Rent591HomeSurrounding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeSurroundingMutation) OldDistance(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDistance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDistance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistance: %w", err)
	}
	return oldValue.Distance, nil
}

// ResetDistance resets all changes to the "distance" field.
func (m *Rent591HomeSurroundingMutation) ResetDistance() {
	m.distance = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *Rent591HomeSurroundingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *Rent591HomeSurroundingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Rent591HomeSurrounding entity.
// If the Rent591HomeSurrounding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeSurroundingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *Rent591HomeSurroundingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetRent591homesID sets the "rent591homes" edge to the Rent591Home entity by id.
func (m *Rent591HomeSurroundingMutation) SetRent591homesID(id int) {
	m.rent591homes = &id
}

// ClearRent591homes clears the "rent591homes" edge to the Rent591Home entity.
func (m *Rent591HomeSurroundingMutation) ClearRent591homes() {
	m.clearedrent591homes = true
}

// Rent591homesCleared reports if the "rent591homes" edge to the Rent591Home entity was cleared.
func (m *Rent591HomeSurroundingMutation) Rent591homesCleared() bool {
	return m.clearedrent591homes
}

// Rent591homesID returns the "rent591homes" edge ID in the mutation.
func (m *Rent591HomeSurroundingMutation) Rent591homesID() (id int, exists bool) {
	if m.rent591homes != nil {
		return *m.rent591homes, true
	}
	return
}

// Rent591homesIDs returns the "rent591homes" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// Rent591homesID instead. It exists only for internal usage by the builders.
func (m *Rent591HomeSurroundingMutation) Rent591homesIDs() (ids []int) {
	if id := m.rent591homes; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRent591homes resets all changes to the "rent591homes" edge.
func (m *Rent591HomeSurroundingMutation) ResetRent591homes() {
	m.rent591homes = nil
	m.clearedrent591homes = false
}

// Where appends a list predicates to the Rent591HomeSurroundingMutation builder.
func (m *Rent591HomeSurroundingMutation) Where(ps ...predicate.Rent591HomeSurrounding) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeSurroundingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeSurroundingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeSurrounding, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeSurroundingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeSurroundingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeSurrounding).
func (m *Rent591HomeSurroundingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeSurroundingMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._type != nil {
		fields = append(fields, rent591homesurrounding.FieldType)
	}
	if m.desc != nil {
		fields = append(fields, rent591homesurrounding.FieldDesc)
	}
	if m.distance != nil {
		fields = append(fields, rent591homesurrounding.FieldDistance)
	}
	if m.created_at != nil {
		fields = append(fields, rent591homesurrounding.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeSurroundingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591homesurrounding.FieldType:
		return m.GetType()
	case rent591homesurrounding.FieldDesc:
		return m.Desc()
	case rent591homesurrounding.FieldDistance:
		return m.Distance()
	case rent591homesurrounding.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeSurroundingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591homesurrounding.FieldType:
		return m.OldType(ctx)
	case rent591homesurrounding.FieldDesc:
		return m.OldDesc(ctx)
	case rent591homesurrounding.FieldDistance:
		return m.OldDistance(ctx)
	case rent591homesurrounding.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeSurrounding field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeSurroundingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591homesurrounding.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case rent591homesurrounding.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case rent591homesurrounding.FieldDistance:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistance(v)
		return nil
	case rent591homesurrounding.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeSurrounding field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeSurroundingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeSurroundingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeSurroundingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeSurrounding numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeSurroundingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeSurroundingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeSurroundingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeSurrounding nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeSurroundingMutation) ResetField(name string) error {
	switch name {
	case rent591homesurrounding.FieldType:
		m.ResetType()
		return nil
	case rent591homesurrounding.FieldDesc:
		m.ResetDesc()
		return nil
	case rent591homesurrounding.FieldDistance:
		m.ResetDistance()
		return nil
	case rent591homesurrounding.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeSurrounding field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeSurroundingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rent591homes != nil {
		edges = append(edges, rent591homesurrounding.EdgeRent591homes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeSurroundingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591homesurrounding.EdgeRent591homes:
		if id := m.rent591homes; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeSurroundingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeSurroundingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeSurroundingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrent591homes {
		edges = append(edges, rent591homesurrounding.EdgeRent591homes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeSurroundingMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591homesurrounding.EdgeRent591homes:
		return m.clearedrent591homes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeSurroundingMutation) ClearEdge(name string) error {
	switch name {
	case rent591homesurrounding.EdgeRent591homes:
		m.ClearRent591homes()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeSurrounding unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeSurroundingMutation) ResetEdge(name string) error {
	switch name {
	case rent591homesurrounding.EdgeRent591homes:
		m.ResetRent591homes()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeSurrounding edge %s", name)
}

// Rent591HomeTagMutation represents an operation that mutates the Rent591HomeTag nodes in the graph.
type Rent591HomeTagMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	created_at          *time.Time
	clearedFields       map[string]struct{}
	rent591homes        map[int]struct{}
	removedrent591homes map[int]struct{}
	clearedrent591homes bool
	done                bool
	oldValue            func(context.Context) (*Rent591HomeTag, error)
	predicates          []predicate.Rent591HomeTag
}

var _ ent.Mutation = (*Rent591HomeTagMutation)(nil)

// rent591hometagOption allows management of the mutation configuration using functional options.
type rent591hometagOption func(*Rent591HomeTagMutation)

// newRent591HomeTagMutation creates new mutation for the Rent591HomeTag entity.
func newRent591HomeTagMutation(c config, op Op, opts ...rent591hometagOption) *Rent591HomeTagMutation {
	m := &Rent591HomeTagMutation{
		config:        c,
		op:            op,
		typ:           TypeRent591HomeTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRent591HomeTagID sets the ID field of the mutation.
func withRent591HomeTagID(id int) rent591hometagOption {
	return func(m *Rent591HomeTagMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent591HomeTag
		)
		m.oldValue = func(ctx context.Context) (*Rent591HomeTag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent591HomeTag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent591HomeTag sets the old Rent591HomeTag of the mutation.
func withRent591HomeTag(node *Rent591HomeTag) rent591hometagOption {
	return func(m *Rent591HomeTagMutation) {
		m.oldValue = func(context.Context) (*Rent591HomeTag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Rent591HomeTagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Rent591HomeTagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Rent591HomeTagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Rent591HomeTagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rent591HomeTag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *Rent591HomeTagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *Rent591HomeTagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Rent591HomeTag entity.
// If the Rent591HomeTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeTagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *Rent591HomeTagMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *Rent591HomeTagMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *Rent591HomeTagMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Rent591HomeTag entity.
// If the Rent591HomeTag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Rent591HomeTagMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *Rent591HomeTagMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddRent591homeIDs adds the "rent591homes" edge to the Rent591Home entity by ids.
func (m *Rent591HomeTagMutation) AddRent591homeIDs(ids ...int) {
	if m.rent591homes == nil {
		m.rent591homes = make(map[int]struct{})
	}
	for i := range ids {
		m.rent591homes[ids[i]] = struct{}{}
	}
}

// ClearRent591homes clears the "rent591homes" edge to the Rent591Home entity.
func (m *Rent591HomeTagMutation) ClearRent591homes() {
	m.clearedrent591homes = true
}

// Rent591homesCleared reports if the "rent591homes" edge to the Rent591Home entity was cleared.
func (m *Rent591HomeTagMutation) Rent591homesCleared() bool {
	return m.clearedrent591homes
}

// RemoveRent591homeIDs removes the "rent591homes" edge to the Rent591Home entity by IDs.
func (m *Rent591HomeTagMutation) RemoveRent591homeIDs(ids ...int) {
	if m.removedrent591homes == nil {
		m.removedrent591homes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rent591homes, ids[i])
		m.removedrent591homes[ids[i]] = struct{}{}
	}
}

// RemovedRent591homes returns the removed IDs of the "rent591homes" edge to the Rent591Home entity.
func (m *Rent591HomeTagMutation) RemovedRent591homesIDs() (ids []int) {
	for id := range m.removedrent591homes {
		ids = append(ids, id)
	}
	return
}

// Rent591homesIDs returns the "rent591homes" edge IDs in the mutation.
func (m *Rent591HomeTagMutation) Rent591homesIDs() (ids []int) {
	for id := range m.rent591homes {
		ids = append(ids, id)
	}
	return
}

// ResetRent591homes resets all changes to the "rent591homes" edge.
func (m *Rent591HomeTagMutation) ResetRent591homes() {
	m.rent591homes = nil
	m.clearedrent591homes = false
	m.removedrent591homes = nil
}

// Where appends a list predicates to the Rent591HomeTagMutation builder.
func (m *Rent591HomeTagMutation) Where(ps ...predicate.Rent591HomeTag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Rent591HomeTagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Rent591HomeTagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Rent591HomeTag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Rent591HomeTagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Rent591HomeTagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Rent591HomeTag).
func (m *Rent591HomeTagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Rent591HomeTagMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, rent591hometag.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, rent591hometag.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Rent591HomeTagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent591hometag.FieldName:
		return m.Name()
	case rent591hometag.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Rent591HomeTagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent591hometag.FieldName:
		return m.OldName(ctx)
	case rent591hometag.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Rent591HomeTag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeTagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent591hometag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rent591hometag.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeTag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Rent591HomeTagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Rent591HomeTagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Rent591HomeTagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeTag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Rent591HomeTagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Rent591HomeTagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Rent591HomeTagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent591HomeTag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Rent591HomeTagMutation) ResetField(name string) error {
	switch name {
	case rent591hometag.FieldName:
		m.ResetName()
		return nil
	case rent591hometag.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeTag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Rent591HomeTagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rent591homes != nil {
		edges = append(edges, rent591hometag.EdgeRent591homes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Rent591HomeTagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent591hometag.EdgeRent591homes:
		ids := make([]ent.Value, 0, len(m.rent591homes))
		for id := range m.rent591homes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Rent591HomeTagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrent591homes != nil {
		edges = append(edges, rent591hometag.EdgeRent591homes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Rent591HomeTagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rent591hometag.EdgeRent591homes:
		ids := make([]ent.Value, 0, len(m.removedrent591homes))
		for id := range m.removedrent591homes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Rent591HomeTagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrent591homes {
		edges = append(edges, rent591hometag.EdgeRent591homes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Rent591HomeTagMutation) EdgeCleared(name string) bool {
	switch name {
	case rent591hometag.EdgeRent591homes:
		return m.clearedrent591homes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Rent591HomeTagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent591HomeTag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Rent591HomeTagMutation) ResetEdge(name string) error {
	switch name {
	case rent591hometag.EdgeRent591homes:
		m.ResetRent591homes()
		return nil
	}
	return fmt.Errorf("unknown Rent591HomeTag edge %s", name)
}

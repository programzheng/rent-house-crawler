// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbreadcrumb"
)

// Rent591HomeDetailBreadcrumbDelete is the builder for deleting a Rent591HomeDetailBreadcrumb entity.
type Rent591HomeDetailBreadcrumbDelete struct {
	config
	hooks    []Hook
	mutation *Rent591HomeDetailBreadcrumbMutation
}

// Where appends a list predicates to the Rent591HomeDetailBreadcrumbDelete builder.
func (rdbd *Rent591HomeDetailBreadcrumbDelete) Where(ps ...predicate.Rent591HomeDetailBreadcrumb) *Rent591HomeDetailBreadcrumbDelete {
	rdbd.mutation.Where(ps...)
	return rdbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rdbd *Rent591HomeDetailBreadcrumbDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rdbd.sqlExec, rdbd.mutation, rdbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rdbd *Rent591HomeDetailBreadcrumbDelete) ExecX(ctx context.Context) int {
	n, err := rdbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rdbd *Rent591HomeDetailBreadcrumbDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(rent591homedetailbreadcrumb.Table, sqlgraph.NewFieldSpec(rent591homedetailbreadcrumb.FieldID, field.TypeInt))
	if ps := rdbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rdbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rdbd.mutation.done = true
	return affected, err
}

// Rent591HomeDetailBreadcrumbDeleteOne is the builder for deleting a single Rent591HomeDetailBreadcrumb entity.
type Rent591HomeDetailBreadcrumbDeleteOne struct {
	rdbd *Rent591HomeDetailBreadcrumbDelete
}

// Where appends a list predicates to the Rent591HomeDetailBreadcrumbDelete builder.
func (rdbdo *Rent591HomeDetailBreadcrumbDeleteOne) Where(ps ...predicate.Rent591HomeDetailBreadcrumb) *Rent591HomeDetailBreadcrumbDeleteOne {
	rdbdo.rdbd.mutation.Where(ps...)
	return rdbdo
}

// Exec executes the deletion query.
func (rdbdo *Rent591HomeDetailBreadcrumbDeleteOne) Exec(ctx context.Context) error {
	n, err := rdbdo.rdbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rent591homedetailbreadcrumb.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rdbdo *Rent591HomeDetailBreadcrumbDeleteOne) ExecX(ctx context.Context) {
	if err := rdbdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package rent591homedetailbreadcrumb

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rent591homedetailbreadcrumb type in the database.
	Label = "rent591home_detail_breadcrumb"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPostID holds the string denoting the post_id field in the database.
	FieldPostID = "post_id"
	// FieldQuery holds the string denoting the query field in the database.
	FieldQuery = "query"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// EdgeRent591homeDetails holds the string denoting the rent591home_details edge name in mutations.
	EdgeRent591homeDetails = "rent591home_details"
	// Table holds the table name of the rent591homedetailbreadcrumb in the database.
	Table = "rent591home_detail_breadcrumbs"
	// Rent591homeDetailsTable is the table that holds the rent591home_details relation/edge. The primary key declared below.
	Rent591homeDetailsTable = "rent591home_detail_breadcrumb_rent591home_details"
	// Rent591homeDetailsInverseTable is the table name for the Rent591HomeDetail entity.
	// It exists in this package in order to avoid circular dependency with the "rent591homedetail" package.
	Rent591homeDetailsInverseTable = "rent591home_details"
)

// Columns holds all SQL columns for rent591homedetailbreadcrumb fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPostID,
	FieldQuery,
	FieldLink,
}

var (
	// Rent591homeDetailsPrimaryKey and Rent591homeDetailsColumn2 are the table columns denoting the
	// primary key for the rent591home_details relation (M2M).
	Rent591homeDetailsPrimaryKey = []string{"rent591home_detail_breadcrumb_id", "rent591home_detail_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Rent591HomeDetailBreadcrumb queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPostID orders the results by the post_id field.
func ByPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostID, opts...).ToFunc()
}

// ByQuery orders the results by the query field.
func ByQuery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuery, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByRent591homeDetailsCount orders the results by rent591home_details count.
func ByRent591homeDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRent591homeDetailsStep(), opts...)
	}
}

// ByRent591homeDetails orders the results by rent591home_details terms.
func ByRent591homeDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRent591homeDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRent591homeDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Rent591homeDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, Rent591homeDetailsTable, Rent591homeDetailsPrimaryKey...),
	)
}

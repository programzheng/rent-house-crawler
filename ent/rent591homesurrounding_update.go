// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591home"
	"github.com/programzheng/rent-house-crawler/ent/rent591homesurrounding"
)

// Rent591HomeSurroundingUpdate is the builder for updating Rent591HomeSurrounding entities.
type Rent591HomeSurroundingUpdate struct {
	config
	hooks    []Hook
	mutation *Rent591HomeSurroundingMutation
}

// Where appends a list predicates to the Rent591HomeSurroundingUpdate builder.
func (rsu *Rent591HomeSurroundingUpdate) Where(ps ...predicate.Rent591HomeSurrounding) *Rent591HomeSurroundingUpdate {
	rsu.mutation.Where(ps...)
	return rsu
}

// SetType sets the "type" field.
func (rsu *Rent591HomeSurroundingUpdate) SetType(s string) *Rent591HomeSurroundingUpdate {
	rsu.mutation.SetType(s)
	return rsu
}

// SetDesc sets the "desc" field.
func (rsu *Rent591HomeSurroundingUpdate) SetDesc(s string) *Rent591HomeSurroundingUpdate {
	rsu.mutation.SetDesc(s)
	return rsu
}

// SetDistance sets the "distance" field.
func (rsu *Rent591HomeSurroundingUpdate) SetDistance(s string) *Rent591HomeSurroundingUpdate {
	rsu.mutation.SetDistance(s)
	return rsu
}

// SetCreatedAt sets the "created_at" field.
func (rsu *Rent591HomeSurroundingUpdate) SetCreatedAt(t time.Time) *Rent591HomeSurroundingUpdate {
	rsu.mutation.SetCreatedAt(t)
	return rsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rsu *Rent591HomeSurroundingUpdate) SetNillableCreatedAt(t *time.Time) *Rent591HomeSurroundingUpdate {
	if t != nil {
		rsu.SetCreatedAt(*t)
	}
	return rsu
}

// SetRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID.
func (rsu *Rent591HomeSurroundingUpdate) SetRent591homesID(id int) *Rent591HomeSurroundingUpdate {
	rsu.mutation.SetRent591homesID(id)
	return rsu
}

// SetNillableRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID if the given value is not nil.
func (rsu *Rent591HomeSurroundingUpdate) SetNillableRent591homesID(id *int) *Rent591HomeSurroundingUpdate {
	if id != nil {
		rsu = rsu.SetRent591homesID(*id)
	}
	return rsu
}

// SetRent591homes sets the "rent591homes" edge to the Rent591Home entity.
func (rsu *Rent591HomeSurroundingUpdate) SetRent591homes(r *Rent591Home) *Rent591HomeSurroundingUpdate {
	return rsu.SetRent591homesID(r.ID)
}

// Mutation returns the Rent591HomeSurroundingMutation object of the builder.
func (rsu *Rent591HomeSurroundingUpdate) Mutation() *Rent591HomeSurroundingMutation {
	return rsu.mutation
}

// ClearRent591homes clears the "rent591homes" edge to the Rent591Home entity.
func (rsu *Rent591HomeSurroundingUpdate) ClearRent591homes() *Rent591HomeSurroundingUpdate {
	rsu.mutation.ClearRent591homes()
	return rsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsu *Rent591HomeSurroundingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rsu.sqlSave, rsu.mutation, rsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsu *Rent591HomeSurroundingUpdate) SaveX(ctx context.Context) int {
	affected, err := rsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsu *Rent591HomeSurroundingUpdate) Exec(ctx context.Context) error {
	_, err := rsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsu *Rent591HomeSurroundingUpdate) ExecX(ctx context.Context) {
	if err := rsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rsu *Rent591HomeSurroundingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homesurrounding.Table, rent591homesurrounding.Columns, sqlgraph.NewFieldSpec(rent591homesurrounding.FieldID, field.TypeInt))
	if ps := rsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsu.mutation.GetType(); ok {
		_spec.SetField(rent591homesurrounding.FieldType, field.TypeString, value)
	}
	if value, ok := rsu.mutation.Desc(); ok {
		_spec.SetField(rent591homesurrounding.FieldDesc, field.TypeString, value)
	}
	if value, ok := rsu.mutation.Distance(); ok {
		_spec.SetField(rent591homesurrounding.FieldDistance, field.TypeString, value)
	}
	if value, ok := rsu.mutation.CreatedAt(); ok {
		_spec.SetField(rent591homesurrounding.FieldCreatedAt, field.TypeTime, value)
	}
	if rsu.mutation.Rent591homesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homesurrounding.Rent591homesTable,
			Columns: []string{rent591homesurrounding.Rent591homesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsu.mutation.Rent591homesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homesurrounding.Rent591homesTable,
			Columns: []string{rent591homesurrounding.Rent591homesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homesurrounding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rsu.mutation.done = true
	return n, nil
}

// Rent591HomeSurroundingUpdateOne is the builder for updating a single Rent591HomeSurrounding entity.
type Rent591HomeSurroundingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Rent591HomeSurroundingMutation
}

// SetType sets the "type" field.
func (rsuo *Rent591HomeSurroundingUpdateOne) SetType(s string) *Rent591HomeSurroundingUpdateOne {
	rsuo.mutation.SetType(s)
	return rsuo
}

// SetDesc sets the "desc" field.
func (rsuo *Rent591HomeSurroundingUpdateOne) SetDesc(s string) *Rent591HomeSurroundingUpdateOne {
	rsuo.mutation.SetDesc(s)
	return rsuo
}

// SetDistance sets the "distance" field.
func (rsuo *Rent591HomeSurroundingUpdateOne) SetDistance(s string) *Rent591HomeSurroundingUpdateOne {
	rsuo.mutation.SetDistance(s)
	return rsuo
}

// SetCreatedAt sets the "created_at" field.
func (rsuo *Rent591HomeSurroundingUpdateOne) SetCreatedAt(t time.Time) *Rent591HomeSurroundingUpdateOne {
	rsuo.mutation.SetCreatedAt(t)
	return rsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rsuo *Rent591HomeSurroundingUpdateOne) SetNillableCreatedAt(t *time.Time) *Rent591HomeSurroundingUpdateOne {
	if t != nil {
		rsuo.SetCreatedAt(*t)
	}
	return rsuo
}

// SetRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID.
func (rsuo *Rent591HomeSurroundingUpdateOne) SetRent591homesID(id int) *Rent591HomeSurroundingUpdateOne {
	rsuo.mutation.SetRent591homesID(id)
	return rsuo
}

// SetNillableRent591homesID sets the "rent591homes" edge to the Rent591Home entity by ID if the given value is not nil.
func (rsuo *Rent591HomeSurroundingUpdateOne) SetNillableRent591homesID(id *int) *Rent591HomeSurroundingUpdateOne {
	if id != nil {
		rsuo = rsuo.SetRent591homesID(*id)
	}
	return rsuo
}

// SetRent591homes sets the "rent591homes" edge to the Rent591Home entity.
func (rsuo *Rent591HomeSurroundingUpdateOne) SetRent591homes(r *Rent591Home) *Rent591HomeSurroundingUpdateOne {
	return rsuo.SetRent591homesID(r.ID)
}

// Mutation returns the Rent591HomeSurroundingMutation object of the builder.
func (rsuo *Rent591HomeSurroundingUpdateOne) Mutation() *Rent591HomeSurroundingMutation {
	return rsuo.mutation
}

// ClearRent591homes clears the "rent591homes" edge to the Rent591Home entity.
func (rsuo *Rent591HomeSurroundingUpdateOne) ClearRent591homes() *Rent591HomeSurroundingUpdateOne {
	rsuo.mutation.ClearRent591homes()
	return rsuo
}

// Where appends a list predicates to the Rent591HomeSurroundingUpdate builder.
func (rsuo *Rent591HomeSurroundingUpdateOne) Where(ps ...predicate.Rent591HomeSurrounding) *Rent591HomeSurroundingUpdateOne {
	rsuo.mutation.Where(ps...)
	return rsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsuo *Rent591HomeSurroundingUpdateOne) Select(field string, fields ...string) *Rent591HomeSurroundingUpdateOne {
	rsuo.fields = append([]string{field}, fields...)
	return rsuo
}

// Save executes the query and returns the updated Rent591HomeSurrounding entity.
func (rsuo *Rent591HomeSurroundingUpdateOne) Save(ctx context.Context) (*Rent591HomeSurrounding, error) {
	return withHooks(ctx, rsuo.sqlSave, rsuo.mutation, rsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsuo *Rent591HomeSurroundingUpdateOne) SaveX(ctx context.Context) *Rent591HomeSurrounding {
	node, err := rsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuo *Rent591HomeSurroundingUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuo *Rent591HomeSurroundingUpdateOne) ExecX(ctx context.Context) {
	if err := rsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rsuo *Rent591HomeSurroundingUpdateOne) sqlSave(ctx context.Context) (_node *Rent591HomeSurrounding, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homesurrounding.Table, rent591homesurrounding.Columns, sqlgraph.NewFieldSpec(rent591homesurrounding.FieldID, field.TypeInt))
	id, ok := rsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rent591HomeSurrounding.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rent591homesurrounding.FieldID)
		for _, f := range fields {
			if !rent591homesurrounding.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rent591homesurrounding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsuo.mutation.GetType(); ok {
		_spec.SetField(rent591homesurrounding.FieldType, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.Desc(); ok {
		_spec.SetField(rent591homesurrounding.FieldDesc, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.Distance(); ok {
		_spec.SetField(rent591homesurrounding.FieldDistance, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.CreatedAt(); ok {
		_spec.SetField(rent591homesurrounding.FieldCreatedAt, field.TypeTime, value)
	}
	if rsuo.mutation.Rent591homesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homesurrounding.Rent591homesTable,
			Columns: []string{rent591homesurrounding.Rent591homesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rsuo.mutation.Rent591homesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   rent591homesurrounding.Rent591homesTable,
			Columns: []string{rent591homesurrounding.Rent591homesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rent591HomeSurrounding{config: rsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homesurrounding.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rsuo.mutation.done = true
	return _node, nil
}

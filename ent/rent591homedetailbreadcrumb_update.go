// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbreadcrumb"
)

// Rent591HomeDetailBreadcrumbUpdate is the builder for updating Rent591HomeDetailBreadcrumb entities.
type Rent591HomeDetailBreadcrumbUpdate struct {
	config
	hooks    []Hook
	mutation *Rent591HomeDetailBreadcrumbMutation
}

// Where appends a list predicates to the Rent591HomeDetailBreadcrumbUpdate builder.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) Where(ps ...predicate.Rent591HomeDetailBreadcrumb) *Rent591HomeDetailBreadcrumbUpdate {
	rdbu.mutation.Where(ps...)
	return rdbu
}

// SetName sets the "name" field.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) SetName(s string) *Rent591HomeDetailBreadcrumbUpdate {
	rdbu.mutation.SetName(s)
	return rdbu
}

// SetPostID sets the "post_id" field.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) SetPostID(i int) *Rent591HomeDetailBreadcrumbUpdate {
	rdbu.mutation.ResetPostID()
	rdbu.mutation.SetPostID(i)
	return rdbu
}

// AddPostID adds i to the "post_id" field.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) AddPostID(i int) *Rent591HomeDetailBreadcrumbUpdate {
	rdbu.mutation.AddPostID(i)
	return rdbu
}

// SetQuery sets the "query" field.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) SetQuery(s string) *Rent591HomeDetailBreadcrumbUpdate {
	rdbu.mutation.SetQuery(s)
	return rdbu
}

// SetLink sets the "link" field.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) SetLink(s string) *Rent591HomeDetailBreadcrumbUpdate {
	rdbu.mutation.SetLink(s)
	return rdbu
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) AddRent591homeDetailIDs(ids ...int) *Rent591HomeDetailBreadcrumbUpdate {
	rdbu.mutation.AddRent591homeDetailIDs(ids...)
	return rdbu
}

// AddRent591homeDetails adds the "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) AddRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailBreadcrumbUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdbu.AddRent591homeDetailIDs(ids...)
}

// Mutation returns the Rent591HomeDetailBreadcrumbMutation object of the builder.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) Mutation() *Rent591HomeDetailBreadcrumbMutation {
	return rdbu.mutation
}

// ClearRent591homeDetails clears all "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) ClearRent591homeDetails() *Rent591HomeDetailBreadcrumbUpdate {
	rdbu.mutation.ClearRent591homeDetails()
	return rdbu
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to Rent591HomeDetail entities by IDs.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) RemoveRent591homeDetailIDs(ids ...int) *Rent591HomeDetailBreadcrumbUpdate {
	rdbu.mutation.RemoveRent591homeDetailIDs(ids...)
	return rdbu
}

// RemoveRent591homeDetails removes "rent591home_details" edges to Rent591HomeDetail entities.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) RemoveRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailBreadcrumbUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdbu.RemoveRent591homeDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rdbu.sqlSave, rdbu.mutation, rdbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) SaveX(ctx context.Context) int {
	affected, err := rdbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) Exec(ctx context.Context) error {
	_, err := rdbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdbu *Rent591HomeDetailBreadcrumbUpdate) ExecX(ctx context.Context) {
	if err := rdbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdbu *Rent591HomeDetailBreadcrumbUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetailbreadcrumb.Table, rent591homedetailbreadcrumb.Columns, sqlgraph.NewFieldSpec(rent591homedetailbreadcrumb.FieldID, field.TypeInt))
	if ps := rdbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdbu.mutation.Name(); ok {
		_spec.SetField(rent591homedetailbreadcrumb.FieldName, field.TypeString, value)
	}
	if value, ok := rdbu.mutation.PostID(); ok {
		_spec.SetField(rent591homedetailbreadcrumb.FieldPostID, field.TypeInt, value)
	}
	if value, ok := rdbu.mutation.AddedPostID(); ok {
		_spec.AddField(rent591homedetailbreadcrumb.FieldPostID, field.TypeInt, value)
	}
	if value, ok := rdbu.mutation.Query(); ok {
		_spec.SetField(rent591homedetailbreadcrumb.FieldQuery, field.TypeString, value)
	}
	if value, ok := rdbu.mutation.Link(); ok {
		_spec.SetField(rent591homedetailbreadcrumb.FieldLink, field.TypeString, value)
	}
	if rdbu.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailbreadcrumb.Rent591homeDetailsTable,
			Columns: rent591homedetailbreadcrumb.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdbu.mutation.RemovedRent591homeDetailsIDs(); len(nodes) > 0 && !rdbu.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailbreadcrumb.Rent591homeDetailsTable,
			Columns: rent591homedetailbreadcrumb.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdbu.mutation.Rent591homeDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailbreadcrumb.Rent591homeDetailsTable,
			Columns: rent591homedetailbreadcrumb.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rdbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetailbreadcrumb.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdbu.mutation.done = true
	return n, nil
}

// Rent591HomeDetailBreadcrumbUpdateOne is the builder for updating a single Rent591HomeDetailBreadcrumb entity.
type Rent591HomeDetailBreadcrumbUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Rent591HomeDetailBreadcrumbMutation
}

// SetName sets the "name" field.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) SetName(s string) *Rent591HomeDetailBreadcrumbUpdateOne {
	rdbuo.mutation.SetName(s)
	return rdbuo
}

// SetPostID sets the "post_id" field.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) SetPostID(i int) *Rent591HomeDetailBreadcrumbUpdateOne {
	rdbuo.mutation.ResetPostID()
	rdbuo.mutation.SetPostID(i)
	return rdbuo
}

// AddPostID adds i to the "post_id" field.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) AddPostID(i int) *Rent591HomeDetailBreadcrumbUpdateOne {
	rdbuo.mutation.AddPostID(i)
	return rdbuo
}

// SetQuery sets the "query" field.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) SetQuery(s string) *Rent591HomeDetailBreadcrumbUpdateOne {
	rdbuo.mutation.SetQuery(s)
	return rdbuo
}

// SetLink sets the "link" field.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) SetLink(s string) *Rent591HomeDetailBreadcrumbUpdateOne {
	rdbuo.mutation.SetLink(s)
	return rdbuo
}

// AddRent591homeDetailIDs adds the "rent591home_details" edge to the Rent591HomeDetail entity by IDs.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) AddRent591homeDetailIDs(ids ...int) *Rent591HomeDetailBreadcrumbUpdateOne {
	rdbuo.mutation.AddRent591homeDetailIDs(ids...)
	return rdbuo
}

// AddRent591homeDetails adds the "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) AddRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailBreadcrumbUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdbuo.AddRent591homeDetailIDs(ids...)
}

// Mutation returns the Rent591HomeDetailBreadcrumbMutation object of the builder.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) Mutation() *Rent591HomeDetailBreadcrumbMutation {
	return rdbuo.mutation
}

// ClearRent591homeDetails clears all "rent591home_details" edges to the Rent591HomeDetail entity.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) ClearRent591homeDetails() *Rent591HomeDetailBreadcrumbUpdateOne {
	rdbuo.mutation.ClearRent591homeDetails()
	return rdbuo
}

// RemoveRent591homeDetailIDs removes the "rent591home_details" edge to Rent591HomeDetail entities by IDs.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) RemoveRent591homeDetailIDs(ids ...int) *Rent591HomeDetailBreadcrumbUpdateOne {
	rdbuo.mutation.RemoveRent591homeDetailIDs(ids...)
	return rdbuo
}

// RemoveRent591homeDetails removes "rent591home_details" edges to Rent591HomeDetail entities.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) RemoveRent591homeDetails(r ...*Rent591HomeDetail) *Rent591HomeDetailBreadcrumbUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rdbuo.RemoveRent591homeDetailIDs(ids...)
}

// Where appends a list predicates to the Rent591HomeDetailBreadcrumbUpdate builder.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) Where(ps ...predicate.Rent591HomeDetailBreadcrumb) *Rent591HomeDetailBreadcrumbUpdateOne {
	rdbuo.mutation.Where(ps...)
	return rdbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) Select(field string, fields ...string) *Rent591HomeDetailBreadcrumbUpdateOne {
	rdbuo.fields = append([]string{field}, fields...)
	return rdbuo
}

// Save executes the query and returns the updated Rent591HomeDetailBreadcrumb entity.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) Save(ctx context.Context) (*Rent591HomeDetailBreadcrumb, error) {
	return withHooks(ctx, rdbuo.sqlSave, rdbuo.mutation, rdbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) SaveX(ctx context.Context) *Rent591HomeDetailBreadcrumb {
	node, err := rdbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) Exec(ctx context.Context) error {
	_, err := rdbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) ExecX(ctx context.Context) {
	if err := rdbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rdbuo *Rent591HomeDetailBreadcrumbUpdateOne) sqlSave(ctx context.Context) (_node *Rent591HomeDetailBreadcrumb, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591homedetailbreadcrumb.Table, rent591homedetailbreadcrumb.Columns, sqlgraph.NewFieldSpec(rent591homedetailbreadcrumb.FieldID, field.TypeInt))
	id, ok := rdbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rent591HomeDetailBreadcrumb.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rdbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rent591homedetailbreadcrumb.FieldID)
		for _, f := range fields {
			if !rent591homedetailbreadcrumb.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rent591homedetailbreadcrumb.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rdbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdbuo.mutation.Name(); ok {
		_spec.SetField(rent591homedetailbreadcrumb.FieldName, field.TypeString, value)
	}
	if value, ok := rdbuo.mutation.PostID(); ok {
		_spec.SetField(rent591homedetailbreadcrumb.FieldPostID, field.TypeInt, value)
	}
	if value, ok := rdbuo.mutation.AddedPostID(); ok {
		_spec.AddField(rent591homedetailbreadcrumb.FieldPostID, field.TypeInt, value)
	}
	if value, ok := rdbuo.mutation.Query(); ok {
		_spec.SetField(rent591homedetailbreadcrumb.FieldQuery, field.TypeString, value)
	}
	if value, ok := rdbuo.mutation.Link(); ok {
		_spec.SetField(rent591homedetailbreadcrumb.FieldLink, field.TypeString, value)
	}
	if rdbuo.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailbreadcrumb.Rent591homeDetailsTable,
			Columns: rent591homedetailbreadcrumb.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdbuo.mutation.RemovedRent591homeDetailsIDs(); len(nodes) > 0 && !rdbuo.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailbreadcrumb.Rent591homeDetailsTable,
			Columns: rent591homedetailbreadcrumb.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdbuo.mutation.Rent591homeDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rent591homedetailbreadcrumb.Rent591homeDetailsTable,
			Columns: rent591homedetailbreadcrumb.Rent591homeDetailsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rent591HomeDetailBreadcrumb{config: rdbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rdbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591homedetailbreadcrumb.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rdbuo.mutation.done = true
	return _node, nil
}

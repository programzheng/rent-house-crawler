// Code generated by ent, DO NOT EDIT.

package rent591hometag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rent591hometag type in the database.
	Label = "rent591home_tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeRent591homes holds the string denoting the rent591homes edge name in mutations.
	EdgeRent591homes = "rent591homes"
	// Table holds the table name of the rent591hometag in the database.
	Table = "rent591home_tags"
	// Rent591homesTable is the table that holds the rent591homes relation/edge. The primary key declared below.
	Rent591homesTable = "rent591home_tag_rent591homes"
	// Rent591homesInverseTable is the table name for the Rent591Home entity.
	// It exists in this package in order to avoid circular dependency with the "rent591home" package.
	Rent591homesInverseTable = "rent591homes"
)

// Columns holds all SQL columns for rent591hometag fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
}

var (
	// Rent591homesPrimaryKey and Rent591homesColumn2 are the table columns denoting the
	// primary key for the rent591homes relation (M2M).
	Rent591homesPrimaryKey = []string{"rent591home_tag_id", "rent591home_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Rent591HomeTag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByRent591homesCount orders the results by rent591homes count.
func ByRent591homesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRent591homesStep(), opts...)
	}
}

// ByRent591homes orders the results by rent591homes terms.
func ByRent591homes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRent591homesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRent591homesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Rent591homesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, Rent591homesTable, Rent591homesPrimaryKey...),
	)
}

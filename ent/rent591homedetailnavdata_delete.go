// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailnavdata"
)

// Rent591HomeDetailNavDataDelete is the builder for deleting a Rent591HomeDetailNavData entity.
type Rent591HomeDetailNavDataDelete struct {
	config
	hooks    []Hook
	mutation *Rent591HomeDetailNavDataMutation
}

// Where appends a list predicates to the Rent591HomeDetailNavDataDelete builder.
func (rdndd *Rent591HomeDetailNavDataDelete) Where(ps ...predicate.Rent591HomeDetailNavData) *Rent591HomeDetailNavDataDelete {
	rdndd.mutation.Where(ps...)
	return rdndd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rdndd *Rent591HomeDetailNavDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rdndd.sqlExec, rdndd.mutation, rdndd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rdndd *Rent591HomeDetailNavDataDelete) ExecX(ctx context.Context) int {
	n, err := rdndd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rdndd *Rent591HomeDetailNavDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(rent591homedetailnavdata.Table, sqlgraph.NewFieldSpec(rent591homedetailnavdata.FieldID, field.TypeInt))
	if ps := rdndd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rdndd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rdndd.mutation.done = true
	return affected, err
}

// Rent591HomeDetailNavDataDeleteOne is the builder for deleting a single Rent591HomeDetailNavData entity.
type Rent591HomeDetailNavDataDeleteOne struct {
	rdndd *Rent591HomeDetailNavDataDelete
}

// Where appends a list predicates to the Rent591HomeDetailNavDataDelete builder.
func (rdnddo *Rent591HomeDetailNavDataDeleteOne) Where(ps ...predicate.Rent591HomeDetailNavData) *Rent591HomeDetailNavDataDeleteOne {
	rdnddo.rdndd.mutation.Where(ps...)
	return rdnddo
}

// Exec executes the deletion query.
func (rdnddo *Rent591HomeDetailNavDataDeleteOne) Exec(ctx context.Context) error {
	n, err := rdnddo.rdndd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rent591homedetailnavdata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rdnddo *Rent591HomeDetailNavDataDeleteOne) ExecX(ctx context.Context) {
	if err := rdnddo.Exec(ctx); err != nil {
		panic(err)
	}
}

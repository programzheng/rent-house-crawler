// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591home"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homesurrounding"
	"github.com/programzheng/rent-house-crawler/ent/rent591hometag"
)

// Rent591HomeUpdate is the builder for updating Rent591Home entities.
type Rent591HomeUpdate struct {
	config
	hooks    []Hook
	mutation *Rent591HomeMutation
}

// Where appends a list predicates to the Rent591HomeUpdate builder.
func (ru *Rent591HomeUpdate) Where(ps ...predicate.Rent591Home) *Rent591HomeUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetTitle sets the "title" field.
func (ru *Rent591HomeUpdate) SetTitle(s string) *Rent591HomeUpdate {
	ru.mutation.SetTitle(s)
	return ru
}

// SetType sets the "type" field.
func (ru *Rent591HomeUpdate) SetType(i int) *Rent591HomeUpdate {
	ru.mutation.ResetType()
	ru.mutation.SetType(i)
	return ru
}

// AddType adds i to the "type" field.
func (ru *Rent591HomeUpdate) AddType(i int) *Rent591HomeUpdate {
	ru.mutation.AddType(i)
	return ru
}

// SetPostID sets the "post_id" field.
func (ru *Rent591HomeUpdate) SetPostID(i int) *Rent591HomeUpdate {
	ru.mutation.ResetPostID()
	ru.mutation.SetPostID(i)
	return ru
}

// AddPostID adds i to the "post_id" field.
func (ru *Rent591HomeUpdate) AddPostID(i int) *Rent591HomeUpdate {
	ru.mutation.AddPostID(i)
	return ru
}

// SetKindName sets the "kind_name" field.
func (ru *Rent591HomeUpdate) SetKindName(s string) *Rent591HomeUpdate {
	ru.mutation.SetKindName(s)
	return ru
}

// SetRoomStr sets the "room_str" field.
func (ru *Rent591HomeUpdate) SetRoomStr(s string) *Rent591HomeUpdate {
	ru.mutation.SetRoomStr(s)
	return ru
}

// SetFloorStr sets the "floor_str" field.
func (ru *Rent591HomeUpdate) SetFloorStr(s string) *Rent591HomeUpdate {
	ru.mutation.SetFloorStr(s)
	return ru
}

// SetCommunity sets the "community" field.
func (ru *Rent591HomeUpdate) SetCommunity(s string) *Rent591HomeUpdate {
	ru.mutation.SetCommunity(s)
	return ru
}

// SetPrice sets the "price" field.
func (ru *Rent591HomeUpdate) SetPrice(i int) *Rent591HomeUpdate {
	ru.mutation.ResetPrice()
	ru.mutation.SetPrice(i)
	return ru
}

// AddPrice adds i to the "price" field.
func (ru *Rent591HomeUpdate) AddPrice(i int) *Rent591HomeUpdate {
	ru.mutation.AddPrice(i)
	return ru
}

// SetPriceUnit sets the "price_unit" field.
func (ru *Rent591HomeUpdate) SetPriceUnit(s string) *Rent591HomeUpdate {
	ru.mutation.SetPriceUnit(s)
	return ru
}

// SetPhotoList sets the "photo_list" field.
func (ru *Rent591HomeUpdate) SetPhotoList(s []string) *Rent591HomeUpdate {
	ru.mutation.SetPhotoList(s)
	return ru
}

// AppendPhotoList appends s to the "photo_list" field.
func (ru *Rent591HomeUpdate) AppendPhotoList(s []string) *Rent591HomeUpdate {
	ru.mutation.AppendPhotoList(s)
	return ru
}

// ClearPhotoList clears the value of the "photo_list" field.
func (ru *Rent591HomeUpdate) ClearPhotoList() *Rent591HomeUpdate {
	ru.mutation.ClearPhotoList()
	return ru
}

// SetRegionName sets the "region_name" field.
func (ru *Rent591HomeUpdate) SetRegionName(s string) *Rent591HomeUpdate {
	ru.mutation.SetRegionName(s)
	return ru
}

// SetNillableRegionName sets the "region_name" field if the given value is not nil.
func (ru *Rent591HomeUpdate) SetNillableRegionName(s *string) *Rent591HomeUpdate {
	if s != nil {
		ru.SetRegionName(*s)
	}
	return ru
}

// ClearRegionName clears the value of the "region_name" field.
func (ru *Rent591HomeUpdate) ClearRegionName() *Rent591HomeUpdate {
	ru.mutation.ClearRegionName()
	return ru
}

// SetSectionName sets the "section_name" field.
func (ru *Rent591HomeUpdate) SetSectionName(s string) *Rent591HomeUpdate {
	ru.mutation.SetSectionName(s)
	return ru
}

// SetStreetName sets the "street_name" field.
func (ru *Rent591HomeUpdate) SetStreetName(s string) *Rent591HomeUpdate {
	ru.mutation.SetStreetName(s)
	return ru
}

// SetLocation sets the "location" field.
func (ru *Rent591HomeUpdate) SetLocation(s string) *Rent591HomeUpdate {
	ru.mutation.SetLocation(s)
	return ru
}

// SetArea sets the "area" field.
func (ru *Rent591HomeUpdate) SetArea(s string) *Rent591HomeUpdate {
	ru.mutation.SetArea(s)
	return ru
}

// SetRoleName sets the "role_name" field.
func (ru *Rent591HomeUpdate) SetRoleName(s string) *Rent591HomeUpdate {
	ru.mutation.SetRoleName(s)
	return ru
}

// SetContact sets the "contact" field.
func (ru *Rent591HomeUpdate) SetContact(s string) *Rent591HomeUpdate {
	ru.mutation.SetContact(s)
	return ru
}

// SetRefreshTime sets the "refresh_time" field.
func (ru *Rent591HomeUpdate) SetRefreshTime(s string) *Rent591HomeUpdate {
	ru.mutation.SetRefreshTime(s)
	return ru
}

// SetYesterdayHit sets the "yesterday_hit" field.
func (ru *Rent591HomeUpdate) SetYesterdayHit(i int) *Rent591HomeUpdate {
	ru.mutation.ResetYesterdayHit()
	ru.mutation.SetYesterdayHit(i)
	return ru
}

// AddYesterdayHit adds i to the "yesterday_hit" field.
func (ru *Rent591HomeUpdate) AddYesterdayHit(i int) *Rent591HomeUpdate {
	ru.mutation.AddYesterdayHit(i)
	return ru
}

// SetIsVip sets the "is_vip" field.
func (ru *Rent591HomeUpdate) SetIsVip(i int) *Rent591HomeUpdate {
	ru.mutation.ResetIsVip()
	ru.mutation.SetIsVip(i)
	return ru
}

// AddIsVip adds i to the "is_vip" field.
func (ru *Rent591HomeUpdate) AddIsVip(i int) *Rent591HomeUpdate {
	ru.mutation.AddIsVip(i)
	return ru
}

// SetIsCombine sets the "is_combine" field.
func (ru *Rent591HomeUpdate) SetIsCombine(i int) *Rent591HomeUpdate {
	ru.mutation.ResetIsCombine()
	ru.mutation.SetIsCombine(i)
	return ru
}

// AddIsCombine adds i to the "is_combine" field.
func (ru *Rent591HomeUpdate) AddIsCombine(i int) *Rent591HomeUpdate {
	ru.mutation.AddIsCombine(i)
	return ru
}

// SetHurry sets the "hurry" field.
func (ru *Rent591HomeUpdate) SetHurry(i int) *Rent591HomeUpdate {
	ru.mutation.ResetHurry()
	ru.mutation.SetHurry(i)
	return ru
}

// AddHurry adds i to the "hurry" field.
func (ru *Rent591HomeUpdate) AddHurry(i int) *Rent591HomeUpdate {
	ru.mutation.AddHurry(i)
	return ru
}

// SetIsSocial sets the "is_social" field.
func (ru *Rent591HomeUpdate) SetIsSocial(i int) *Rent591HomeUpdate {
	ru.mutation.ResetIsSocial()
	ru.mutation.SetIsSocial(i)
	return ru
}

// AddIsSocial adds i to the "is_social" field.
func (ru *Rent591HomeUpdate) AddIsSocial(i int) *Rent591HomeUpdate {
	ru.mutation.AddIsSocial(i)
	return ru
}

// SetDiscountPriceStr sets the "discount_price_str" field.
func (ru *Rent591HomeUpdate) SetDiscountPriceStr(s string) *Rent591HomeUpdate {
	ru.mutation.SetDiscountPriceStr(s)
	return ru
}

// SetCasesID sets the "cases_id" field.
func (ru *Rent591HomeUpdate) SetCasesID(i int) *Rent591HomeUpdate {
	ru.mutation.ResetCasesID()
	ru.mutation.SetCasesID(i)
	return ru
}

// AddCasesID adds i to the "cases_id" field.
func (ru *Rent591HomeUpdate) AddCasesID(i int) *Rent591HomeUpdate {
	ru.mutation.AddCasesID(i)
	return ru
}

// SetIsVideo sets the "is_video" field.
func (ru *Rent591HomeUpdate) SetIsVideo(i int) *Rent591HomeUpdate {
	ru.mutation.ResetIsVideo()
	ru.mutation.SetIsVideo(i)
	return ru
}

// AddIsVideo adds i to the "is_video" field.
func (ru *Rent591HomeUpdate) AddIsVideo(i int) *Rent591HomeUpdate {
	ru.mutation.AddIsVideo(i)
	return ru
}

// SetPreferred sets the "preferred" field.
func (ru *Rent591HomeUpdate) SetPreferred(i int) *Rent591HomeUpdate {
	ru.mutation.ResetPreferred()
	ru.mutation.SetPreferred(i)
	return ru
}

// AddPreferred adds i to the "preferred" field.
func (ru *Rent591HomeUpdate) AddPreferred(i int) *Rent591HomeUpdate {
	ru.mutation.AddPreferred(i)
	return ru
}

// SetCid sets the "cid" field.
func (ru *Rent591HomeUpdate) SetCid(i int) *Rent591HomeUpdate {
	ru.mutation.ResetCid()
	ru.mutation.SetCid(i)
	return ru
}

// AddCid adds i to the "cid" field.
func (ru *Rent591HomeUpdate) AddCid(i int) *Rent591HomeUpdate {
	ru.mutation.AddCid(i)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *Rent591HomeUpdate) SetCreatedAt(t time.Time) *Rent591HomeUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *Rent591HomeUpdate) SetNillableCreatedAt(t *time.Time) *Rent591HomeUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *Rent591HomeUpdate) SetUpdatedAt(t time.Time) *Rent591HomeUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// AddRent591homeTagIDs adds the "rent591home_tags" edge to the Rent591HomeTag entity by IDs.
func (ru *Rent591HomeUpdate) AddRent591homeTagIDs(ids ...int) *Rent591HomeUpdate {
	ru.mutation.AddRent591homeTagIDs(ids...)
	return ru
}

// AddRent591homeTags adds the "rent591home_tags" edges to the Rent591HomeTag entity.
func (ru *Rent591HomeUpdate) AddRent591homeTags(r ...*Rent591HomeTag) *Rent591HomeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRent591homeTagIDs(ids...)
}

// SetRent591homeSurroundingsID sets the "rent591home_surroundings" edge to the Rent591HomeSurrounding entity by ID.
func (ru *Rent591HomeUpdate) SetRent591homeSurroundingsID(id int) *Rent591HomeUpdate {
	ru.mutation.SetRent591homeSurroundingsID(id)
	return ru
}

// SetNillableRent591homeSurroundingsID sets the "rent591home_surroundings" edge to the Rent591HomeSurrounding entity by ID if the given value is not nil.
func (ru *Rent591HomeUpdate) SetNillableRent591homeSurroundingsID(id *int) *Rent591HomeUpdate {
	if id != nil {
		ru = ru.SetRent591homeSurroundingsID(*id)
	}
	return ru
}

// SetRent591homeSurroundings sets the "rent591home_surroundings" edge to the Rent591HomeSurrounding entity.
func (ru *Rent591HomeUpdate) SetRent591homeSurroundings(r *Rent591HomeSurrounding) *Rent591HomeUpdate {
	return ru.SetRent591homeSurroundingsID(r.ID)
}

// SetRent591homeDetailsID sets the "rent591home_details" edge to the Rent591HomeDetail entity by ID.
func (ru *Rent591HomeUpdate) SetRent591homeDetailsID(id int) *Rent591HomeUpdate {
	ru.mutation.SetRent591homeDetailsID(id)
	return ru
}

// SetNillableRent591homeDetailsID sets the "rent591home_details" edge to the Rent591HomeDetail entity by ID if the given value is not nil.
func (ru *Rent591HomeUpdate) SetNillableRent591homeDetailsID(id *int) *Rent591HomeUpdate {
	if id != nil {
		ru = ru.SetRent591homeDetailsID(*id)
	}
	return ru
}

// SetRent591homeDetails sets the "rent591home_details" edge to the Rent591HomeDetail entity.
func (ru *Rent591HomeUpdate) SetRent591homeDetails(r *Rent591HomeDetail) *Rent591HomeUpdate {
	return ru.SetRent591homeDetailsID(r.ID)
}

// Mutation returns the Rent591HomeMutation object of the builder.
func (ru *Rent591HomeUpdate) Mutation() *Rent591HomeMutation {
	return ru.mutation
}

// ClearRent591homeTags clears all "rent591home_tags" edges to the Rent591HomeTag entity.
func (ru *Rent591HomeUpdate) ClearRent591homeTags() *Rent591HomeUpdate {
	ru.mutation.ClearRent591homeTags()
	return ru
}

// RemoveRent591homeTagIDs removes the "rent591home_tags" edge to Rent591HomeTag entities by IDs.
func (ru *Rent591HomeUpdate) RemoveRent591homeTagIDs(ids ...int) *Rent591HomeUpdate {
	ru.mutation.RemoveRent591homeTagIDs(ids...)
	return ru
}

// RemoveRent591homeTags removes "rent591home_tags" edges to Rent591HomeTag entities.
func (ru *Rent591HomeUpdate) RemoveRent591homeTags(r ...*Rent591HomeTag) *Rent591HomeUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRent591homeTagIDs(ids...)
}

// ClearRent591homeSurroundings clears the "rent591home_surroundings" edge to the Rent591HomeSurrounding entity.
func (ru *Rent591HomeUpdate) ClearRent591homeSurroundings() *Rent591HomeUpdate {
	ru.mutation.ClearRent591homeSurroundings()
	return ru
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (ru *Rent591HomeUpdate) ClearRent591homeDetails() *Rent591HomeUpdate {
	ru.mutation.ClearRent591homeDetails()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *Rent591HomeUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *Rent591HomeUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *Rent591HomeUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *Rent591HomeUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *Rent591HomeUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := rent591home.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

func (ru *Rent591HomeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591home.Table, rent591home.Columns, sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Title(); ok {
		_spec.SetField(rent591home.FieldTitle, field.TypeString, value)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(rent591home.FieldType, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedType(); ok {
		_spec.AddField(rent591home.FieldType, field.TypeInt, value)
	}
	if value, ok := ru.mutation.PostID(); ok {
		_spec.SetField(rent591home.FieldPostID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedPostID(); ok {
		_spec.AddField(rent591home.FieldPostID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.KindName(); ok {
		_spec.SetField(rent591home.FieldKindName, field.TypeString, value)
	}
	if value, ok := ru.mutation.RoomStr(); ok {
		_spec.SetField(rent591home.FieldRoomStr, field.TypeString, value)
	}
	if value, ok := ru.mutation.FloorStr(); ok {
		_spec.SetField(rent591home.FieldFloorStr, field.TypeString, value)
	}
	if value, ok := ru.mutation.Community(); ok {
		_spec.SetField(rent591home.FieldCommunity, field.TypeString, value)
	}
	if value, ok := ru.mutation.Price(); ok {
		_spec.SetField(rent591home.FieldPrice, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedPrice(); ok {
		_spec.AddField(rent591home.FieldPrice, field.TypeInt, value)
	}
	if value, ok := ru.mutation.PriceUnit(); ok {
		_spec.SetField(rent591home.FieldPriceUnit, field.TypeString, value)
	}
	if value, ok := ru.mutation.PhotoList(); ok {
		_spec.SetField(rent591home.FieldPhotoList, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedPhotoList(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, rent591home.FieldPhotoList, value)
		})
	}
	if ru.mutation.PhotoListCleared() {
		_spec.ClearField(rent591home.FieldPhotoList, field.TypeJSON)
	}
	if value, ok := ru.mutation.RegionName(); ok {
		_spec.SetField(rent591home.FieldRegionName, field.TypeString, value)
	}
	if ru.mutation.RegionNameCleared() {
		_spec.ClearField(rent591home.FieldRegionName, field.TypeString)
	}
	if value, ok := ru.mutation.SectionName(); ok {
		_spec.SetField(rent591home.FieldSectionName, field.TypeString, value)
	}
	if value, ok := ru.mutation.StreetName(); ok {
		_spec.SetField(rent591home.FieldStreetName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Location(); ok {
		_spec.SetField(rent591home.FieldLocation, field.TypeString, value)
	}
	if value, ok := ru.mutation.Area(); ok {
		_spec.SetField(rent591home.FieldArea, field.TypeString, value)
	}
	if value, ok := ru.mutation.RoleName(); ok {
		_spec.SetField(rent591home.FieldRoleName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Contact(); ok {
		_spec.SetField(rent591home.FieldContact, field.TypeString, value)
	}
	if value, ok := ru.mutation.RefreshTime(); ok {
		_spec.SetField(rent591home.FieldRefreshTime, field.TypeString, value)
	}
	if value, ok := ru.mutation.YesterdayHit(); ok {
		_spec.SetField(rent591home.FieldYesterdayHit, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedYesterdayHit(); ok {
		_spec.AddField(rent591home.FieldYesterdayHit, field.TypeInt, value)
	}
	if value, ok := ru.mutation.IsVip(); ok {
		_spec.SetField(rent591home.FieldIsVip, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedIsVip(); ok {
		_spec.AddField(rent591home.FieldIsVip, field.TypeInt, value)
	}
	if value, ok := ru.mutation.IsCombine(); ok {
		_spec.SetField(rent591home.FieldIsCombine, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedIsCombine(); ok {
		_spec.AddField(rent591home.FieldIsCombine, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Hurry(); ok {
		_spec.SetField(rent591home.FieldHurry, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedHurry(); ok {
		_spec.AddField(rent591home.FieldHurry, field.TypeInt, value)
	}
	if value, ok := ru.mutation.IsSocial(); ok {
		_spec.SetField(rent591home.FieldIsSocial, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedIsSocial(); ok {
		_spec.AddField(rent591home.FieldIsSocial, field.TypeInt, value)
	}
	if value, ok := ru.mutation.DiscountPriceStr(); ok {
		_spec.SetField(rent591home.FieldDiscountPriceStr, field.TypeString, value)
	}
	if value, ok := ru.mutation.CasesID(); ok {
		_spec.SetField(rent591home.FieldCasesID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedCasesID(); ok {
		_spec.AddField(rent591home.FieldCasesID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.IsVideo(); ok {
		_spec.SetField(rent591home.FieldIsVideo, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedIsVideo(); ok {
		_spec.AddField(rent591home.FieldIsVideo, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Preferred(); ok {
		_spec.SetField(rent591home.FieldPreferred, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedPreferred(); ok {
		_spec.AddField(rent591home.FieldPreferred, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Cid(); ok {
		_spec.SetField(rent591home.FieldCid, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedCid(); ok {
		_spec.AddField(rent591home.FieldCid, field.TypeInt, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(rent591home.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(rent591home.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.Rent591homeTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591home.Rent591homeTagsTable,
			Columns: rent591home.Rent591homeTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591hometag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRent591homeTagsIDs(); len(nodes) > 0 && !ru.mutation.Rent591homeTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591home.Rent591homeTagsTable,
			Columns: rent591home.Rent591homeTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591hometag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.Rent591homeTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591home.Rent591homeTagsTable,
			Columns: rent591home.Rent591homeTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591hometag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.Rent591homeSurroundingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591home.Rent591homeSurroundingsTable,
			Columns: []string{rent591home.Rent591homeSurroundingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homesurrounding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.Rent591homeSurroundingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591home.Rent591homeSurroundingsTable,
			Columns: []string{rent591home.Rent591homeSurroundingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homesurrounding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591home.Rent591homeDetailsTable,
			Columns: []string{rent591home.Rent591homeDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.Rent591homeDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591home.Rent591homeDetailsTable,
			Columns: []string{rent591home.Rent591homeDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591home.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// Rent591HomeUpdateOne is the builder for updating a single Rent591Home entity.
type Rent591HomeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Rent591HomeMutation
}

// SetTitle sets the "title" field.
func (ruo *Rent591HomeUpdateOne) SetTitle(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetTitle(s)
	return ruo
}

// SetType sets the "type" field.
func (ruo *Rent591HomeUpdateOne) SetType(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetType()
	ruo.mutation.SetType(i)
	return ruo
}

// AddType adds i to the "type" field.
func (ruo *Rent591HomeUpdateOne) AddType(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddType(i)
	return ruo
}

// SetPostID sets the "post_id" field.
func (ruo *Rent591HomeUpdateOne) SetPostID(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetPostID()
	ruo.mutation.SetPostID(i)
	return ruo
}

// AddPostID adds i to the "post_id" field.
func (ruo *Rent591HomeUpdateOne) AddPostID(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddPostID(i)
	return ruo
}

// SetKindName sets the "kind_name" field.
func (ruo *Rent591HomeUpdateOne) SetKindName(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetKindName(s)
	return ruo
}

// SetRoomStr sets the "room_str" field.
func (ruo *Rent591HomeUpdateOne) SetRoomStr(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetRoomStr(s)
	return ruo
}

// SetFloorStr sets the "floor_str" field.
func (ruo *Rent591HomeUpdateOne) SetFloorStr(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetFloorStr(s)
	return ruo
}

// SetCommunity sets the "community" field.
func (ruo *Rent591HomeUpdateOne) SetCommunity(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetCommunity(s)
	return ruo
}

// SetPrice sets the "price" field.
func (ruo *Rent591HomeUpdateOne) SetPrice(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetPrice()
	ruo.mutation.SetPrice(i)
	return ruo
}

// AddPrice adds i to the "price" field.
func (ruo *Rent591HomeUpdateOne) AddPrice(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddPrice(i)
	return ruo
}

// SetPriceUnit sets the "price_unit" field.
func (ruo *Rent591HomeUpdateOne) SetPriceUnit(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetPriceUnit(s)
	return ruo
}

// SetPhotoList sets the "photo_list" field.
func (ruo *Rent591HomeUpdateOne) SetPhotoList(s []string) *Rent591HomeUpdateOne {
	ruo.mutation.SetPhotoList(s)
	return ruo
}

// AppendPhotoList appends s to the "photo_list" field.
func (ruo *Rent591HomeUpdateOne) AppendPhotoList(s []string) *Rent591HomeUpdateOne {
	ruo.mutation.AppendPhotoList(s)
	return ruo
}

// ClearPhotoList clears the value of the "photo_list" field.
func (ruo *Rent591HomeUpdateOne) ClearPhotoList() *Rent591HomeUpdateOne {
	ruo.mutation.ClearPhotoList()
	return ruo
}

// SetRegionName sets the "region_name" field.
func (ruo *Rent591HomeUpdateOne) SetRegionName(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetRegionName(s)
	return ruo
}

// SetNillableRegionName sets the "region_name" field if the given value is not nil.
func (ruo *Rent591HomeUpdateOne) SetNillableRegionName(s *string) *Rent591HomeUpdateOne {
	if s != nil {
		ruo.SetRegionName(*s)
	}
	return ruo
}

// ClearRegionName clears the value of the "region_name" field.
func (ruo *Rent591HomeUpdateOne) ClearRegionName() *Rent591HomeUpdateOne {
	ruo.mutation.ClearRegionName()
	return ruo
}

// SetSectionName sets the "section_name" field.
func (ruo *Rent591HomeUpdateOne) SetSectionName(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetSectionName(s)
	return ruo
}

// SetStreetName sets the "street_name" field.
func (ruo *Rent591HomeUpdateOne) SetStreetName(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetStreetName(s)
	return ruo
}

// SetLocation sets the "location" field.
func (ruo *Rent591HomeUpdateOne) SetLocation(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetLocation(s)
	return ruo
}

// SetArea sets the "area" field.
func (ruo *Rent591HomeUpdateOne) SetArea(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetArea(s)
	return ruo
}

// SetRoleName sets the "role_name" field.
func (ruo *Rent591HomeUpdateOne) SetRoleName(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetRoleName(s)
	return ruo
}

// SetContact sets the "contact" field.
func (ruo *Rent591HomeUpdateOne) SetContact(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetContact(s)
	return ruo
}

// SetRefreshTime sets the "refresh_time" field.
func (ruo *Rent591HomeUpdateOne) SetRefreshTime(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetRefreshTime(s)
	return ruo
}

// SetYesterdayHit sets the "yesterday_hit" field.
func (ruo *Rent591HomeUpdateOne) SetYesterdayHit(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetYesterdayHit()
	ruo.mutation.SetYesterdayHit(i)
	return ruo
}

// AddYesterdayHit adds i to the "yesterday_hit" field.
func (ruo *Rent591HomeUpdateOne) AddYesterdayHit(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddYesterdayHit(i)
	return ruo
}

// SetIsVip sets the "is_vip" field.
func (ruo *Rent591HomeUpdateOne) SetIsVip(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetIsVip()
	ruo.mutation.SetIsVip(i)
	return ruo
}

// AddIsVip adds i to the "is_vip" field.
func (ruo *Rent591HomeUpdateOne) AddIsVip(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddIsVip(i)
	return ruo
}

// SetIsCombine sets the "is_combine" field.
func (ruo *Rent591HomeUpdateOne) SetIsCombine(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetIsCombine()
	ruo.mutation.SetIsCombine(i)
	return ruo
}

// AddIsCombine adds i to the "is_combine" field.
func (ruo *Rent591HomeUpdateOne) AddIsCombine(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddIsCombine(i)
	return ruo
}

// SetHurry sets the "hurry" field.
func (ruo *Rent591HomeUpdateOne) SetHurry(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetHurry()
	ruo.mutation.SetHurry(i)
	return ruo
}

// AddHurry adds i to the "hurry" field.
func (ruo *Rent591HomeUpdateOne) AddHurry(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddHurry(i)
	return ruo
}

// SetIsSocial sets the "is_social" field.
func (ruo *Rent591HomeUpdateOne) SetIsSocial(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetIsSocial()
	ruo.mutation.SetIsSocial(i)
	return ruo
}

// AddIsSocial adds i to the "is_social" field.
func (ruo *Rent591HomeUpdateOne) AddIsSocial(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddIsSocial(i)
	return ruo
}

// SetDiscountPriceStr sets the "discount_price_str" field.
func (ruo *Rent591HomeUpdateOne) SetDiscountPriceStr(s string) *Rent591HomeUpdateOne {
	ruo.mutation.SetDiscountPriceStr(s)
	return ruo
}

// SetCasesID sets the "cases_id" field.
func (ruo *Rent591HomeUpdateOne) SetCasesID(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetCasesID()
	ruo.mutation.SetCasesID(i)
	return ruo
}

// AddCasesID adds i to the "cases_id" field.
func (ruo *Rent591HomeUpdateOne) AddCasesID(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddCasesID(i)
	return ruo
}

// SetIsVideo sets the "is_video" field.
func (ruo *Rent591HomeUpdateOne) SetIsVideo(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetIsVideo()
	ruo.mutation.SetIsVideo(i)
	return ruo
}

// AddIsVideo adds i to the "is_video" field.
func (ruo *Rent591HomeUpdateOne) AddIsVideo(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddIsVideo(i)
	return ruo
}

// SetPreferred sets the "preferred" field.
func (ruo *Rent591HomeUpdateOne) SetPreferred(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetPreferred()
	ruo.mutation.SetPreferred(i)
	return ruo
}

// AddPreferred adds i to the "preferred" field.
func (ruo *Rent591HomeUpdateOne) AddPreferred(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddPreferred(i)
	return ruo
}

// SetCid sets the "cid" field.
func (ruo *Rent591HomeUpdateOne) SetCid(i int) *Rent591HomeUpdateOne {
	ruo.mutation.ResetCid()
	ruo.mutation.SetCid(i)
	return ruo
}

// AddCid adds i to the "cid" field.
func (ruo *Rent591HomeUpdateOne) AddCid(i int) *Rent591HomeUpdateOne {
	ruo.mutation.AddCid(i)
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *Rent591HomeUpdateOne) SetCreatedAt(t time.Time) *Rent591HomeUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *Rent591HomeUpdateOne) SetNillableCreatedAt(t *time.Time) *Rent591HomeUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *Rent591HomeUpdateOne) SetUpdatedAt(t time.Time) *Rent591HomeUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// AddRent591homeTagIDs adds the "rent591home_tags" edge to the Rent591HomeTag entity by IDs.
func (ruo *Rent591HomeUpdateOne) AddRent591homeTagIDs(ids ...int) *Rent591HomeUpdateOne {
	ruo.mutation.AddRent591homeTagIDs(ids...)
	return ruo
}

// AddRent591homeTags adds the "rent591home_tags" edges to the Rent591HomeTag entity.
func (ruo *Rent591HomeUpdateOne) AddRent591homeTags(r ...*Rent591HomeTag) *Rent591HomeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRent591homeTagIDs(ids...)
}

// SetRent591homeSurroundingsID sets the "rent591home_surroundings" edge to the Rent591HomeSurrounding entity by ID.
func (ruo *Rent591HomeUpdateOne) SetRent591homeSurroundingsID(id int) *Rent591HomeUpdateOne {
	ruo.mutation.SetRent591homeSurroundingsID(id)
	return ruo
}

// SetNillableRent591homeSurroundingsID sets the "rent591home_surroundings" edge to the Rent591HomeSurrounding entity by ID if the given value is not nil.
func (ruo *Rent591HomeUpdateOne) SetNillableRent591homeSurroundingsID(id *int) *Rent591HomeUpdateOne {
	if id != nil {
		ruo = ruo.SetRent591homeSurroundingsID(*id)
	}
	return ruo
}

// SetRent591homeSurroundings sets the "rent591home_surroundings" edge to the Rent591HomeSurrounding entity.
func (ruo *Rent591HomeUpdateOne) SetRent591homeSurroundings(r *Rent591HomeSurrounding) *Rent591HomeUpdateOne {
	return ruo.SetRent591homeSurroundingsID(r.ID)
}

// SetRent591homeDetailsID sets the "rent591home_details" edge to the Rent591HomeDetail entity by ID.
func (ruo *Rent591HomeUpdateOne) SetRent591homeDetailsID(id int) *Rent591HomeUpdateOne {
	ruo.mutation.SetRent591homeDetailsID(id)
	return ruo
}

// SetNillableRent591homeDetailsID sets the "rent591home_details" edge to the Rent591HomeDetail entity by ID if the given value is not nil.
func (ruo *Rent591HomeUpdateOne) SetNillableRent591homeDetailsID(id *int) *Rent591HomeUpdateOne {
	if id != nil {
		ruo = ruo.SetRent591homeDetailsID(*id)
	}
	return ruo
}

// SetRent591homeDetails sets the "rent591home_details" edge to the Rent591HomeDetail entity.
func (ruo *Rent591HomeUpdateOne) SetRent591homeDetails(r *Rent591HomeDetail) *Rent591HomeUpdateOne {
	return ruo.SetRent591homeDetailsID(r.ID)
}

// Mutation returns the Rent591HomeMutation object of the builder.
func (ruo *Rent591HomeUpdateOne) Mutation() *Rent591HomeMutation {
	return ruo.mutation
}

// ClearRent591homeTags clears all "rent591home_tags" edges to the Rent591HomeTag entity.
func (ruo *Rent591HomeUpdateOne) ClearRent591homeTags() *Rent591HomeUpdateOne {
	ruo.mutation.ClearRent591homeTags()
	return ruo
}

// RemoveRent591homeTagIDs removes the "rent591home_tags" edge to Rent591HomeTag entities by IDs.
func (ruo *Rent591HomeUpdateOne) RemoveRent591homeTagIDs(ids ...int) *Rent591HomeUpdateOne {
	ruo.mutation.RemoveRent591homeTagIDs(ids...)
	return ruo
}

// RemoveRent591homeTags removes "rent591home_tags" edges to Rent591HomeTag entities.
func (ruo *Rent591HomeUpdateOne) RemoveRent591homeTags(r ...*Rent591HomeTag) *Rent591HomeUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRent591homeTagIDs(ids...)
}

// ClearRent591homeSurroundings clears the "rent591home_surroundings" edge to the Rent591HomeSurrounding entity.
func (ruo *Rent591HomeUpdateOne) ClearRent591homeSurroundings() *Rent591HomeUpdateOne {
	ruo.mutation.ClearRent591homeSurroundings()
	return ruo
}

// ClearRent591homeDetails clears the "rent591home_details" edge to the Rent591HomeDetail entity.
func (ruo *Rent591HomeUpdateOne) ClearRent591homeDetails() *Rent591HomeUpdateOne {
	ruo.mutation.ClearRent591homeDetails()
	return ruo
}

// Where appends a list predicates to the Rent591HomeUpdate builder.
func (ruo *Rent591HomeUpdateOne) Where(ps ...predicate.Rent591Home) *Rent591HomeUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *Rent591HomeUpdateOne) Select(field string, fields ...string) *Rent591HomeUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rent591Home entity.
func (ruo *Rent591HomeUpdateOne) Save(ctx context.Context) (*Rent591Home, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *Rent591HomeUpdateOne) SaveX(ctx context.Context) *Rent591Home {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *Rent591HomeUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *Rent591HomeUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *Rent591HomeUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := rent591home.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

func (ruo *Rent591HomeUpdateOne) sqlSave(ctx context.Context) (_node *Rent591Home, err error) {
	_spec := sqlgraph.NewUpdateSpec(rent591home.Table, rent591home.Columns, sqlgraph.NewFieldSpec(rent591home.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rent591Home.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rent591home.FieldID)
		for _, f := range fields {
			if !rent591home.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rent591home.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Title(); ok {
		_spec.SetField(rent591home.FieldTitle, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(rent591home.FieldType, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedType(); ok {
		_spec.AddField(rent591home.FieldType, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.PostID(); ok {
		_spec.SetField(rent591home.FieldPostID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedPostID(); ok {
		_spec.AddField(rent591home.FieldPostID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.KindName(); ok {
		_spec.SetField(rent591home.FieldKindName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.RoomStr(); ok {
		_spec.SetField(rent591home.FieldRoomStr, field.TypeString, value)
	}
	if value, ok := ruo.mutation.FloorStr(); ok {
		_spec.SetField(rent591home.FieldFloorStr, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Community(); ok {
		_spec.SetField(rent591home.FieldCommunity, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Price(); ok {
		_spec.SetField(rent591home.FieldPrice, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedPrice(); ok {
		_spec.AddField(rent591home.FieldPrice, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.PriceUnit(); ok {
		_spec.SetField(rent591home.FieldPriceUnit, field.TypeString, value)
	}
	if value, ok := ruo.mutation.PhotoList(); ok {
		_spec.SetField(rent591home.FieldPhotoList, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedPhotoList(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, rent591home.FieldPhotoList, value)
		})
	}
	if ruo.mutation.PhotoListCleared() {
		_spec.ClearField(rent591home.FieldPhotoList, field.TypeJSON)
	}
	if value, ok := ruo.mutation.RegionName(); ok {
		_spec.SetField(rent591home.FieldRegionName, field.TypeString, value)
	}
	if ruo.mutation.RegionNameCleared() {
		_spec.ClearField(rent591home.FieldRegionName, field.TypeString)
	}
	if value, ok := ruo.mutation.SectionName(); ok {
		_spec.SetField(rent591home.FieldSectionName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.StreetName(); ok {
		_spec.SetField(rent591home.FieldStreetName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Location(); ok {
		_spec.SetField(rent591home.FieldLocation, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Area(); ok {
		_spec.SetField(rent591home.FieldArea, field.TypeString, value)
	}
	if value, ok := ruo.mutation.RoleName(); ok {
		_spec.SetField(rent591home.FieldRoleName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Contact(); ok {
		_spec.SetField(rent591home.FieldContact, field.TypeString, value)
	}
	if value, ok := ruo.mutation.RefreshTime(); ok {
		_spec.SetField(rent591home.FieldRefreshTime, field.TypeString, value)
	}
	if value, ok := ruo.mutation.YesterdayHit(); ok {
		_spec.SetField(rent591home.FieldYesterdayHit, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedYesterdayHit(); ok {
		_spec.AddField(rent591home.FieldYesterdayHit, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.IsVip(); ok {
		_spec.SetField(rent591home.FieldIsVip, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedIsVip(); ok {
		_spec.AddField(rent591home.FieldIsVip, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.IsCombine(); ok {
		_spec.SetField(rent591home.FieldIsCombine, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedIsCombine(); ok {
		_spec.AddField(rent591home.FieldIsCombine, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Hurry(); ok {
		_spec.SetField(rent591home.FieldHurry, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedHurry(); ok {
		_spec.AddField(rent591home.FieldHurry, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.IsSocial(); ok {
		_spec.SetField(rent591home.FieldIsSocial, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedIsSocial(); ok {
		_spec.AddField(rent591home.FieldIsSocial, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.DiscountPriceStr(); ok {
		_spec.SetField(rent591home.FieldDiscountPriceStr, field.TypeString, value)
	}
	if value, ok := ruo.mutation.CasesID(); ok {
		_spec.SetField(rent591home.FieldCasesID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedCasesID(); ok {
		_spec.AddField(rent591home.FieldCasesID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.IsVideo(); ok {
		_spec.SetField(rent591home.FieldIsVideo, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedIsVideo(); ok {
		_spec.AddField(rent591home.FieldIsVideo, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Preferred(); ok {
		_spec.SetField(rent591home.FieldPreferred, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedPreferred(); ok {
		_spec.AddField(rent591home.FieldPreferred, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Cid(); ok {
		_spec.SetField(rent591home.FieldCid, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedCid(); ok {
		_spec.AddField(rent591home.FieldCid, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(rent591home.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(rent591home.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.Rent591homeTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591home.Rent591homeTagsTable,
			Columns: rent591home.Rent591homeTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591hometag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRent591homeTagsIDs(); len(nodes) > 0 && !ruo.mutation.Rent591homeTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591home.Rent591homeTagsTable,
			Columns: rent591home.Rent591homeTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591hometag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.Rent591homeTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rent591home.Rent591homeTagsTable,
			Columns: rent591home.Rent591homeTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591hometag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.Rent591homeSurroundingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591home.Rent591homeSurroundingsTable,
			Columns: []string{rent591home.Rent591homeSurroundingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homesurrounding.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.Rent591homeSurroundingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591home.Rent591homeSurroundingsTable,
			Columns: []string{rent591home.Rent591homeSurroundingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homesurrounding.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.Rent591homeDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591home.Rent591homeDetailsTable,
			Columns: []string{rent591home.Rent591homeDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.Rent591homeDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rent591home.Rent591homeDetailsTable,
			Columns: []string{rent591home.Rent591homeDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rent591homedetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rent591Home{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent591home.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

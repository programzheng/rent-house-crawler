// Code generated by ent, DO NOT EDIT.

package rent591homedetailpositionround

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rent591homedetailpositionround type in the database.
	Label = "rent591home_detail_position_round"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldCommunityName holds the string denoting the community_name field in the database.
	FieldCommunityName = "community_name"
	// FieldCommunityID holds the string denoting the community_id field in the database.
	FieldCommunityID = "community_id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldLng holds the string denoting the lng field in the database.
	FieldLng = "lng"
	// EdgeRent591homeDetails holds the string denoting the rent591home_details edge name in mutations.
	EdgeRent591homeDetails = "rent591home_details"
	// EdgeRent591homeDetailPositionRoundDatas holds the string denoting the rent591home_detail_position_round_datas edge name in mutations.
	EdgeRent591homeDetailPositionRoundDatas = "rent591home_detail_position_round_datas"
	// Table holds the table name of the rent591homedetailpositionround in the database.
	Table = "rent591home_detail_position_rounds"
	// Rent591homeDetailsTable is the table that holds the rent591home_details relation/edge.
	Rent591homeDetailsTable = "rent591home_detail_position_rounds"
	// Rent591homeDetailsInverseTable is the table name for the Rent591HomeDetail entity.
	// It exists in this package in order to avoid circular dependency with the "rent591homedetail" package.
	Rent591homeDetailsInverseTable = "rent591home_details"
	// Rent591homeDetailsColumn is the table column denoting the rent591home_details relation/edge.
	Rent591homeDetailsColumn = "rent591home_detail_rent591home_detail_position_rounds"
	// Rent591homeDetailPositionRoundDatasTable is the table that holds the rent591home_detail_position_round_datas relation/edge. The primary key declared below.
	Rent591homeDetailPositionRoundDatasTable = "rent591home_d_p_r_rent591home_d_p_r_ds"
	// Rent591homeDetailPositionRoundDatasInverseTable is the table name for the Rent591HomeDetailPositionRoundData entity.
	// It exists in this package in order to avoid circular dependency with the "rent591homedetailpositionrounddata" package.
	Rent591homeDetailPositionRoundDatasInverseTable = "rent591home_detail_position_round_data"
)

// Columns holds all SQL columns for rent591homedetailpositionround fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldKey,
	FieldActive,
	FieldCommunityName,
	FieldCommunityID,
	FieldAddress,
	FieldLat,
	FieldLng,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rent591home_detail_position_rounds"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"rent591home_detail_rent591home_detail_position_rounds",
}

var (
	// Rent591homeDetailPositionRoundDatasPrimaryKey and Rent591homeDetailPositionRoundDatasColumn2 are the table columns denoting the
	// primary key for the rent591home_detail_position_round_datas relation (M2M).
	Rent591homeDetailPositionRoundDatasPrimaryKey = []string{"rent591home_detail_position_round_id", "rent591home_detail_position_round_data_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Rent591HomeDetailPositionRound queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByCommunityName orders the results by the community_name field.
func ByCommunityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommunityName, opts...).ToFunc()
}

// ByCommunityID orders the results by the community_id field.
func ByCommunityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommunityID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByLat orders the results by the lat field.
func ByLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLat, opts...).ToFunc()
}

// ByLng orders the results by the lng field.
func ByLng(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLng, opts...).ToFunc()
}

// ByRent591homeDetailsField orders the results by rent591home_details field.
func ByRent591homeDetailsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRent591homeDetailsStep(), sql.OrderByField(field, opts...))
	}
}

// ByRent591homeDetailPositionRoundDatasCount orders the results by rent591home_detail_position_round_datas count.
func ByRent591homeDetailPositionRoundDatasCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRent591homeDetailPositionRoundDatasStep(), opts...)
	}
}

// ByRent591homeDetailPositionRoundDatas orders the results by rent591home_detail_position_round_datas terms.
func ByRent591homeDetailPositionRoundDatas(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRent591homeDetailPositionRoundDatasStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRent591homeDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Rent591homeDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, Rent591homeDetailsTable, Rent591homeDetailsColumn),
	)
}
func newRent591homeDetailPositionRoundDatasStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Rent591homeDetailPositionRoundDatasInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, Rent591homeDetailPositionRoundDatasTable, Rent591homeDetailPositionRoundDatasPrimaryKey...),
	)
}

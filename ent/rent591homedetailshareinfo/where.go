// Code generated by ent, DO NOT EDIT.

package rent591homedetailshareinfo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldLTE(FieldID, id))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldEQ(FieldURL, v))
}

// From applies equality check predicate on the "From" field. It's identical to FromEQ.
func From(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldEQ(FieldFrom, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldEQ(FieldTitle, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldContainsFold(FieldURL, v))
}

// FromEQ applies the EQ predicate on the "From" field.
func FromEQ(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "From" field.
func FromNEQ(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "From" field.
func FromIn(vs ...string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "From" field.
func FromNotIn(vs ...string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "From" field.
func FromGT(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "From" field.
func FromGTE(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "From" field.
func FromLT(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "From" field.
func FromLTE(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "From" field.
func FromContains(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "From" field.
func FromHasPrefix(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "From" field.
func FromHasSuffix(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldHasSuffix(FieldFrom, v))
}

// FromEqualFold applies the EqualFold predicate on the "From" field.
func FromEqualFold(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "From" field.
func FromContainsFold(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldContainsFold(FieldFrom, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(sql.FieldContainsFold(FieldTitle, v))
}

// HasRent591homeDetails applies the HasEdge predicate on the "rent591home_details" edge.
func HasRent591homeDetails() predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, Rent591homeDetailsTable, Rent591homeDetailsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRent591homeDetailsWith applies the HasEdge predicate on the "rent591home_details" edge with a given conditions (other predicates).
func HasRent591homeDetailsWith(preds ...predicate.Rent591HomeDetail) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(func(s *sql.Selector) {
		step := newRent591homeDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rent591HomeDetailShareInfo) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rent591HomeDetailShareInfo) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rent591HomeDetailShareInfo) predicate.Rent591HomeDetailShareInfo {
	return predicate.Rent591HomeDetailShareInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}

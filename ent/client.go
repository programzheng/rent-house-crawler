// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/programzheng/rent-house-crawler/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/programzheng/rent-house-crawler/ent/rent591home"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetail"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbreadcrumb"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailbrowse"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailinfo"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailnavdata"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionround"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionrounddata"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionrounddatachildren"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpublish"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailshareinfo"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailtag"
	"github.com/programzheng/rent-house-crawler/ent/rent591homesurrounding"
	"github.com/programzheng/rent-house-crawler/ent/rent591hometag"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Rent591Home is the client for interacting with the Rent591Home builders.
	Rent591Home *Rent591HomeClient
	// Rent591HomeDetail is the client for interacting with the Rent591HomeDetail builders.
	Rent591HomeDetail *Rent591HomeDetailClient
	// Rent591HomeDetailBreadcrumb is the client for interacting with the Rent591HomeDetailBreadcrumb builders.
	Rent591HomeDetailBreadcrumb *Rent591HomeDetailBreadcrumbClient
	// Rent591HomeDetailBrowse is the client for interacting with the Rent591HomeDetailBrowse builders.
	Rent591HomeDetailBrowse *Rent591HomeDetailBrowseClient
	// Rent591HomeDetailInfo is the client for interacting with the Rent591HomeDetailInfo builders.
	Rent591HomeDetailInfo *Rent591HomeDetailInfoClient
	// Rent591HomeDetailNavData is the client for interacting with the Rent591HomeDetailNavData builders.
	Rent591HomeDetailNavData *Rent591HomeDetailNavDataClient
	// Rent591HomeDetailPositionRound is the client for interacting with the Rent591HomeDetailPositionRound builders.
	Rent591HomeDetailPositionRound *Rent591HomeDetailPositionRoundClient
	// Rent591HomeDetailPositionRoundData is the client for interacting with the Rent591HomeDetailPositionRoundData builders.
	Rent591HomeDetailPositionRoundData *Rent591HomeDetailPositionRoundDataClient
	// Rent591HomeDetailPositionRoundDataChildren is the client for interacting with the Rent591HomeDetailPositionRoundDataChildren builders.
	Rent591HomeDetailPositionRoundDataChildren *Rent591HomeDetailPositionRoundDataChildrenClient
	// Rent591HomeDetailPublish is the client for interacting with the Rent591HomeDetailPublish builders.
	Rent591HomeDetailPublish *Rent591HomeDetailPublishClient
	// Rent591HomeDetailShareInfo is the client for interacting with the Rent591HomeDetailShareInfo builders.
	Rent591HomeDetailShareInfo *Rent591HomeDetailShareInfoClient
	// Rent591HomeDetailTag is the client for interacting with the Rent591HomeDetailTag builders.
	Rent591HomeDetailTag *Rent591HomeDetailTagClient
	// Rent591HomeSurrounding is the client for interacting with the Rent591HomeSurrounding builders.
	Rent591HomeSurrounding *Rent591HomeSurroundingClient
	// Rent591HomeTag is the client for interacting with the Rent591HomeTag builders.
	Rent591HomeTag *Rent591HomeTagClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Rent591Home = NewRent591HomeClient(c.config)
	c.Rent591HomeDetail = NewRent591HomeDetailClient(c.config)
	c.Rent591HomeDetailBreadcrumb = NewRent591HomeDetailBreadcrumbClient(c.config)
	c.Rent591HomeDetailBrowse = NewRent591HomeDetailBrowseClient(c.config)
	c.Rent591HomeDetailInfo = NewRent591HomeDetailInfoClient(c.config)
	c.Rent591HomeDetailNavData = NewRent591HomeDetailNavDataClient(c.config)
	c.Rent591HomeDetailPositionRound = NewRent591HomeDetailPositionRoundClient(c.config)
	c.Rent591HomeDetailPositionRoundData = NewRent591HomeDetailPositionRoundDataClient(c.config)
	c.Rent591HomeDetailPositionRoundDataChildren = NewRent591HomeDetailPositionRoundDataChildrenClient(c.config)
	c.Rent591HomeDetailPublish = NewRent591HomeDetailPublishClient(c.config)
	c.Rent591HomeDetailShareInfo = NewRent591HomeDetailShareInfoClient(c.config)
	c.Rent591HomeDetailTag = NewRent591HomeDetailTagClient(c.config)
	c.Rent591HomeSurrounding = NewRent591HomeSurroundingClient(c.config)
	c.Rent591HomeTag = NewRent591HomeTagClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                                ctx,
		config:                             cfg,
		Rent591Home:                        NewRent591HomeClient(cfg),
		Rent591HomeDetail:                  NewRent591HomeDetailClient(cfg),
		Rent591HomeDetailBreadcrumb:        NewRent591HomeDetailBreadcrumbClient(cfg),
		Rent591HomeDetailBrowse:            NewRent591HomeDetailBrowseClient(cfg),
		Rent591HomeDetailInfo:              NewRent591HomeDetailInfoClient(cfg),
		Rent591HomeDetailNavData:           NewRent591HomeDetailNavDataClient(cfg),
		Rent591HomeDetailPositionRound:     NewRent591HomeDetailPositionRoundClient(cfg),
		Rent591HomeDetailPositionRoundData: NewRent591HomeDetailPositionRoundDataClient(cfg),
		Rent591HomeDetailPositionRoundDataChildren: NewRent591HomeDetailPositionRoundDataChildrenClient(cfg),
		Rent591HomeDetailPublish:                   NewRent591HomeDetailPublishClient(cfg),
		Rent591HomeDetailShareInfo:                 NewRent591HomeDetailShareInfoClient(cfg),
		Rent591HomeDetailTag:                       NewRent591HomeDetailTagClient(cfg),
		Rent591HomeSurrounding:                     NewRent591HomeSurroundingClient(cfg),
		Rent591HomeTag:                             NewRent591HomeTagClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                                ctx,
		config:                             cfg,
		Rent591Home:                        NewRent591HomeClient(cfg),
		Rent591HomeDetail:                  NewRent591HomeDetailClient(cfg),
		Rent591HomeDetailBreadcrumb:        NewRent591HomeDetailBreadcrumbClient(cfg),
		Rent591HomeDetailBrowse:            NewRent591HomeDetailBrowseClient(cfg),
		Rent591HomeDetailInfo:              NewRent591HomeDetailInfoClient(cfg),
		Rent591HomeDetailNavData:           NewRent591HomeDetailNavDataClient(cfg),
		Rent591HomeDetailPositionRound:     NewRent591HomeDetailPositionRoundClient(cfg),
		Rent591HomeDetailPositionRoundData: NewRent591HomeDetailPositionRoundDataClient(cfg),
		Rent591HomeDetailPositionRoundDataChildren: NewRent591HomeDetailPositionRoundDataChildrenClient(cfg),
		Rent591HomeDetailPublish:                   NewRent591HomeDetailPublishClient(cfg),
		Rent591HomeDetailShareInfo:                 NewRent591HomeDetailShareInfoClient(cfg),
		Rent591HomeDetailTag:                       NewRent591HomeDetailTagClient(cfg),
		Rent591HomeSurrounding:                     NewRent591HomeSurroundingClient(cfg),
		Rent591HomeTag:                             NewRent591HomeTagClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Rent591Home.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Rent591Home, c.Rent591HomeDetail, c.Rent591HomeDetailBreadcrumb,
		c.Rent591HomeDetailBrowse, c.Rent591HomeDetailInfo, c.Rent591HomeDetailNavData,
		c.Rent591HomeDetailPositionRound, c.Rent591HomeDetailPositionRoundData,
		c.Rent591HomeDetailPositionRoundDataChildren, c.Rent591HomeDetailPublish,
		c.Rent591HomeDetailShareInfo, c.Rent591HomeDetailTag, c.Rent591HomeSurrounding,
		c.Rent591HomeTag,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Rent591Home, c.Rent591HomeDetail, c.Rent591HomeDetailBreadcrumb,
		c.Rent591HomeDetailBrowse, c.Rent591HomeDetailInfo, c.Rent591HomeDetailNavData,
		c.Rent591HomeDetailPositionRound, c.Rent591HomeDetailPositionRoundData,
		c.Rent591HomeDetailPositionRoundDataChildren, c.Rent591HomeDetailPublish,
		c.Rent591HomeDetailShareInfo, c.Rent591HomeDetailTag, c.Rent591HomeSurrounding,
		c.Rent591HomeTag,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *Rent591HomeMutation:
		return c.Rent591Home.mutate(ctx, m)
	case *Rent591HomeDetailMutation:
		return c.Rent591HomeDetail.mutate(ctx, m)
	case *Rent591HomeDetailBreadcrumbMutation:
		return c.Rent591HomeDetailBreadcrumb.mutate(ctx, m)
	case *Rent591HomeDetailBrowseMutation:
		return c.Rent591HomeDetailBrowse.mutate(ctx, m)
	case *Rent591HomeDetailInfoMutation:
		return c.Rent591HomeDetailInfo.mutate(ctx, m)
	case *Rent591HomeDetailNavDataMutation:
		return c.Rent591HomeDetailNavData.mutate(ctx, m)
	case *Rent591HomeDetailPositionRoundMutation:
		return c.Rent591HomeDetailPositionRound.mutate(ctx, m)
	case *Rent591HomeDetailPositionRoundDataMutation:
		return c.Rent591HomeDetailPositionRoundData.mutate(ctx, m)
	case *Rent591HomeDetailPositionRoundDataChildrenMutation:
		return c.Rent591HomeDetailPositionRoundDataChildren.mutate(ctx, m)
	case *Rent591HomeDetailPublishMutation:
		return c.Rent591HomeDetailPublish.mutate(ctx, m)
	case *Rent591HomeDetailShareInfoMutation:
		return c.Rent591HomeDetailShareInfo.mutate(ctx, m)
	case *Rent591HomeDetailTagMutation:
		return c.Rent591HomeDetailTag.mutate(ctx, m)
	case *Rent591HomeSurroundingMutation:
		return c.Rent591HomeSurrounding.mutate(ctx, m)
	case *Rent591HomeTagMutation:
		return c.Rent591HomeTag.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// Rent591HomeClient is a client for the Rent591Home schema.
type Rent591HomeClient struct {
	config
}

// NewRent591HomeClient returns a client for the Rent591Home from the given config.
func NewRent591HomeClient(c config) *Rent591HomeClient {
	return &Rent591HomeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591home.Hooks(f(g(h())))`.
func (c *Rent591HomeClient) Use(hooks ...Hook) {
	c.hooks.Rent591Home = append(c.hooks.Rent591Home, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591home.Intercept(f(g(h())))`.
func (c *Rent591HomeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591Home = append(c.inters.Rent591Home, interceptors...)
}

// Create returns a builder for creating a Rent591Home entity.
func (c *Rent591HomeClient) Create() *Rent591HomeCreate {
	mutation := newRent591HomeMutation(c.config, OpCreate)
	return &Rent591HomeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591Home entities.
func (c *Rent591HomeClient) CreateBulk(builders ...*Rent591HomeCreate) *Rent591HomeCreateBulk {
	return &Rent591HomeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591Home.
func (c *Rent591HomeClient) Update() *Rent591HomeUpdate {
	mutation := newRent591HomeMutation(c.config, OpUpdate)
	return &Rent591HomeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeClient) UpdateOne(r *Rent591Home) *Rent591HomeUpdateOne {
	mutation := newRent591HomeMutation(c.config, OpUpdateOne, withRent591Home(r))
	return &Rent591HomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeClient) UpdateOneID(id int) *Rent591HomeUpdateOne {
	mutation := newRent591HomeMutation(c.config, OpUpdateOne, withRent591HomeID(id))
	return &Rent591HomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591Home.
func (c *Rent591HomeClient) Delete() *Rent591HomeDelete {
	mutation := newRent591HomeMutation(c.config, OpDelete)
	return &Rent591HomeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeClient) DeleteOne(r *Rent591Home) *Rent591HomeDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeClient) DeleteOneID(id int) *Rent591HomeDeleteOne {
	builder := c.Delete().Where(rent591home.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDeleteOne{builder}
}

// Query returns a query builder for Rent591Home.
func (c *Rent591HomeClient) Query() *Rent591HomeQuery {
	return &Rent591HomeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591Home},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591Home entity by its id.
func (c *Rent591HomeClient) Get(ctx context.Context, id int) (*Rent591Home, error) {
	return c.Query().Where(rent591home.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeClient) GetX(ctx context.Context, id int) *Rent591Home {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homeTags queries the rent591home_tags edge of a Rent591Home.
func (c *Rent591HomeClient) QueryRent591homeTags(r *Rent591Home) *Rent591HomeTagQuery {
	query := (&Rent591HomeTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591home.Table, rent591home.FieldID, id),
			sqlgraph.To(rent591hometag.Table, rent591hometag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591home.Rent591homeTagsTable, rent591home.Rent591homeTagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeSurroundings queries the rent591home_surroundings edge of a Rent591Home.
func (c *Rent591HomeClient) QueryRent591homeSurroundings(r *Rent591Home) *Rent591HomeSurroundingQuery {
	query := (&Rent591HomeSurroundingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591home.Table, rent591home.FieldID, id),
			sqlgraph.To(rent591homesurrounding.Table, rent591homesurrounding.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, rent591home.Rent591homeSurroundingsTable, rent591home.Rent591homeSurroundingsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeDetails queries the rent591home_details edge of a Rent591Home.
func (c *Rent591HomeClient) QueryRent591homeDetails(r *Rent591Home) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591home.Table, rent591home.FieldID, id),
			sqlgraph.To(rent591homedetail.Table, rent591homedetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, rent591home.Rent591homeDetailsTable, rent591home.Rent591homeDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeClient) Hooks() []Hook {
	return c.hooks.Rent591Home
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeClient) Interceptors() []Interceptor {
	return c.inters.Rent591Home
}

func (c *Rent591HomeClient) mutate(ctx context.Context, m *Rent591HomeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591Home mutation op: %q", m.Op())
	}
}

// Rent591HomeDetailClient is a client for the Rent591HomeDetail schema.
type Rent591HomeDetailClient struct {
	config
}

// NewRent591HomeDetailClient returns a client for the Rent591HomeDetail from the given config.
func NewRent591HomeDetailClient(c config) *Rent591HomeDetailClient {
	return &Rent591HomeDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homedetail.Hooks(f(g(h())))`.
func (c *Rent591HomeDetailClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeDetail = append(c.hooks.Rent591HomeDetail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homedetail.Intercept(f(g(h())))`.
func (c *Rent591HomeDetailClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeDetail = append(c.inters.Rent591HomeDetail, interceptors...)
}

// Create returns a builder for creating a Rent591HomeDetail entity.
func (c *Rent591HomeDetailClient) Create() *Rent591HomeDetailCreate {
	mutation := newRent591HomeDetailMutation(c.config, OpCreate)
	return &Rent591HomeDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeDetail entities.
func (c *Rent591HomeDetailClient) CreateBulk(builders ...*Rent591HomeDetailCreate) *Rent591HomeDetailCreateBulk {
	return &Rent591HomeDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeDetail.
func (c *Rent591HomeDetailClient) Update() *Rent591HomeDetailUpdate {
	mutation := newRent591HomeDetailMutation(c.config, OpUpdate)
	return &Rent591HomeDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeDetailClient) UpdateOne(rd *Rent591HomeDetail) *Rent591HomeDetailUpdateOne {
	mutation := newRent591HomeDetailMutation(c.config, OpUpdateOne, withRent591HomeDetail(rd))
	return &Rent591HomeDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeDetailClient) UpdateOneID(id int) *Rent591HomeDetailUpdateOne {
	mutation := newRent591HomeDetailMutation(c.config, OpUpdateOne, withRent591HomeDetailID(id))
	return &Rent591HomeDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeDetail.
func (c *Rent591HomeDetailClient) Delete() *Rent591HomeDetailDelete {
	mutation := newRent591HomeDetailMutation(c.config, OpDelete)
	return &Rent591HomeDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeDetailClient) DeleteOne(rd *Rent591HomeDetail) *Rent591HomeDetailDeleteOne {
	return c.DeleteOneID(rd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeDetailClient) DeleteOneID(id int) *Rent591HomeDetailDeleteOne {
	builder := c.Delete().Where(rent591homedetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDetailDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeDetail.
func (c *Rent591HomeDetailClient) Query() *Rent591HomeDetailQuery {
	return &Rent591HomeDetailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeDetail},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeDetail entity by its id.
func (c *Rent591HomeDetailClient) Get(ctx context.Context, id int) (*Rent591HomeDetail, error) {
	return c.Query().Where(rent591homedetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeDetailClient) GetX(ctx context.Context, id int) *Rent591HomeDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homes queries the rent591homes edge of a Rent591HomeDetail.
func (c *Rent591HomeDetailClient) QueryRent591homes(rd *Rent591HomeDetail) *Rent591HomeQuery {
	query := (&Rent591HomeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, id),
			sqlgraph.To(rent591home.Table, rent591home.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, rent591homedetail.Rent591homesTable, rent591homedetail.Rent591homesColumn),
		)
		fromV = sqlgraph.Neighbors(rd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeDetailBreadcrumbs queries the rent591home_detail_breadcrumbs edge of a Rent591HomeDetail.
func (c *Rent591HomeDetailClient) QueryRent591homeDetailBreadcrumbs(rd *Rent591HomeDetail) *Rent591HomeDetailBreadcrumbQuery {
	query := (&Rent591HomeDetailBreadcrumbClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, id),
			sqlgraph.To(rent591homedetailbreadcrumb.Table, rent591homedetailbreadcrumb.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetail.Rent591homeDetailBreadcrumbsTable, rent591homedetail.Rent591homeDetailBreadcrumbsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeDetailShareinfos queries the rent591home_detail_shareinfos edge of a Rent591HomeDetail.
func (c *Rent591HomeDetailClient) QueryRent591homeDetailShareinfos(rd *Rent591HomeDetail) *Rent591HomeDetailShareInfoQuery {
	query := (&Rent591HomeDetailShareInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, id),
			sqlgraph.To(rent591homedetailshareinfo.Table, rent591homedetailshareinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetail.Rent591homeDetailShareinfosTable, rent591homedetail.Rent591homeDetailShareinfosPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeDetailBrowses queries the rent591home_detail_browses edge of a Rent591HomeDetail.
func (c *Rent591HomeDetailClient) QueryRent591homeDetailBrowses(rd *Rent591HomeDetail) *Rent591HomeDetailBrowseQuery {
	query := (&Rent591HomeDetailBrowseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, id),
			sqlgraph.To(rent591homedetailbrowse.Table, rent591homedetailbrowse.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetail.Rent591homeDetailBrowsesTable, rent591homedetail.Rent591homeDetailBrowsesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeDetailTags queries the rent591home_detail_tags edge of a Rent591HomeDetail.
func (c *Rent591HomeDetailClient) QueryRent591homeDetailTags(rd *Rent591HomeDetail) *Rent591HomeDetailTagQuery {
	query := (&Rent591HomeDetailTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, id),
			sqlgraph.To(rent591homedetailtag.Table, rent591homedetailtag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetail.Rent591homeDetailTagsTable, rent591homedetail.Rent591homeDetailTagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeDetailNavdatas queries the rent591home_detail_navdatas edge of a Rent591HomeDetail.
func (c *Rent591HomeDetailClient) QueryRent591homeDetailNavdatas(rd *Rent591HomeDetail) *Rent591HomeDetailNavDataQuery {
	query := (&Rent591HomeDetailNavDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, id),
			sqlgraph.To(rent591homedetailnavdata.Table, rent591homedetailnavdata.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetail.Rent591homeDetailNavdatasTable, rent591homedetail.Rent591homeDetailNavdatasPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeDetailInfos queries the rent591home_detail_infos edge of a Rent591HomeDetail.
func (c *Rent591HomeDetailClient) QueryRent591homeDetailInfos(rd *Rent591HomeDetail) *Rent591HomeDetailInfoQuery {
	query := (&Rent591HomeDetailInfoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, id),
			sqlgraph.To(rent591homedetailinfo.Table, rent591homedetailinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetail.Rent591homeDetailInfosTable, rent591homedetail.Rent591homeDetailInfosPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeDetailPublishs queries the rent591home_detail_publishs edge of a Rent591HomeDetail.
func (c *Rent591HomeDetailClient) QueryRent591homeDetailPublishs(rd *Rent591HomeDetail) *Rent591HomeDetailPublishQuery {
	query := (&Rent591HomeDetailPublishClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, id),
			sqlgraph.To(rent591homedetailpublish.Table, rent591homedetailpublish.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetail.Rent591homeDetailPublishsTable, rent591homedetail.Rent591homeDetailPublishsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeDetailPositionRounds queries the rent591home_detail_position_rounds edge of a Rent591HomeDetail.
func (c *Rent591HomeDetailClient) QueryRent591homeDetailPositionRounds(rd *Rent591HomeDetail) *Rent591HomeDetailPositionRoundQuery {
	query := (&Rent591HomeDetailPositionRoundClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetail.Table, rent591homedetail.FieldID, id),
			sqlgraph.To(rent591homedetailpositionround.Table, rent591homedetailpositionround.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, rent591homedetail.Rent591homeDetailPositionRoundsTable, rent591homedetail.Rent591homeDetailPositionRoundsColumn),
		)
		fromV = sqlgraph.Neighbors(rd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeDetailClient) Hooks() []Hook {
	return c.hooks.Rent591HomeDetail
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeDetailClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeDetail
}

func (c *Rent591HomeDetailClient) mutate(ctx context.Context, m *Rent591HomeDetailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeDetailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDetailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeDetail mutation op: %q", m.Op())
	}
}

// Rent591HomeDetailBreadcrumbClient is a client for the Rent591HomeDetailBreadcrumb schema.
type Rent591HomeDetailBreadcrumbClient struct {
	config
}

// NewRent591HomeDetailBreadcrumbClient returns a client for the Rent591HomeDetailBreadcrumb from the given config.
func NewRent591HomeDetailBreadcrumbClient(c config) *Rent591HomeDetailBreadcrumbClient {
	return &Rent591HomeDetailBreadcrumbClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homedetailbreadcrumb.Hooks(f(g(h())))`.
func (c *Rent591HomeDetailBreadcrumbClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeDetailBreadcrumb = append(c.hooks.Rent591HomeDetailBreadcrumb, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homedetailbreadcrumb.Intercept(f(g(h())))`.
func (c *Rent591HomeDetailBreadcrumbClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeDetailBreadcrumb = append(c.inters.Rent591HomeDetailBreadcrumb, interceptors...)
}

// Create returns a builder for creating a Rent591HomeDetailBreadcrumb entity.
func (c *Rent591HomeDetailBreadcrumbClient) Create() *Rent591HomeDetailBreadcrumbCreate {
	mutation := newRent591HomeDetailBreadcrumbMutation(c.config, OpCreate)
	return &Rent591HomeDetailBreadcrumbCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeDetailBreadcrumb entities.
func (c *Rent591HomeDetailBreadcrumbClient) CreateBulk(builders ...*Rent591HomeDetailBreadcrumbCreate) *Rent591HomeDetailBreadcrumbCreateBulk {
	return &Rent591HomeDetailBreadcrumbCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeDetailBreadcrumb.
func (c *Rent591HomeDetailBreadcrumbClient) Update() *Rent591HomeDetailBreadcrumbUpdate {
	mutation := newRent591HomeDetailBreadcrumbMutation(c.config, OpUpdate)
	return &Rent591HomeDetailBreadcrumbUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeDetailBreadcrumbClient) UpdateOne(rdb *Rent591HomeDetailBreadcrumb) *Rent591HomeDetailBreadcrumbUpdateOne {
	mutation := newRent591HomeDetailBreadcrumbMutation(c.config, OpUpdateOne, withRent591HomeDetailBreadcrumb(rdb))
	return &Rent591HomeDetailBreadcrumbUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeDetailBreadcrumbClient) UpdateOneID(id int) *Rent591HomeDetailBreadcrumbUpdateOne {
	mutation := newRent591HomeDetailBreadcrumbMutation(c.config, OpUpdateOne, withRent591HomeDetailBreadcrumbID(id))
	return &Rent591HomeDetailBreadcrumbUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeDetailBreadcrumb.
func (c *Rent591HomeDetailBreadcrumbClient) Delete() *Rent591HomeDetailBreadcrumbDelete {
	mutation := newRent591HomeDetailBreadcrumbMutation(c.config, OpDelete)
	return &Rent591HomeDetailBreadcrumbDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeDetailBreadcrumbClient) DeleteOne(rdb *Rent591HomeDetailBreadcrumb) *Rent591HomeDetailBreadcrumbDeleteOne {
	return c.DeleteOneID(rdb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeDetailBreadcrumbClient) DeleteOneID(id int) *Rent591HomeDetailBreadcrumbDeleteOne {
	builder := c.Delete().Where(rent591homedetailbreadcrumb.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDetailBreadcrumbDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeDetailBreadcrumb.
func (c *Rent591HomeDetailBreadcrumbClient) Query() *Rent591HomeDetailBreadcrumbQuery {
	return &Rent591HomeDetailBreadcrumbQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeDetailBreadcrumb},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeDetailBreadcrumb entity by its id.
func (c *Rent591HomeDetailBreadcrumbClient) Get(ctx context.Context, id int) (*Rent591HomeDetailBreadcrumb, error) {
	return c.Query().Where(rent591homedetailbreadcrumb.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeDetailBreadcrumbClient) GetX(ctx context.Context, id int) *Rent591HomeDetailBreadcrumb {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homeDetails queries the rent591home_details edge of a Rent591HomeDetailBreadcrumb.
func (c *Rent591HomeDetailBreadcrumbClient) QueryRent591homeDetails(rdb *Rent591HomeDetailBreadcrumb) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailbreadcrumb.Table, rent591homedetailbreadcrumb.FieldID, id),
			sqlgraph.To(rent591homedetail.Table, rent591homedetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetailbreadcrumb.Rent591homeDetailsTable, rent591homedetailbreadcrumb.Rent591homeDetailsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rdb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeDetailBreadcrumbClient) Hooks() []Hook {
	return c.hooks.Rent591HomeDetailBreadcrumb
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeDetailBreadcrumbClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeDetailBreadcrumb
}

func (c *Rent591HomeDetailBreadcrumbClient) mutate(ctx context.Context, m *Rent591HomeDetailBreadcrumbMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeDetailBreadcrumbCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeDetailBreadcrumbUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeDetailBreadcrumbUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDetailBreadcrumbDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeDetailBreadcrumb mutation op: %q", m.Op())
	}
}

// Rent591HomeDetailBrowseClient is a client for the Rent591HomeDetailBrowse schema.
type Rent591HomeDetailBrowseClient struct {
	config
}

// NewRent591HomeDetailBrowseClient returns a client for the Rent591HomeDetailBrowse from the given config.
func NewRent591HomeDetailBrowseClient(c config) *Rent591HomeDetailBrowseClient {
	return &Rent591HomeDetailBrowseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homedetailbrowse.Hooks(f(g(h())))`.
func (c *Rent591HomeDetailBrowseClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeDetailBrowse = append(c.hooks.Rent591HomeDetailBrowse, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homedetailbrowse.Intercept(f(g(h())))`.
func (c *Rent591HomeDetailBrowseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeDetailBrowse = append(c.inters.Rent591HomeDetailBrowse, interceptors...)
}

// Create returns a builder for creating a Rent591HomeDetailBrowse entity.
func (c *Rent591HomeDetailBrowseClient) Create() *Rent591HomeDetailBrowseCreate {
	mutation := newRent591HomeDetailBrowseMutation(c.config, OpCreate)
	return &Rent591HomeDetailBrowseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeDetailBrowse entities.
func (c *Rent591HomeDetailBrowseClient) CreateBulk(builders ...*Rent591HomeDetailBrowseCreate) *Rent591HomeDetailBrowseCreateBulk {
	return &Rent591HomeDetailBrowseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeDetailBrowse.
func (c *Rent591HomeDetailBrowseClient) Update() *Rent591HomeDetailBrowseUpdate {
	mutation := newRent591HomeDetailBrowseMutation(c.config, OpUpdate)
	return &Rent591HomeDetailBrowseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeDetailBrowseClient) UpdateOne(rdb *Rent591HomeDetailBrowse) *Rent591HomeDetailBrowseUpdateOne {
	mutation := newRent591HomeDetailBrowseMutation(c.config, OpUpdateOne, withRent591HomeDetailBrowse(rdb))
	return &Rent591HomeDetailBrowseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeDetailBrowseClient) UpdateOneID(id int) *Rent591HomeDetailBrowseUpdateOne {
	mutation := newRent591HomeDetailBrowseMutation(c.config, OpUpdateOne, withRent591HomeDetailBrowseID(id))
	return &Rent591HomeDetailBrowseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeDetailBrowse.
func (c *Rent591HomeDetailBrowseClient) Delete() *Rent591HomeDetailBrowseDelete {
	mutation := newRent591HomeDetailBrowseMutation(c.config, OpDelete)
	return &Rent591HomeDetailBrowseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeDetailBrowseClient) DeleteOne(rdb *Rent591HomeDetailBrowse) *Rent591HomeDetailBrowseDeleteOne {
	return c.DeleteOneID(rdb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeDetailBrowseClient) DeleteOneID(id int) *Rent591HomeDetailBrowseDeleteOne {
	builder := c.Delete().Where(rent591homedetailbrowse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDetailBrowseDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeDetailBrowse.
func (c *Rent591HomeDetailBrowseClient) Query() *Rent591HomeDetailBrowseQuery {
	return &Rent591HomeDetailBrowseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeDetailBrowse},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeDetailBrowse entity by its id.
func (c *Rent591HomeDetailBrowseClient) Get(ctx context.Context, id int) (*Rent591HomeDetailBrowse, error) {
	return c.Query().Where(rent591homedetailbrowse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeDetailBrowseClient) GetX(ctx context.Context, id int) *Rent591HomeDetailBrowse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homeDetails queries the rent591home_details edge of a Rent591HomeDetailBrowse.
func (c *Rent591HomeDetailBrowseClient) QueryRent591homeDetails(rdb *Rent591HomeDetailBrowse) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailbrowse.Table, rent591homedetailbrowse.FieldID, id),
			sqlgraph.To(rent591homedetail.Table, rent591homedetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetailbrowse.Rent591homeDetailsTable, rent591homedetailbrowse.Rent591homeDetailsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rdb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeDetailBrowseClient) Hooks() []Hook {
	return c.hooks.Rent591HomeDetailBrowse
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeDetailBrowseClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeDetailBrowse
}

func (c *Rent591HomeDetailBrowseClient) mutate(ctx context.Context, m *Rent591HomeDetailBrowseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeDetailBrowseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeDetailBrowseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeDetailBrowseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDetailBrowseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeDetailBrowse mutation op: %q", m.Op())
	}
}

// Rent591HomeDetailInfoClient is a client for the Rent591HomeDetailInfo schema.
type Rent591HomeDetailInfoClient struct {
	config
}

// NewRent591HomeDetailInfoClient returns a client for the Rent591HomeDetailInfo from the given config.
func NewRent591HomeDetailInfoClient(c config) *Rent591HomeDetailInfoClient {
	return &Rent591HomeDetailInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homedetailinfo.Hooks(f(g(h())))`.
func (c *Rent591HomeDetailInfoClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeDetailInfo = append(c.hooks.Rent591HomeDetailInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homedetailinfo.Intercept(f(g(h())))`.
func (c *Rent591HomeDetailInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeDetailInfo = append(c.inters.Rent591HomeDetailInfo, interceptors...)
}

// Create returns a builder for creating a Rent591HomeDetailInfo entity.
func (c *Rent591HomeDetailInfoClient) Create() *Rent591HomeDetailInfoCreate {
	mutation := newRent591HomeDetailInfoMutation(c.config, OpCreate)
	return &Rent591HomeDetailInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeDetailInfo entities.
func (c *Rent591HomeDetailInfoClient) CreateBulk(builders ...*Rent591HomeDetailInfoCreate) *Rent591HomeDetailInfoCreateBulk {
	return &Rent591HomeDetailInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeDetailInfo.
func (c *Rent591HomeDetailInfoClient) Update() *Rent591HomeDetailInfoUpdate {
	mutation := newRent591HomeDetailInfoMutation(c.config, OpUpdate)
	return &Rent591HomeDetailInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeDetailInfoClient) UpdateOne(rdi *Rent591HomeDetailInfo) *Rent591HomeDetailInfoUpdateOne {
	mutation := newRent591HomeDetailInfoMutation(c.config, OpUpdateOne, withRent591HomeDetailInfo(rdi))
	return &Rent591HomeDetailInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeDetailInfoClient) UpdateOneID(id int) *Rent591HomeDetailInfoUpdateOne {
	mutation := newRent591HomeDetailInfoMutation(c.config, OpUpdateOne, withRent591HomeDetailInfoID(id))
	return &Rent591HomeDetailInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeDetailInfo.
func (c *Rent591HomeDetailInfoClient) Delete() *Rent591HomeDetailInfoDelete {
	mutation := newRent591HomeDetailInfoMutation(c.config, OpDelete)
	return &Rent591HomeDetailInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeDetailInfoClient) DeleteOne(rdi *Rent591HomeDetailInfo) *Rent591HomeDetailInfoDeleteOne {
	return c.DeleteOneID(rdi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeDetailInfoClient) DeleteOneID(id int) *Rent591HomeDetailInfoDeleteOne {
	builder := c.Delete().Where(rent591homedetailinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDetailInfoDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeDetailInfo.
func (c *Rent591HomeDetailInfoClient) Query() *Rent591HomeDetailInfoQuery {
	return &Rent591HomeDetailInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeDetailInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeDetailInfo entity by its id.
func (c *Rent591HomeDetailInfoClient) Get(ctx context.Context, id int) (*Rent591HomeDetailInfo, error) {
	return c.Query().Where(rent591homedetailinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeDetailInfoClient) GetX(ctx context.Context, id int) *Rent591HomeDetailInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homeDetails queries the rent591home_details edge of a Rent591HomeDetailInfo.
func (c *Rent591HomeDetailInfoClient) QueryRent591homeDetails(rdi *Rent591HomeDetailInfo) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailinfo.Table, rent591homedetailinfo.FieldID, id),
			sqlgraph.To(rent591homedetail.Table, rent591homedetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetailinfo.Rent591homeDetailsTable, rent591homedetailinfo.Rent591homeDetailsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rdi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeDetailInfoClient) Hooks() []Hook {
	return c.hooks.Rent591HomeDetailInfo
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeDetailInfoClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeDetailInfo
}

func (c *Rent591HomeDetailInfoClient) mutate(ctx context.Context, m *Rent591HomeDetailInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeDetailInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeDetailInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeDetailInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDetailInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeDetailInfo mutation op: %q", m.Op())
	}
}

// Rent591HomeDetailNavDataClient is a client for the Rent591HomeDetailNavData schema.
type Rent591HomeDetailNavDataClient struct {
	config
}

// NewRent591HomeDetailNavDataClient returns a client for the Rent591HomeDetailNavData from the given config.
func NewRent591HomeDetailNavDataClient(c config) *Rent591HomeDetailNavDataClient {
	return &Rent591HomeDetailNavDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homedetailnavdata.Hooks(f(g(h())))`.
func (c *Rent591HomeDetailNavDataClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeDetailNavData = append(c.hooks.Rent591HomeDetailNavData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homedetailnavdata.Intercept(f(g(h())))`.
func (c *Rent591HomeDetailNavDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeDetailNavData = append(c.inters.Rent591HomeDetailNavData, interceptors...)
}

// Create returns a builder for creating a Rent591HomeDetailNavData entity.
func (c *Rent591HomeDetailNavDataClient) Create() *Rent591HomeDetailNavDataCreate {
	mutation := newRent591HomeDetailNavDataMutation(c.config, OpCreate)
	return &Rent591HomeDetailNavDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeDetailNavData entities.
func (c *Rent591HomeDetailNavDataClient) CreateBulk(builders ...*Rent591HomeDetailNavDataCreate) *Rent591HomeDetailNavDataCreateBulk {
	return &Rent591HomeDetailNavDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeDetailNavData.
func (c *Rent591HomeDetailNavDataClient) Update() *Rent591HomeDetailNavDataUpdate {
	mutation := newRent591HomeDetailNavDataMutation(c.config, OpUpdate)
	return &Rent591HomeDetailNavDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeDetailNavDataClient) UpdateOne(rdnd *Rent591HomeDetailNavData) *Rent591HomeDetailNavDataUpdateOne {
	mutation := newRent591HomeDetailNavDataMutation(c.config, OpUpdateOne, withRent591HomeDetailNavData(rdnd))
	return &Rent591HomeDetailNavDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeDetailNavDataClient) UpdateOneID(id int) *Rent591HomeDetailNavDataUpdateOne {
	mutation := newRent591HomeDetailNavDataMutation(c.config, OpUpdateOne, withRent591HomeDetailNavDataID(id))
	return &Rent591HomeDetailNavDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeDetailNavData.
func (c *Rent591HomeDetailNavDataClient) Delete() *Rent591HomeDetailNavDataDelete {
	mutation := newRent591HomeDetailNavDataMutation(c.config, OpDelete)
	return &Rent591HomeDetailNavDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeDetailNavDataClient) DeleteOne(rdnd *Rent591HomeDetailNavData) *Rent591HomeDetailNavDataDeleteOne {
	return c.DeleteOneID(rdnd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeDetailNavDataClient) DeleteOneID(id int) *Rent591HomeDetailNavDataDeleteOne {
	builder := c.Delete().Where(rent591homedetailnavdata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDetailNavDataDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeDetailNavData.
func (c *Rent591HomeDetailNavDataClient) Query() *Rent591HomeDetailNavDataQuery {
	return &Rent591HomeDetailNavDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeDetailNavData},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeDetailNavData entity by its id.
func (c *Rent591HomeDetailNavDataClient) Get(ctx context.Context, id int) (*Rent591HomeDetailNavData, error) {
	return c.Query().Where(rent591homedetailnavdata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeDetailNavDataClient) GetX(ctx context.Context, id int) *Rent591HomeDetailNavData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homeDetails queries the rent591home_details edge of a Rent591HomeDetailNavData.
func (c *Rent591HomeDetailNavDataClient) QueryRent591homeDetails(rdnd *Rent591HomeDetailNavData) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdnd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailnavdata.Table, rent591homedetailnavdata.FieldID, id),
			sqlgraph.To(rent591homedetail.Table, rent591homedetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetailnavdata.Rent591homeDetailsTable, rent591homedetailnavdata.Rent591homeDetailsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rdnd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeDetailNavDataClient) Hooks() []Hook {
	return c.hooks.Rent591HomeDetailNavData
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeDetailNavDataClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeDetailNavData
}

func (c *Rent591HomeDetailNavDataClient) mutate(ctx context.Context, m *Rent591HomeDetailNavDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeDetailNavDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeDetailNavDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeDetailNavDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDetailNavDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeDetailNavData mutation op: %q", m.Op())
	}
}

// Rent591HomeDetailPositionRoundClient is a client for the Rent591HomeDetailPositionRound schema.
type Rent591HomeDetailPositionRoundClient struct {
	config
}

// NewRent591HomeDetailPositionRoundClient returns a client for the Rent591HomeDetailPositionRound from the given config.
func NewRent591HomeDetailPositionRoundClient(c config) *Rent591HomeDetailPositionRoundClient {
	return &Rent591HomeDetailPositionRoundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homedetailpositionround.Hooks(f(g(h())))`.
func (c *Rent591HomeDetailPositionRoundClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeDetailPositionRound = append(c.hooks.Rent591HomeDetailPositionRound, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homedetailpositionround.Intercept(f(g(h())))`.
func (c *Rent591HomeDetailPositionRoundClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeDetailPositionRound = append(c.inters.Rent591HomeDetailPositionRound, interceptors...)
}

// Create returns a builder for creating a Rent591HomeDetailPositionRound entity.
func (c *Rent591HomeDetailPositionRoundClient) Create() *Rent591HomeDetailPositionRoundCreate {
	mutation := newRent591HomeDetailPositionRoundMutation(c.config, OpCreate)
	return &Rent591HomeDetailPositionRoundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeDetailPositionRound entities.
func (c *Rent591HomeDetailPositionRoundClient) CreateBulk(builders ...*Rent591HomeDetailPositionRoundCreate) *Rent591HomeDetailPositionRoundCreateBulk {
	return &Rent591HomeDetailPositionRoundCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeDetailPositionRound.
func (c *Rent591HomeDetailPositionRoundClient) Update() *Rent591HomeDetailPositionRoundUpdate {
	mutation := newRent591HomeDetailPositionRoundMutation(c.config, OpUpdate)
	return &Rent591HomeDetailPositionRoundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeDetailPositionRoundClient) UpdateOne(rdpr *Rent591HomeDetailPositionRound) *Rent591HomeDetailPositionRoundUpdateOne {
	mutation := newRent591HomeDetailPositionRoundMutation(c.config, OpUpdateOne, withRent591HomeDetailPositionRound(rdpr))
	return &Rent591HomeDetailPositionRoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeDetailPositionRoundClient) UpdateOneID(id int) *Rent591HomeDetailPositionRoundUpdateOne {
	mutation := newRent591HomeDetailPositionRoundMutation(c.config, OpUpdateOne, withRent591HomeDetailPositionRoundID(id))
	return &Rent591HomeDetailPositionRoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeDetailPositionRound.
func (c *Rent591HomeDetailPositionRoundClient) Delete() *Rent591HomeDetailPositionRoundDelete {
	mutation := newRent591HomeDetailPositionRoundMutation(c.config, OpDelete)
	return &Rent591HomeDetailPositionRoundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeDetailPositionRoundClient) DeleteOne(rdpr *Rent591HomeDetailPositionRound) *Rent591HomeDetailPositionRoundDeleteOne {
	return c.DeleteOneID(rdpr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeDetailPositionRoundClient) DeleteOneID(id int) *Rent591HomeDetailPositionRoundDeleteOne {
	builder := c.Delete().Where(rent591homedetailpositionround.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDetailPositionRoundDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeDetailPositionRound.
func (c *Rent591HomeDetailPositionRoundClient) Query() *Rent591HomeDetailPositionRoundQuery {
	return &Rent591HomeDetailPositionRoundQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeDetailPositionRound},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeDetailPositionRound entity by its id.
func (c *Rent591HomeDetailPositionRoundClient) Get(ctx context.Context, id int) (*Rent591HomeDetailPositionRound, error) {
	return c.Query().Where(rent591homedetailpositionround.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeDetailPositionRoundClient) GetX(ctx context.Context, id int) *Rent591HomeDetailPositionRound {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homeDetails queries the rent591home_details edge of a Rent591HomeDetailPositionRound.
func (c *Rent591HomeDetailPositionRoundClient) QueryRent591homeDetails(rdpr *Rent591HomeDetailPositionRound) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdpr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailpositionround.Table, rent591homedetailpositionround.FieldID, id),
			sqlgraph.To(rent591homedetail.Table, rent591homedetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, rent591homedetailpositionround.Rent591homeDetailsTable, rent591homedetailpositionround.Rent591homeDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(rdpr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeDetailPositionRoundDatas queries the rent591home_detail_position_round_datas edge of a Rent591HomeDetailPositionRound.
func (c *Rent591HomeDetailPositionRoundClient) QueryRent591homeDetailPositionRoundDatas(rdpr *Rent591HomeDetailPositionRound) *Rent591HomeDetailPositionRoundDataQuery {
	query := (&Rent591HomeDetailPositionRoundDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdpr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailpositionround.Table, rent591homedetailpositionround.FieldID, id),
			sqlgraph.To(rent591homedetailpositionrounddata.Table, rent591homedetailpositionrounddata.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasTable, rent591homedetailpositionround.Rent591homeDetailPositionRoundDatasPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rdpr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeDetailPositionRoundClient) Hooks() []Hook {
	return c.hooks.Rent591HomeDetailPositionRound
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeDetailPositionRoundClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeDetailPositionRound
}

func (c *Rent591HomeDetailPositionRoundClient) mutate(ctx context.Context, m *Rent591HomeDetailPositionRoundMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeDetailPositionRoundCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeDetailPositionRoundUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeDetailPositionRoundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDetailPositionRoundDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeDetailPositionRound mutation op: %q", m.Op())
	}
}

// Rent591HomeDetailPositionRoundDataClient is a client for the Rent591HomeDetailPositionRoundData schema.
type Rent591HomeDetailPositionRoundDataClient struct {
	config
}

// NewRent591HomeDetailPositionRoundDataClient returns a client for the Rent591HomeDetailPositionRoundData from the given config.
func NewRent591HomeDetailPositionRoundDataClient(c config) *Rent591HomeDetailPositionRoundDataClient {
	return &Rent591HomeDetailPositionRoundDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homedetailpositionrounddata.Hooks(f(g(h())))`.
func (c *Rent591HomeDetailPositionRoundDataClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeDetailPositionRoundData = append(c.hooks.Rent591HomeDetailPositionRoundData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homedetailpositionrounddata.Intercept(f(g(h())))`.
func (c *Rent591HomeDetailPositionRoundDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeDetailPositionRoundData = append(c.inters.Rent591HomeDetailPositionRoundData, interceptors...)
}

// Create returns a builder for creating a Rent591HomeDetailPositionRoundData entity.
func (c *Rent591HomeDetailPositionRoundDataClient) Create() *Rent591HomeDetailPositionRoundDataCreate {
	mutation := newRent591HomeDetailPositionRoundDataMutation(c.config, OpCreate)
	return &Rent591HomeDetailPositionRoundDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeDetailPositionRoundData entities.
func (c *Rent591HomeDetailPositionRoundDataClient) CreateBulk(builders ...*Rent591HomeDetailPositionRoundDataCreate) *Rent591HomeDetailPositionRoundDataCreateBulk {
	return &Rent591HomeDetailPositionRoundDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeDetailPositionRoundData.
func (c *Rent591HomeDetailPositionRoundDataClient) Update() *Rent591HomeDetailPositionRoundDataUpdate {
	mutation := newRent591HomeDetailPositionRoundDataMutation(c.config, OpUpdate)
	return &Rent591HomeDetailPositionRoundDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeDetailPositionRoundDataClient) UpdateOne(rdprd *Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundDataUpdateOne {
	mutation := newRent591HomeDetailPositionRoundDataMutation(c.config, OpUpdateOne, withRent591HomeDetailPositionRoundData(rdprd))
	return &Rent591HomeDetailPositionRoundDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeDetailPositionRoundDataClient) UpdateOneID(id int) *Rent591HomeDetailPositionRoundDataUpdateOne {
	mutation := newRent591HomeDetailPositionRoundDataMutation(c.config, OpUpdateOne, withRent591HomeDetailPositionRoundDataID(id))
	return &Rent591HomeDetailPositionRoundDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeDetailPositionRoundData.
func (c *Rent591HomeDetailPositionRoundDataClient) Delete() *Rent591HomeDetailPositionRoundDataDelete {
	mutation := newRent591HomeDetailPositionRoundDataMutation(c.config, OpDelete)
	return &Rent591HomeDetailPositionRoundDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeDetailPositionRoundDataClient) DeleteOne(rdprd *Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundDataDeleteOne {
	return c.DeleteOneID(rdprd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeDetailPositionRoundDataClient) DeleteOneID(id int) *Rent591HomeDetailPositionRoundDataDeleteOne {
	builder := c.Delete().Where(rent591homedetailpositionrounddata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDetailPositionRoundDataDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeDetailPositionRoundData.
func (c *Rent591HomeDetailPositionRoundDataClient) Query() *Rent591HomeDetailPositionRoundDataQuery {
	return &Rent591HomeDetailPositionRoundDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeDetailPositionRoundData},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeDetailPositionRoundData entity by its id.
func (c *Rent591HomeDetailPositionRoundDataClient) Get(ctx context.Context, id int) (*Rent591HomeDetailPositionRoundData, error) {
	return c.Query().Where(rent591homedetailpositionrounddata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeDetailPositionRoundDataClient) GetX(ctx context.Context, id int) *Rent591HomeDetailPositionRoundData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homeDetailPositionRounds queries the rent591home_detail_position_rounds edge of a Rent591HomeDetailPositionRoundData.
func (c *Rent591HomeDetailPositionRoundDataClient) QueryRent591homeDetailPositionRounds(rdprd *Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundQuery {
	query := (&Rent591HomeDetailPositionRoundClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdprd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailpositionrounddata.Table, rent591homedetailpositionrounddata.FieldID, id),
			sqlgraph.To(rent591homedetailpositionround.Table, rent591homedetailpositionround.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetailpositionrounddata.Rent591homeDetailPositionRoundsTable, rent591homedetailpositionrounddata.Rent591homeDetailPositionRoundsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rdprd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRent591homeDetailPositionRoundDataChildrens queries the rent591home_detail_position_round_data_childrens edge of a Rent591HomeDetailPositionRoundData.
func (c *Rent591HomeDetailPositionRoundDataClient) QueryRent591homeDetailPositionRoundDataChildrens(rdprd *Rent591HomeDetailPositionRoundData) *Rent591HomeDetailPositionRoundDataChildrenQuery {
	query := (&Rent591HomeDetailPositionRoundDataChildrenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdprd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailpositionrounddata.Table, rent591homedetailpositionrounddata.FieldID, id),
			sqlgraph.To(rent591homedetailpositionrounddatachildren.Table, rent591homedetailpositionrounddatachildren.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetailpositionrounddata.Rent591homeDetailPositionRoundDataChildrensTable, rent591homedetailpositionrounddata.Rent591homeDetailPositionRoundDataChildrensPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rdprd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeDetailPositionRoundDataClient) Hooks() []Hook {
	return c.hooks.Rent591HomeDetailPositionRoundData
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeDetailPositionRoundDataClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeDetailPositionRoundData
}

func (c *Rent591HomeDetailPositionRoundDataClient) mutate(ctx context.Context, m *Rent591HomeDetailPositionRoundDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeDetailPositionRoundDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeDetailPositionRoundDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeDetailPositionRoundDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDetailPositionRoundDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeDetailPositionRoundData mutation op: %q", m.Op())
	}
}

// Rent591HomeDetailPositionRoundDataChildrenClient is a client for the Rent591HomeDetailPositionRoundDataChildren schema.
type Rent591HomeDetailPositionRoundDataChildrenClient struct {
	config
}

// NewRent591HomeDetailPositionRoundDataChildrenClient returns a client for the Rent591HomeDetailPositionRoundDataChildren from the given config.
func NewRent591HomeDetailPositionRoundDataChildrenClient(c config) *Rent591HomeDetailPositionRoundDataChildrenClient {
	return &Rent591HomeDetailPositionRoundDataChildrenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homedetailpositionrounddatachildren.Hooks(f(g(h())))`.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeDetailPositionRoundDataChildren = append(c.hooks.Rent591HomeDetailPositionRoundDataChildren, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homedetailpositionrounddatachildren.Intercept(f(g(h())))`.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeDetailPositionRoundDataChildren = append(c.inters.Rent591HomeDetailPositionRoundDataChildren, interceptors...)
}

// Create returns a builder for creating a Rent591HomeDetailPositionRoundDataChildren entity.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) Create() *Rent591HomeDetailPositionRoundDataChildrenCreate {
	mutation := newRent591HomeDetailPositionRoundDataChildrenMutation(c.config, OpCreate)
	return &Rent591HomeDetailPositionRoundDataChildrenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeDetailPositionRoundDataChildren entities.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) CreateBulk(builders ...*Rent591HomeDetailPositionRoundDataChildrenCreate) *Rent591HomeDetailPositionRoundDataChildrenCreateBulk {
	return &Rent591HomeDetailPositionRoundDataChildrenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeDetailPositionRoundDataChildren.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) Update() *Rent591HomeDetailPositionRoundDataChildrenUpdate {
	mutation := newRent591HomeDetailPositionRoundDataChildrenMutation(c.config, OpUpdate)
	return &Rent591HomeDetailPositionRoundDataChildrenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) UpdateOne(rdprdc *Rent591HomeDetailPositionRoundDataChildren) *Rent591HomeDetailPositionRoundDataChildrenUpdateOne {
	mutation := newRent591HomeDetailPositionRoundDataChildrenMutation(c.config, OpUpdateOne, withRent591HomeDetailPositionRoundDataChildren(rdprdc))
	return &Rent591HomeDetailPositionRoundDataChildrenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) UpdateOneID(id int) *Rent591HomeDetailPositionRoundDataChildrenUpdateOne {
	mutation := newRent591HomeDetailPositionRoundDataChildrenMutation(c.config, OpUpdateOne, withRent591HomeDetailPositionRoundDataChildrenID(id))
	return &Rent591HomeDetailPositionRoundDataChildrenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeDetailPositionRoundDataChildren.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) Delete() *Rent591HomeDetailPositionRoundDataChildrenDelete {
	mutation := newRent591HomeDetailPositionRoundDataChildrenMutation(c.config, OpDelete)
	return &Rent591HomeDetailPositionRoundDataChildrenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) DeleteOne(rdprdc *Rent591HomeDetailPositionRoundDataChildren) *Rent591HomeDetailPositionRoundDataChildrenDeleteOne {
	return c.DeleteOneID(rdprdc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) DeleteOneID(id int) *Rent591HomeDetailPositionRoundDataChildrenDeleteOne {
	builder := c.Delete().Where(rent591homedetailpositionrounddatachildren.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDetailPositionRoundDataChildrenDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeDetailPositionRoundDataChildren.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) Query() *Rent591HomeDetailPositionRoundDataChildrenQuery {
	return &Rent591HomeDetailPositionRoundDataChildrenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeDetailPositionRoundDataChildren},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeDetailPositionRoundDataChildren entity by its id.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) Get(ctx context.Context, id int) (*Rent591HomeDetailPositionRoundDataChildren, error) {
	return c.Query().Where(rent591homedetailpositionrounddatachildren.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) GetX(ctx context.Context, id int) *Rent591HomeDetailPositionRoundDataChildren {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homeDetailPositionRoundDatas queries the rent591home_detail_position_round_datas edge of a Rent591HomeDetailPositionRoundDataChildren.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) QueryRent591homeDetailPositionRoundDatas(rdprdc *Rent591HomeDetailPositionRoundDataChildren) *Rent591HomeDetailPositionRoundDataQuery {
	query := (&Rent591HomeDetailPositionRoundDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdprdc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailpositionrounddatachildren.Table, rent591homedetailpositionrounddatachildren.FieldID, id),
			sqlgraph.To(rent591homedetailpositionrounddata.Table, rent591homedetailpositionrounddata.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasTable, rent591homedetailpositionrounddatachildren.Rent591homeDetailPositionRoundDatasPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rdprdc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) Hooks() []Hook {
	return c.hooks.Rent591HomeDetailPositionRoundDataChildren
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeDetailPositionRoundDataChildrenClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeDetailPositionRoundDataChildren
}

func (c *Rent591HomeDetailPositionRoundDataChildrenClient) mutate(ctx context.Context, m *Rent591HomeDetailPositionRoundDataChildrenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeDetailPositionRoundDataChildrenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeDetailPositionRoundDataChildrenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeDetailPositionRoundDataChildrenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDetailPositionRoundDataChildrenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeDetailPositionRoundDataChildren mutation op: %q", m.Op())
	}
}

// Rent591HomeDetailPublishClient is a client for the Rent591HomeDetailPublish schema.
type Rent591HomeDetailPublishClient struct {
	config
}

// NewRent591HomeDetailPublishClient returns a client for the Rent591HomeDetailPublish from the given config.
func NewRent591HomeDetailPublishClient(c config) *Rent591HomeDetailPublishClient {
	return &Rent591HomeDetailPublishClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homedetailpublish.Hooks(f(g(h())))`.
func (c *Rent591HomeDetailPublishClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeDetailPublish = append(c.hooks.Rent591HomeDetailPublish, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homedetailpublish.Intercept(f(g(h())))`.
func (c *Rent591HomeDetailPublishClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeDetailPublish = append(c.inters.Rent591HomeDetailPublish, interceptors...)
}

// Create returns a builder for creating a Rent591HomeDetailPublish entity.
func (c *Rent591HomeDetailPublishClient) Create() *Rent591HomeDetailPublishCreate {
	mutation := newRent591HomeDetailPublishMutation(c.config, OpCreate)
	return &Rent591HomeDetailPublishCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeDetailPublish entities.
func (c *Rent591HomeDetailPublishClient) CreateBulk(builders ...*Rent591HomeDetailPublishCreate) *Rent591HomeDetailPublishCreateBulk {
	return &Rent591HomeDetailPublishCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeDetailPublish.
func (c *Rent591HomeDetailPublishClient) Update() *Rent591HomeDetailPublishUpdate {
	mutation := newRent591HomeDetailPublishMutation(c.config, OpUpdate)
	return &Rent591HomeDetailPublishUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeDetailPublishClient) UpdateOne(rdp *Rent591HomeDetailPublish) *Rent591HomeDetailPublishUpdateOne {
	mutation := newRent591HomeDetailPublishMutation(c.config, OpUpdateOne, withRent591HomeDetailPublish(rdp))
	return &Rent591HomeDetailPublishUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeDetailPublishClient) UpdateOneID(id int) *Rent591HomeDetailPublishUpdateOne {
	mutation := newRent591HomeDetailPublishMutation(c.config, OpUpdateOne, withRent591HomeDetailPublishID(id))
	return &Rent591HomeDetailPublishUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeDetailPublish.
func (c *Rent591HomeDetailPublishClient) Delete() *Rent591HomeDetailPublishDelete {
	mutation := newRent591HomeDetailPublishMutation(c.config, OpDelete)
	return &Rent591HomeDetailPublishDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeDetailPublishClient) DeleteOne(rdp *Rent591HomeDetailPublish) *Rent591HomeDetailPublishDeleteOne {
	return c.DeleteOneID(rdp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeDetailPublishClient) DeleteOneID(id int) *Rent591HomeDetailPublishDeleteOne {
	builder := c.Delete().Where(rent591homedetailpublish.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDetailPublishDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeDetailPublish.
func (c *Rent591HomeDetailPublishClient) Query() *Rent591HomeDetailPublishQuery {
	return &Rent591HomeDetailPublishQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeDetailPublish},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeDetailPublish entity by its id.
func (c *Rent591HomeDetailPublishClient) Get(ctx context.Context, id int) (*Rent591HomeDetailPublish, error) {
	return c.Query().Where(rent591homedetailpublish.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeDetailPublishClient) GetX(ctx context.Context, id int) *Rent591HomeDetailPublish {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homeDetails queries the rent591home_details edge of a Rent591HomeDetailPublish.
func (c *Rent591HomeDetailPublishClient) QueryRent591homeDetails(rdp *Rent591HomeDetailPublish) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailpublish.Table, rent591homedetailpublish.FieldID, id),
			sqlgraph.To(rent591homedetail.Table, rent591homedetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetailpublish.Rent591homeDetailsTable, rent591homedetailpublish.Rent591homeDetailsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rdp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeDetailPublishClient) Hooks() []Hook {
	return c.hooks.Rent591HomeDetailPublish
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeDetailPublishClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeDetailPublish
}

func (c *Rent591HomeDetailPublishClient) mutate(ctx context.Context, m *Rent591HomeDetailPublishMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeDetailPublishCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeDetailPublishUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeDetailPublishUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDetailPublishDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeDetailPublish mutation op: %q", m.Op())
	}
}

// Rent591HomeDetailShareInfoClient is a client for the Rent591HomeDetailShareInfo schema.
type Rent591HomeDetailShareInfoClient struct {
	config
}

// NewRent591HomeDetailShareInfoClient returns a client for the Rent591HomeDetailShareInfo from the given config.
func NewRent591HomeDetailShareInfoClient(c config) *Rent591HomeDetailShareInfoClient {
	return &Rent591HomeDetailShareInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homedetailshareinfo.Hooks(f(g(h())))`.
func (c *Rent591HomeDetailShareInfoClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeDetailShareInfo = append(c.hooks.Rent591HomeDetailShareInfo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homedetailshareinfo.Intercept(f(g(h())))`.
func (c *Rent591HomeDetailShareInfoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeDetailShareInfo = append(c.inters.Rent591HomeDetailShareInfo, interceptors...)
}

// Create returns a builder for creating a Rent591HomeDetailShareInfo entity.
func (c *Rent591HomeDetailShareInfoClient) Create() *Rent591HomeDetailShareInfoCreate {
	mutation := newRent591HomeDetailShareInfoMutation(c.config, OpCreate)
	return &Rent591HomeDetailShareInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeDetailShareInfo entities.
func (c *Rent591HomeDetailShareInfoClient) CreateBulk(builders ...*Rent591HomeDetailShareInfoCreate) *Rent591HomeDetailShareInfoCreateBulk {
	return &Rent591HomeDetailShareInfoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeDetailShareInfo.
func (c *Rent591HomeDetailShareInfoClient) Update() *Rent591HomeDetailShareInfoUpdate {
	mutation := newRent591HomeDetailShareInfoMutation(c.config, OpUpdate)
	return &Rent591HomeDetailShareInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeDetailShareInfoClient) UpdateOne(rdsi *Rent591HomeDetailShareInfo) *Rent591HomeDetailShareInfoUpdateOne {
	mutation := newRent591HomeDetailShareInfoMutation(c.config, OpUpdateOne, withRent591HomeDetailShareInfo(rdsi))
	return &Rent591HomeDetailShareInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeDetailShareInfoClient) UpdateOneID(id int) *Rent591HomeDetailShareInfoUpdateOne {
	mutation := newRent591HomeDetailShareInfoMutation(c.config, OpUpdateOne, withRent591HomeDetailShareInfoID(id))
	return &Rent591HomeDetailShareInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeDetailShareInfo.
func (c *Rent591HomeDetailShareInfoClient) Delete() *Rent591HomeDetailShareInfoDelete {
	mutation := newRent591HomeDetailShareInfoMutation(c.config, OpDelete)
	return &Rent591HomeDetailShareInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeDetailShareInfoClient) DeleteOne(rdsi *Rent591HomeDetailShareInfo) *Rent591HomeDetailShareInfoDeleteOne {
	return c.DeleteOneID(rdsi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeDetailShareInfoClient) DeleteOneID(id int) *Rent591HomeDetailShareInfoDeleteOne {
	builder := c.Delete().Where(rent591homedetailshareinfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDetailShareInfoDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeDetailShareInfo.
func (c *Rent591HomeDetailShareInfoClient) Query() *Rent591HomeDetailShareInfoQuery {
	return &Rent591HomeDetailShareInfoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeDetailShareInfo},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeDetailShareInfo entity by its id.
func (c *Rent591HomeDetailShareInfoClient) Get(ctx context.Context, id int) (*Rent591HomeDetailShareInfo, error) {
	return c.Query().Where(rent591homedetailshareinfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeDetailShareInfoClient) GetX(ctx context.Context, id int) *Rent591HomeDetailShareInfo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homeDetails queries the rent591home_details edge of a Rent591HomeDetailShareInfo.
func (c *Rent591HomeDetailShareInfoClient) QueryRent591homeDetails(rdsi *Rent591HomeDetailShareInfo) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdsi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailshareinfo.Table, rent591homedetailshareinfo.FieldID, id),
			sqlgraph.To(rent591homedetail.Table, rent591homedetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, rent591homedetailshareinfo.Rent591homeDetailsTable, rent591homedetailshareinfo.Rent591homeDetailsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rdsi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeDetailShareInfoClient) Hooks() []Hook {
	return c.hooks.Rent591HomeDetailShareInfo
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeDetailShareInfoClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeDetailShareInfo
}

func (c *Rent591HomeDetailShareInfoClient) mutate(ctx context.Context, m *Rent591HomeDetailShareInfoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeDetailShareInfoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeDetailShareInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeDetailShareInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDetailShareInfoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeDetailShareInfo mutation op: %q", m.Op())
	}
}

// Rent591HomeDetailTagClient is a client for the Rent591HomeDetailTag schema.
type Rent591HomeDetailTagClient struct {
	config
}

// NewRent591HomeDetailTagClient returns a client for the Rent591HomeDetailTag from the given config.
func NewRent591HomeDetailTagClient(c config) *Rent591HomeDetailTagClient {
	return &Rent591HomeDetailTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homedetailtag.Hooks(f(g(h())))`.
func (c *Rent591HomeDetailTagClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeDetailTag = append(c.hooks.Rent591HomeDetailTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homedetailtag.Intercept(f(g(h())))`.
func (c *Rent591HomeDetailTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeDetailTag = append(c.inters.Rent591HomeDetailTag, interceptors...)
}

// Create returns a builder for creating a Rent591HomeDetailTag entity.
func (c *Rent591HomeDetailTagClient) Create() *Rent591HomeDetailTagCreate {
	mutation := newRent591HomeDetailTagMutation(c.config, OpCreate)
	return &Rent591HomeDetailTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeDetailTag entities.
func (c *Rent591HomeDetailTagClient) CreateBulk(builders ...*Rent591HomeDetailTagCreate) *Rent591HomeDetailTagCreateBulk {
	return &Rent591HomeDetailTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeDetailTag.
func (c *Rent591HomeDetailTagClient) Update() *Rent591HomeDetailTagUpdate {
	mutation := newRent591HomeDetailTagMutation(c.config, OpUpdate)
	return &Rent591HomeDetailTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeDetailTagClient) UpdateOne(rdt *Rent591HomeDetailTag) *Rent591HomeDetailTagUpdateOne {
	mutation := newRent591HomeDetailTagMutation(c.config, OpUpdateOne, withRent591HomeDetailTag(rdt))
	return &Rent591HomeDetailTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeDetailTagClient) UpdateOneID(id int) *Rent591HomeDetailTagUpdateOne {
	mutation := newRent591HomeDetailTagMutation(c.config, OpUpdateOne, withRent591HomeDetailTagID(id))
	return &Rent591HomeDetailTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeDetailTag.
func (c *Rent591HomeDetailTagClient) Delete() *Rent591HomeDetailTagDelete {
	mutation := newRent591HomeDetailTagMutation(c.config, OpDelete)
	return &Rent591HomeDetailTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeDetailTagClient) DeleteOne(rdt *Rent591HomeDetailTag) *Rent591HomeDetailTagDeleteOne {
	return c.DeleteOneID(rdt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeDetailTagClient) DeleteOneID(id int) *Rent591HomeDetailTagDeleteOne {
	builder := c.Delete().Where(rent591homedetailtag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeDetailTagDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeDetailTag.
func (c *Rent591HomeDetailTagClient) Query() *Rent591HomeDetailTagQuery {
	return &Rent591HomeDetailTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeDetailTag},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeDetailTag entity by its id.
func (c *Rent591HomeDetailTagClient) Get(ctx context.Context, id int) (*Rent591HomeDetailTag, error) {
	return c.Query().Where(rent591homedetailtag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeDetailTagClient) GetX(ctx context.Context, id int) *Rent591HomeDetailTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homeDetails queries the rent591home_details edge of a Rent591HomeDetailTag.
func (c *Rent591HomeDetailTagClient) QueryRent591homeDetails(rdt *Rent591HomeDetailTag) *Rent591HomeDetailQuery {
	query := (&Rent591HomeDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rdt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homedetailtag.Table, rent591homedetailtag.FieldID, id),
			sqlgraph.To(rent591homedetail.Table, rent591homedetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591homedetailtag.Rent591homeDetailsTable, rent591homedetailtag.Rent591homeDetailsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rdt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeDetailTagClient) Hooks() []Hook {
	return c.hooks.Rent591HomeDetailTag
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeDetailTagClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeDetailTag
}

func (c *Rent591HomeDetailTagClient) mutate(ctx context.Context, m *Rent591HomeDetailTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeDetailTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeDetailTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeDetailTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeDetailTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeDetailTag mutation op: %q", m.Op())
	}
}

// Rent591HomeSurroundingClient is a client for the Rent591HomeSurrounding schema.
type Rent591HomeSurroundingClient struct {
	config
}

// NewRent591HomeSurroundingClient returns a client for the Rent591HomeSurrounding from the given config.
func NewRent591HomeSurroundingClient(c config) *Rent591HomeSurroundingClient {
	return &Rent591HomeSurroundingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591homesurrounding.Hooks(f(g(h())))`.
func (c *Rent591HomeSurroundingClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeSurrounding = append(c.hooks.Rent591HomeSurrounding, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591homesurrounding.Intercept(f(g(h())))`.
func (c *Rent591HomeSurroundingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeSurrounding = append(c.inters.Rent591HomeSurrounding, interceptors...)
}

// Create returns a builder for creating a Rent591HomeSurrounding entity.
func (c *Rent591HomeSurroundingClient) Create() *Rent591HomeSurroundingCreate {
	mutation := newRent591HomeSurroundingMutation(c.config, OpCreate)
	return &Rent591HomeSurroundingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeSurrounding entities.
func (c *Rent591HomeSurroundingClient) CreateBulk(builders ...*Rent591HomeSurroundingCreate) *Rent591HomeSurroundingCreateBulk {
	return &Rent591HomeSurroundingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeSurrounding.
func (c *Rent591HomeSurroundingClient) Update() *Rent591HomeSurroundingUpdate {
	mutation := newRent591HomeSurroundingMutation(c.config, OpUpdate)
	return &Rent591HomeSurroundingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeSurroundingClient) UpdateOne(rs *Rent591HomeSurrounding) *Rent591HomeSurroundingUpdateOne {
	mutation := newRent591HomeSurroundingMutation(c.config, OpUpdateOne, withRent591HomeSurrounding(rs))
	return &Rent591HomeSurroundingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeSurroundingClient) UpdateOneID(id int) *Rent591HomeSurroundingUpdateOne {
	mutation := newRent591HomeSurroundingMutation(c.config, OpUpdateOne, withRent591HomeSurroundingID(id))
	return &Rent591HomeSurroundingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeSurrounding.
func (c *Rent591HomeSurroundingClient) Delete() *Rent591HomeSurroundingDelete {
	mutation := newRent591HomeSurroundingMutation(c.config, OpDelete)
	return &Rent591HomeSurroundingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeSurroundingClient) DeleteOne(rs *Rent591HomeSurrounding) *Rent591HomeSurroundingDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeSurroundingClient) DeleteOneID(id int) *Rent591HomeSurroundingDeleteOne {
	builder := c.Delete().Where(rent591homesurrounding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeSurroundingDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeSurrounding.
func (c *Rent591HomeSurroundingClient) Query() *Rent591HomeSurroundingQuery {
	return &Rent591HomeSurroundingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeSurrounding},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeSurrounding entity by its id.
func (c *Rent591HomeSurroundingClient) Get(ctx context.Context, id int) (*Rent591HomeSurrounding, error) {
	return c.Query().Where(rent591homesurrounding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeSurroundingClient) GetX(ctx context.Context, id int) *Rent591HomeSurrounding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homes queries the rent591homes edge of a Rent591HomeSurrounding.
func (c *Rent591HomeSurroundingClient) QueryRent591homes(rs *Rent591HomeSurrounding) *Rent591HomeQuery {
	query := (&Rent591HomeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591homesurrounding.Table, rent591homesurrounding.FieldID, id),
			sqlgraph.To(rent591home.Table, rent591home.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, rent591homesurrounding.Rent591homesTable, rent591homesurrounding.Rent591homesColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeSurroundingClient) Hooks() []Hook {
	return c.hooks.Rent591HomeSurrounding
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeSurroundingClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeSurrounding
}

func (c *Rent591HomeSurroundingClient) mutate(ctx context.Context, m *Rent591HomeSurroundingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeSurroundingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeSurroundingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeSurroundingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeSurroundingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeSurrounding mutation op: %q", m.Op())
	}
}

// Rent591HomeTagClient is a client for the Rent591HomeTag schema.
type Rent591HomeTagClient struct {
	config
}

// NewRent591HomeTagClient returns a client for the Rent591HomeTag from the given config.
func NewRent591HomeTagClient(c config) *Rent591HomeTagClient {
	return &Rent591HomeTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent591hometag.Hooks(f(g(h())))`.
func (c *Rent591HomeTagClient) Use(hooks ...Hook) {
	c.hooks.Rent591HomeTag = append(c.hooks.Rent591HomeTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rent591hometag.Intercept(f(g(h())))`.
func (c *Rent591HomeTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rent591HomeTag = append(c.inters.Rent591HomeTag, interceptors...)
}

// Create returns a builder for creating a Rent591HomeTag entity.
func (c *Rent591HomeTagClient) Create() *Rent591HomeTagCreate {
	mutation := newRent591HomeTagMutation(c.config, OpCreate)
	return &Rent591HomeTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rent591HomeTag entities.
func (c *Rent591HomeTagClient) CreateBulk(builders ...*Rent591HomeTagCreate) *Rent591HomeTagCreateBulk {
	return &Rent591HomeTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rent591HomeTag.
func (c *Rent591HomeTagClient) Update() *Rent591HomeTagUpdate {
	mutation := newRent591HomeTagMutation(c.config, OpUpdate)
	return &Rent591HomeTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Rent591HomeTagClient) UpdateOne(rt *Rent591HomeTag) *Rent591HomeTagUpdateOne {
	mutation := newRent591HomeTagMutation(c.config, OpUpdateOne, withRent591HomeTag(rt))
	return &Rent591HomeTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Rent591HomeTagClient) UpdateOneID(id int) *Rent591HomeTagUpdateOne {
	mutation := newRent591HomeTagMutation(c.config, OpUpdateOne, withRent591HomeTagID(id))
	return &Rent591HomeTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent591HomeTag.
func (c *Rent591HomeTagClient) Delete() *Rent591HomeTagDelete {
	mutation := newRent591HomeTagMutation(c.config, OpDelete)
	return &Rent591HomeTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Rent591HomeTagClient) DeleteOne(rt *Rent591HomeTag) *Rent591HomeTagDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Rent591HomeTagClient) DeleteOneID(id int) *Rent591HomeTagDeleteOne {
	builder := c.Delete().Where(rent591hometag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Rent591HomeTagDeleteOne{builder}
}

// Query returns a query builder for Rent591HomeTag.
func (c *Rent591HomeTagClient) Query() *Rent591HomeTagQuery {
	return &Rent591HomeTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRent591HomeTag},
		inters: c.Interceptors(),
	}
}

// Get returns a Rent591HomeTag entity by its id.
func (c *Rent591HomeTagClient) Get(ctx context.Context, id int) (*Rent591HomeTag, error) {
	return c.Query().Where(rent591hometag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Rent591HomeTagClient) GetX(ctx context.Context, id int) *Rent591HomeTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRent591homes queries the rent591homes edge of a Rent591HomeTag.
func (c *Rent591HomeTagClient) QueryRent591homes(rt *Rent591HomeTag) *Rent591HomeQuery {
	query := (&Rent591HomeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent591hometag.Table, rent591hometag.FieldID, id),
			sqlgraph.To(rent591home.Table, rent591home.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rent591hometag.Rent591homesTable, rent591hometag.Rent591homesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Rent591HomeTagClient) Hooks() []Hook {
	return c.hooks.Rent591HomeTag
}

// Interceptors returns the client interceptors.
func (c *Rent591HomeTagClient) Interceptors() []Interceptor {
	return c.inters.Rent591HomeTag
}

func (c *Rent591HomeTagClient) mutate(ctx context.Context, m *Rent591HomeTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Rent591HomeTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Rent591HomeTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Rent591HomeTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Rent591HomeTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rent591HomeTag mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Rent591Home, Rent591HomeDetail, Rent591HomeDetailBreadcrumb,
		Rent591HomeDetailBrowse, Rent591HomeDetailInfo, Rent591HomeDetailNavData,
		Rent591HomeDetailPositionRound, Rent591HomeDetailPositionRoundData,
		Rent591HomeDetailPositionRoundDataChildren, Rent591HomeDetailPublish,
		Rent591HomeDetailShareInfo, Rent591HomeDetailTag, Rent591HomeSurrounding,
		Rent591HomeTag []ent.Hook
	}
	inters struct {
		Rent591Home, Rent591HomeDetail, Rent591HomeDetailBreadcrumb,
		Rent591HomeDetailBrowse, Rent591HomeDetailInfo, Rent591HomeDetailNavData,
		Rent591HomeDetailPositionRound, Rent591HomeDetailPositionRoundData,
		Rent591HomeDetailPositionRoundDataChildren, Rent591HomeDetailPublish,
		Rent591HomeDetailShareInfo, Rent591HomeDetailTag, Rent591HomeSurrounding,
		Rent591HomeTag []ent.Interceptor
	}
)

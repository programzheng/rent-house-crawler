// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/programzheng/rent-house-crawler/ent/predicate"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpublish"
)

// Rent591HomeDetailPublishDelete is the builder for deleting a Rent591HomeDetailPublish entity.
type Rent591HomeDetailPublishDelete struct {
	config
	hooks    []Hook
	mutation *Rent591HomeDetailPublishMutation
}

// Where appends a list predicates to the Rent591HomeDetailPublishDelete builder.
func (rdpd *Rent591HomeDetailPublishDelete) Where(ps ...predicate.Rent591HomeDetailPublish) *Rent591HomeDetailPublishDelete {
	rdpd.mutation.Where(ps...)
	return rdpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rdpd *Rent591HomeDetailPublishDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rdpd.sqlExec, rdpd.mutation, rdpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rdpd *Rent591HomeDetailPublishDelete) ExecX(ctx context.Context) int {
	n, err := rdpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rdpd *Rent591HomeDetailPublishDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(rent591homedetailpublish.Table, sqlgraph.NewFieldSpec(rent591homedetailpublish.FieldID, field.TypeInt))
	if ps := rdpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rdpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rdpd.mutation.done = true
	return affected, err
}

// Rent591HomeDetailPublishDeleteOne is the builder for deleting a single Rent591HomeDetailPublish entity.
type Rent591HomeDetailPublishDeleteOne struct {
	rdpd *Rent591HomeDetailPublishDelete
}

// Where appends a list predicates to the Rent591HomeDetailPublishDelete builder.
func (rdpdo *Rent591HomeDetailPublishDeleteOne) Where(ps ...predicate.Rent591HomeDetailPublish) *Rent591HomeDetailPublishDeleteOne {
	rdpdo.rdpd.mutation.Where(ps...)
	return rdpdo
}

// Exec executes the deletion query.
func (rdpdo *Rent591HomeDetailPublishDeleteOne) Exec(ctx context.Context) error {
	n, err := rdpdo.rdpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rent591homedetailpublish.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rdpdo *Rent591HomeDetailPublishDeleteOne) ExecX(ctx context.Context) {
	if err := rdpdo.Exec(ctx); err != nil {
		panic(err)
	}
}

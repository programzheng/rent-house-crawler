// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/programzheng/rent-house-crawler/ent/rent591homedetailpositionrounddata"
)

// Rent591HomeDetailPositionRoundData is the model entity for the Rent591HomeDetailPositionRoundData schema.
type Rent591HomeDetailPositionRoundData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Rent591HomeDetailPositionRoundDataQuery when eager-loading is set.
	Edges        Rent591HomeDetailPositionRoundDataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Rent591HomeDetailPositionRoundDataEdges holds the relations/edges for other nodes in the graph.
type Rent591HomeDetailPositionRoundDataEdges struct {
	// Rent591homeDetailPositionRounds holds the value of the rent591home_detail_position_rounds edge.
	Rent591homeDetailPositionRounds []*Rent591HomeDetailPositionRound `json:"rent591home_detail_position_rounds,omitempty"`
	// Rent591homeDetailPositionRoundDataChildrens holds the value of the rent591home_detail_position_round_data_childrens edge.
	Rent591homeDetailPositionRoundDataChildrens []*Rent591HomeDetailPositionRoundDataChildren `json:"rent591home_detail_position_round_data_childrens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// Rent591homeDetailPositionRoundsOrErr returns the Rent591homeDetailPositionRounds value or an error if the edge
// was not loaded in eager-loading.
func (e Rent591HomeDetailPositionRoundDataEdges) Rent591homeDetailPositionRoundsOrErr() ([]*Rent591HomeDetailPositionRound, error) {
	if e.loadedTypes[0] {
		return e.Rent591homeDetailPositionRounds, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_detail_position_rounds"}
}

// Rent591homeDetailPositionRoundDataChildrensOrErr returns the Rent591homeDetailPositionRoundDataChildrens value or an error if the edge
// was not loaded in eager-loading.
func (e Rent591HomeDetailPositionRoundDataEdges) Rent591homeDetailPositionRoundDataChildrensOrErr() ([]*Rent591HomeDetailPositionRoundDataChildren, error) {
	if e.loadedTypes[1] {
		return e.Rent591homeDetailPositionRoundDataChildrens, nil
	}
	return nil, &NotLoadedError{edge: "rent591home_detail_position_round_data_childrens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rent591HomeDetailPositionRoundData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rent591homedetailpositionrounddata.FieldID:
			values[i] = new(sql.NullInt64)
		case rent591homedetailpositionrounddata.FieldName, rent591homedetailpositionrounddata.FieldKey:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rent591HomeDetailPositionRoundData fields.
func (rdprd *Rent591HomeDetailPositionRoundData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rent591homedetailpositionrounddata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rdprd.ID = int(value.Int64)
		case rent591homedetailpositionrounddata.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rdprd.Name = value.String
			}
		case rent591homedetailpositionrounddata.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				rdprd.Key = value.String
			}
		default:
			rdprd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rent591HomeDetailPositionRoundData.
// This includes values selected through modifiers, order, etc.
func (rdprd *Rent591HomeDetailPositionRoundData) Value(name string) (ent.Value, error) {
	return rdprd.selectValues.Get(name)
}

// QueryRent591homeDetailPositionRounds queries the "rent591home_detail_position_rounds" edge of the Rent591HomeDetailPositionRoundData entity.
func (rdprd *Rent591HomeDetailPositionRoundData) QueryRent591homeDetailPositionRounds() *Rent591HomeDetailPositionRoundQuery {
	return NewRent591HomeDetailPositionRoundDataClient(rdprd.config).QueryRent591homeDetailPositionRounds(rdprd)
}

// QueryRent591homeDetailPositionRoundDataChildrens queries the "rent591home_detail_position_round_data_childrens" edge of the Rent591HomeDetailPositionRoundData entity.
func (rdprd *Rent591HomeDetailPositionRoundData) QueryRent591homeDetailPositionRoundDataChildrens() *Rent591HomeDetailPositionRoundDataChildrenQuery {
	return NewRent591HomeDetailPositionRoundDataClient(rdprd.config).QueryRent591homeDetailPositionRoundDataChildrens(rdprd)
}

// Update returns a builder for updating this Rent591HomeDetailPositionRoundData.
// Note that you need to call Rent591HomeDetailPositionRoundData.Unwrap() before calling this method if this Rent591HomeDetailPositionRoundData
// was returned from a transaction, and the transaction was committed or rolled back.
func (rdprd *Rent591HomeDetailPositionRoundData) Update() *Rent591HomeDetailPositionRoundDataUpdateOne {
	return NewRent591HomeDetailPositionRoundDataClient(rdprd.config).UpdateOne(rdprd)
}

// Unwrap unwraps the Rent591HomeDetailPositionRoundData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rdprd *Rent591HomeDetailPositionRoundData) Unwrap() *Rent591HomeDetailPositionRoundData {
	_tx, ok := rdprd.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rent591HomeDetailPositionRoundData is not a transactional entity")
	}
	rdprd.config.driver = _tx.drv
	return rdprd
}

// String implements the fmt.Stringer.
func (rdprd *Rent591HomeDetailPositionRoundData) String() string {
	var builder strings.Builder
	builder.WriteString("Rent591HomeDetailPositionRoundData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rdprd.ID))
	builder.WriteString("name=")
	builder.WriteString(rdprd.Name)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(rdprd.Key)
	builder.WriteByte(')')
	return builder.String()
}

// Rent591HomeDetailPositionRoundDataSlice is a parsable slice of Rent591HomeDetailPositionRoundData.
type Rent591HomeDetailPositionRoundDataSlice []*Rent591HomeDetailPositionRoundData

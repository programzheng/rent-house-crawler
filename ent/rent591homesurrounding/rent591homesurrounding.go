// Code generated by ent, DO NOT EDIT.

package rent591homesurrounding

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rent591homesurrounding type in the database.
	Label = "rent591home_surrounding"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldDistance holds the string denoting the distance field in the database.
	FieldDistance = "distance"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeRent591homes holds the string denoting the rent591homes edge name in mutations.
	EdgeRent591homes = "rent591homes"
	// Table holds the table name of the rent591homesurrounding in the database.
	Table = "rent591home_surroundings"
	// Rent591homesTable is the table that holds the rent591homes relation/edge.
	Rent591homesTable = "rent591home_surroundings"
	// Rent591homesInverseTable is the table name for the Rent591Home entity.
	// It exists in this package in order to avoid circular dependency with the "rent591home" package.
	Rent591homesInverseTable = "rent591homes"
	// Rent591homesColumn is the table column denoting the rent591homes relation/edge.
	Rent591homesColumn = "rent591home_rent591home_surroundings"
)

// Columns holds all SQL columns for rent591homesurrounding fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldDesc,
	FieldDistance,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rent591home_surroundings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"rent591home_rent591home_surroundings",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Rent591HomeSurrounding queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByDistance orders the results by the distance field.
func ByDistance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistance, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByRent591homesField orders the results by rent591homes field.
func ByRent591homesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRent591homesStep(), sql.OrderByField(field, opts...))
	}
}
func newRent591homesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Rent591homesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, Rent591homesTable, Rent591homesColumn),
	)
}
